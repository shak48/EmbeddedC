
004TasksLedsPeriodic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f6c  08006f6c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f74  08006f74  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014488  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001449c  2001449c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b57  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000312d  00000000  00000000  00038b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  0003cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bf5  00000000  00000000  0003e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ddf  00000000  00000000  00061d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c99  00000000  00000000  00076af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014e78d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f18  00000000  00000000  0014e7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dac 	.word	0x08006dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006dac 	.word	0x08006dac

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200143f4 	.word	0x200143f4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fbb9 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f889 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8f1 	bl	8000750 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <main+0xfc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a39      	ldr	r2, [pc, #228]	; (8000658 <main+0xfc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 fb2b 	bl	8004bd4 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057e:	f005 fded 	bl	800615c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "Led Green Task", 200, NULL, 2, &task1_handle);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4932      	ldr	r1, [pc, #200]	; (800065c <main+0x100>)
 8000592:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0x104>)
 8000594:	f002 fbe2 	bl	8002d5c <xTaskCreate>
 8000598:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  status = xTaskCreate(led_orange_handler, "Led Orange Task", 200, NULL, 2, &task2_handle);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	4927      	ldr	r1, [pc, #156]	; (8000664 <main+0x108>)
 80005c6:	4828      	ldr	r0, [pc, #160]	; (8000668 <main+0x10c>)
 80005c8:	f002 fbc8 	bl	8002d5c <xTaskCreate>
 80005cc:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x8e>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	61fb      	str	r3, [r7, #28]
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x8c>

  status = xTaskCreate(led_red_handler, "Led Red Task", 200, NULL, 2, &task3_handle);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	491c      	ldr	r1, [pc, #112]	; (800066c <main+0x110>)
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0x114>)
 80005fc:	f002 fbae 	bl	8002d5c <xTaskCreate>
 8000600:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	61bb      	str	r3, [r7, #24]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  status = xTaskCreate(led_blue_handler, "Led Blue Task", 200, NULL, 2, &task4_handle);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	4912      	ldr	r1, [pc, #72]	; (8000674 <main+0x118>)
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <main+0x11c>)
 800062e:	f002 fb95 	bl	8002d5c <xTaskCreate>
 8000632:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d00a      	beq.n	8000650 <main+0xf4>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	617b      	str	r3, [r7, #20]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0xf2>

  vTaskStartScheduler();
 8000650:	f002 fd6a 	bl	8003128 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0xf8>
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	08006dc4 	.word	0x08006dc4
 8000660:	08000a0d 	.word	0x08000a0d
 8000664:	08006dd4 	.word	0x08006dd4
 8000668:	08000a45 	.word	0x08000a45
 800066c:	08006de4 	.word	0x08006de4
 8000670:	08000a7d 	.word	0x08000a7d
 8000674:	08006df4 	.word	0x08006df4
 8000678:	08000ab5 	.word	0x08000ab5

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fb86 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fddd 	bl	80012c0 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 fa00 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f83e 	bl	80017b0 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 f9e9 	bl	8000b10 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4aa1      	ldr	r2, [pc, #644]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b9f      	ldr	r3, [pc, #636]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b9b      	ldr	r3, [pc, #620]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a9a      	ldr	r2, [pc, #616]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b94      	ldr	r3, [pc, #592]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a93      	ldr	r2, [pc, #588]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b91      	ldr	r3, [pc, #580]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a8c      	ldr	r2, [pc, #560]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b8a      	ldr	r3, [pc, #552]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b86      	ldr	r3, [pc, #536]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a85      	ldr	r2, [pc, #532]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b7f      	ldr	r3, [pc, #508]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a7e      	ldr	r2, [pc, #504]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000814:	f000 fd20 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fd1b 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 800082a:	f000 fd15 	bl	8001258 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	486c      	ldr	r0, [pc, #432]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000846:	f000 fb6b 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4866      	ldr	r0, [pc, #408]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fb5d 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	485e      	ldr	r0, [pc, #376]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000882:	f000 fb4d 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb40 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b0:	2306      	movs	r3, #6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4852      	ldr	r0, [pc, #328]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008bc:	f000 fb30 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c0:	23e0      	movs	r3, #224	; 0xe0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d0:	2305      	movs	r3, #5
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb20 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4845      	ldr	r0, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80008f4:	f000 fb14 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 8000916:	f000 fb03 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4833      	ldr	r0, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 8000934:	f000 faf4 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000938:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094a:	2306      	movs	r3, #6
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000956:	f000 fae3 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000970:	f000 fad6 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000974:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000986:	230a      	movs	r3, #10
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000992:	f000 fac5 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4815      	ldr	r0, [pc, #84]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 80009aa:	f000 fab9 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80009cc:	f000 faa8 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 80009e6:	f000 fa9b 	bl	8000f20 <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <led_green_handler>:

/* USER CODE BEGIN 4 */
void led_green_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	TickType_t last_wakwup_time=xTaskGetTickCount();
 8000a14:	f002 fc98 	bl	8003348 <xTaskGetTickCount>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <led_green_handler+0x30>)
 8000a22:	f000 fc32 	bl	800128a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(1000) );
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 faf8 	bl	8003024 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <led_green_handler+0x34>)
 8000a36:	f006 f901 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a3a:	e7ef      	b.n	8000a1c <led_green_handler+0x10>
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	08006e04 	.word	0x08006e04

08000a44 <led_orange_handler>:

	}
}
void led_orange_handler(void* parameters)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakwup_time=xTaskGetTickCount();
 8000a4c:	f002 fc7c 	bl	8003348 <xTaskGetTickCount>
 8000a50:	4603      	mov	r3, r0
 8000a52:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <led_orange_handler+0x30>)
 8000a5a:	f000 fc16 	bl	800128a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(800) );
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fadc 	bl	8003024 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Orange Led toggled");
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <led_orange_handler+0x34>)
 8000a6e:	f006 f8e5 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a72:	e7ef      	b.n	8000a54 <led_orange_handler+0x10>
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	08006e18 	.word	0x08006e18

08000a7c <led_red_handler>:
	}
}
void led_red_handler(void* parameters)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	TickType_t last_wakwup_time=xTaskGetTickCount();
 8000a84:	f002 fc60 	bl	8003348 <xTaskGetTickCount>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <led_red_handler+0x30>)
 8000a92:	f000 fbfa 	bl	800128a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(600) );
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fac0 	bl	8003024 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Red Led toggled");
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <led_red_handler+0x34>)
 8000aa6:	f006 f8c9 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000aaa:	e7ef      	b.n	8000a8c <led_red_handler+0x10>
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	08006e2c 	.word	0x08006e2c

08000ab4 <led_blue_handler>:
	}
}
void led_blue_handler(void* parameters)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	TickType_t last_wakwup_time=xTaskGetTickCount();
 8000abc:	f002 fc44 	bl	8003348 <xTaskGetTickCount>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <led_blue_handler+0x30>)
 8000aca:	f000 fbde 	bl	800128a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(400) );
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 faa4 	bl	8003024 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Blue Led toggled");
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <led_blue_handler+0x34>)
 8000ade:	f006 f8ad 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000ae2:	e7ef      	b.n	8000ac4 <led_blue_handler+0x10>
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	08006e3c 	.word	0x08006e3c

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 f90d 	bl	8000d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40002000 	.word	0x40002000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	vInitPrioGroupValue();
 8000b22:	f003 fca1 	bl	8004468 <vInitPrioGroupValue>
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	202d      	movs	r0, #45	; 0x2d
 8000b82:	f000 f9a3 	bl	8000ecc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b86:	202d      	movs	r0, #45	; 0x2d
 8000b88:	f000 f9bc 	bl	8000f04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba8:	f107 0210 	add.w	r2, r7, #16
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ffe4 	bl	8001b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bb8:	f000 ffce 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_InitTick+0xa8>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_InitTick+0xac>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_InitTick+0xb0>)
 8000bd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_InitTick+0xac>)
 8000bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bdc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_InitTick+0xac>)
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_InitTick+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_InitTick+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_InitTick+0xac>)
 8000bf2:	f000 fff7 	bl	8001be4 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <HAL_InitTick+0xac>)
 8000bfe:	f001 f84b 	bl	8001c98 <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20014368 	.word	0x20014368
 8000c1c:	40002000 	.word	0x40002000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c52:	f001 f891 	bl	8001d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20014368 	.word	0x20014368

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8a:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca0:	4c0b      	ldr	r4, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cae:	f7ff ffd7 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f006 f833 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fc51 	bl	800055c <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cc8:	08006f7c 	.word	0x08006f7c
  ldr r2, =_sbss
 8000ccc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cd0:	2001449c 	.word	0x2001449c

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f8d8 	bl	8000eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff30 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff ff06 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200143b0 	.word	0x200143b0

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200143b0 	.word	0x200143b0

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4c 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff61 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb1 	bl	8000e50 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff80 	bl	8000dfc <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff54 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e16b      	b.n	8001214 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 815a 	bne.w	800120e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d005      	beq.n	8000f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d130      	bne.n	8000fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 0201 	and.w	r2, r3, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d017      	beq.n	8001010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d123      	bne.n	8001064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	69b9      	ldr	r1, [r7, #24]
 8001060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b60      	ldr	r3, [pc, #384]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b5d      	ldr	r3, [pc, #372]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	4a5b      	ldr	r2, [pc, #364]	; (8001230 <HAL_GPIO_Init+0x310>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_GPIO_Init+0x314>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <HAL_GPIO_Init+0x226>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a51      	ldr	r2, [pc, #324]	; (8001238 <HAL_GPIO_Init+0x318>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x222>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_GPIO_Init+0x31c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x21e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_Init+0x320>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x21a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x324>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x216>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x328>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x212>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x32c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x20e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_GPIO_Init+0x330>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x20a>
 8001126:	2307      	movs	r3, #7
 8001128:	e00e      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800112a:	2308      	movs	r3, #8
 800112c:	e00c      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800112e:	2306      	movs	r3, #6
 8001130:	e00a      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001132:	2305      	movs	r3, #5
 8001134:	e008      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001136:	2304      	movs	r3, #4
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001146:	2300      	movs	r3, #0
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4093      	lsls	r3, r2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001158:	4935      	ldr	r1, [pc, #212]	; (8001230 <HAL_GPIO_Init+0x310>)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_GPIO_Init+0x334>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118a:	4a32      	ldr	r2, [pc, #200]	; (8001254 <HAL_GPIO_Init+0x334>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_GPIO_Init+0x334>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_GPIO_Init+0x334>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f ae90 	bls.w	8000f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40013800 	.word	0x40013800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40021400 	.word	0x40021400
 800124c:	40021800 	.word	0x40021800
 8001250:	40021c00 	.word	0x40021c00
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	041a      	lsls	r2, r3, #16
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	400b      	ands	r3, r1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e264      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	4ba3      	ldr	r3, [pc, #652]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4ba0      	ldr	r3, [pc, #640]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b9d      	ldr	r3, [pc, #628]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b99      	ldr	r3, [pc, #612]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e23f      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b91      	ldr	r3, [pc, #580]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a90      	ldr	r2, [pc, #576]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b8b      	ldr	r3, [pc, #556]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a8a      	ldr	r2, [pc, #552]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a87      	ldr	r2, [pc, #540]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b84      	ldr	r3, [pc, #528]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a83      	ldr	r2, [pc, #524]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fce4 	bl	8000d44 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fce0 	bl	8000d44 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e204      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcd0 	bl	8000d44 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fccc 	bl	8000d44 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1f0      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b6c      	ldr	r3, [pc, #432]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c4      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4952      	ldr	r1, [pc, #328]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <HAL_RCC_OscConfig+0x2b0>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc85 	bl	8000d44 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc81 	bl	8000d44 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a5      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4940      	ldr	r1, [pc, #256]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x2b0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc64 	bl	8000d44 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc60 	bl	8000d44 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e184      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d030      	beq.n	800150c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_RCC_OscConfig+0x2b4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc44 	bl	8000d44 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc40 	bl	8000d44 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e164      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x2b4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc2d 	bl	8000d44 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc29 	bl	8000d44 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e14d      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a0 	beq.w	800165a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d121      	bne.n	800159a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbef 	bl	8000d44 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e011      	b.n	800158e <HAL_RCC_OscConfig+0x2ce>
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
 8001578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157c:	f7ff fbe2 	bl	8000d44 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e106      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x4e4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80015a2:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a80      	ldr	r2, [pc, #512]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e01c      	b.n	80015ea <HAL_RCC_OscConfig+0x32a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x312>
 80015b8:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a7a      	ldr	r2, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b78      	ldr	r3, [pc, #480]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a77      	ldr	r2, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e00b      	b.n	80015ea <HAL_RCC_OscConfig+0x32a>
 80015d2:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a74      	ldr	r2, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a71      	ldr	r2, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fba7 	bl	8000d44 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fba3 	bl	8000d44 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0c5      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <HAL_RCC_OscConfig+0x33a>
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fb91 	bl	8000d44 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fb8d 	bl	8000d44 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0af      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 809b 	beq.w	800179a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d05c      	beq.n	800172a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d141      	bne.n	80016fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb61 	bl	8000d44 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb5d 	bl	8000d44 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e081      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	019b      	lsls	r3, r3, #6
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	3b01      	subs	r3, #1
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	4937      	ldr	r1, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb36 	bl	8000d44 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb32 	bl	8000d44 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e056      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x41c>
 80016fa:	e04e      	b.n	800179a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb1f 	bl	8000d44 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fb1b 	bl	8000d44 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e03f      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x44a>
 8001728:	e037      	b.n	800179a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e032      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_RCC_OscConfig+0x4e8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d028      	beq.n	8001796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d121      	bne.n	8001796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d11a      	bne.n	8001796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176e:	4293      	cmp	r3, r2
 8001770:	d111      	bne.n	8001796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40007000 	.word	0x40007000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	42470060 	.word	0x42470060

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa50 	bl	8000d44 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa4c 	bl	8000d44 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f908 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08006f30 	.word	0x08006f30
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80bd 	bhi.w	8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e0b7      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019b2:	60bb      	str	r3, [r7, #8]
       break;
 80019b4:	e0b7      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019b8:	60bb      	str	r3, [r7, #8]
      break;
 80019ba:	e0b4      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04d      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	461a      	mov	r2, r3
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	ea02 0800 	and.w	r8, r2, r0
 80019ea:	ea03 0901 	and.w	r9, r3, r1
 80019ee:	4640      	mov	r0, r8
 80019f0:	4649      	mov	r1, r9
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	014b      	lsls	r3, r1, #5
 80019fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a00:	0142      	lsls	r2, r0, #5
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	ebb0 0008 	subs.w	r0, r0, r8
 8001a0a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	018b      	lsls	r3, r1, #6
 8001a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a1c:	0182      	lsls	r2, r0, #6
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	eb63 0301 	sbc.w	r3, r3, r1
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	00d9      	lsls	r1, r3, #3
 8001a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a32:	00d0      	lsls	r0, r2, #3
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	eb12 0208 	adds.w	r2, r2, r8
 8001a3c:	eb43 0309 	adc.w	r3, r3, r9
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	0259      	lsls	r1, r3, #9
 8001a4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a4e:	0250      	lsls	r0, r2, #9
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f7fe fc00 	bl	8000264 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e04a      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	461a      	mov	r2, r3
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	ea02 0400 	and.w	r4, r2, r0
 8001a86:	ea03 0501 	and.w	r5, r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	014b      	lsls	r3, r1, #5
 8001a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a9c:	0142      	lsls	r2, r0, #5
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	1b00      	subs	r0, r0, r4
 8001aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	018b      	lsls	r3, r1, #6
 8001ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ab6:	0182      	lsls	r2, r0, #6
 8001ab8:	1a12      	subs	r2, r2, r0
 8001aba:	eb63 0301 	sbc.w	r3, r3, r1
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	00d9      	lsls	r1, r3, #3
 8001ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001acc:	00d0      	lsls	r0, r2, #3
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	1912      	adds	r2, r2, r4
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	0299      	lsls	r1, r3, #10
 8001ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ae6:	0290      	lsls	r0, r2, #10
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f7fe fbb4 	bl	8000264 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	60bb      	str	r3, [r7, #8]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b22:	60bb      	str	r3, [r7, #8]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	68bb      	ldr	r3, [r7, #8]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	007a1200 	.word	0x007a1200

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08006f40 	.word	0x08006f40

08001b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RCC_GetClockConfig+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e041      	b.n	8001c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f839 	bl	8001c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 f9d8 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e04e      	b.n	8001d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d01d      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40010400 	.word	0x40010400
 8001d70:	40014000 	.word	0x40014000
 8001d74:	40001800 	.word	0x40001800

08001d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d122      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0202 	mvn.w	r2, #2
 8001da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8ee 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8e0 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8f1 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0204 	mvn.w	r2, #4
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8c4 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8b6 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f8c7 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0208 	mvn.w	r2, #8
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f89a 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f88c 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f89d 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0210 	mvn.w	r2, #16
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f870 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f862 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f873 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0201 	mvn.w	r2, #1
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fdf8 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f902 	bl	800212c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f838 	bl	8001fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0220 	mvn.w	r2, #32
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8cc 	bl	8002118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a40      	ldr	r2, [pc, #256]	; (80020ec <TIM_Base_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d00f      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <TIM_Base_SetConfig+0x118>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00b      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <TIM_Base_SetConfig+0x11c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <TIM_Base_SetConfig+0x120>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d003      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <TIM_Base_SetConfig+0x124>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d108      	bne.n	800202a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <TIM_Base_SetConfig+0x114>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d027      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <TIM_Base_SetConfig+0x118>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d023      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <TIM_Base_SetConfig+0x11c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <TIM_Base_SetConfig+0x120>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <TIM_Base_SetConfig+0x124>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d017      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a28      	ldr	r2, [pc, #160]	; (8002100 <TIM_Base_SetConfig+0x128>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <TIM_Base_SetConfig+0x12c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00f      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <TIM_Base_SetConfig+0x130>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <TIM_Base_SetConfig+0x134>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <TIM_Base_SetConfig+0x138>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <TIM_Base_SetConfig+0x13c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d108      	bne.n	800209c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <TIM_Base_SetConfig+0x114>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0xf8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <TIM_Base_SetConfig+0x124>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d103      	bne.n	80020d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	615a      	str	r2, [r3, #20]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40010400 	.word	0x40010400
 8002100:	40014000 	.word	0x40014000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800
 800210c:	40001800 	.word	0x40001800
 8002110:	40001c00 	.word	0x40001c00
 8002114:	40002000 	.word	0x40002000

08002118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0208 	add.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f103 0208 	add.w	r2, r3, #8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f8:	d103      	bne.n	8002202 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e00c      	b.n	800221c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3308      	adds	r3, #8
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e002      	b.n	8002210 <vListInsert+0x2e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	d2f6      	bcs.n	800220a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6852      	ldr	r2, [r2, #4]
 8002274:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d103      	bne.n	8002288 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <xQueueGenericReset+0x2a>
        __asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60bb      	str	r3, [r7, #8]
    }
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022d2:	f002 f947 	bl	8004564 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	441a      	add	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	3b01      	subs	r3, #1
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	441a      	add	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01a      	beq.n	8002366 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3310      	adds	r3, #16
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f9a1 	bl	800367c <xTaskRemoveFromEventList>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <xQueueGenericReset+0xcc>)
 8002342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	e009      	b.n	8002366 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3310      	adds	r3, #16
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fef2 	bl	8002140 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3324      	adds	r3, #36	; 0x24
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff feed 	bl	8002140 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002366:	f002 f92d 	bl	80045c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <xQueueGenericCreate+0x2a>
        __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	61bb      	str	r3, [r7, #24]
    }
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <xQueueGenericCreate+0x48>
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d101      	bne.n	80023c4 <xQueueGenericCreate+0x4c>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <xQueueGenericCreate+0x4e>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueGenericCreate+0x68>
        __asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	617b      	str	r3, [r7, #20]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023e6:	d90a      	bls.n	80023fe <xQueueGenericCreate+0x86>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	613b      	str	r3, [r7, #16]
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	4618      	mov	r0, r3
 8002404:	f002 f9da 	bl	80047bc <pvPortMalloc>
 8002408:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3350      	adds	r3, #80	; 0x50
 8002418:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f805 	bl	8002436 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800242c:	6a3b      	ldr	r3, [r7, #32]
    }
 800242e:	4618      	mov	r0, r3
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e002      	b.n	8002458 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002464:	2101      	movs	r1, #1
 8002466:	69b8      	ldr	r0, [r7, #24]
 8002468:	f7ff ff1e 	bl	80022a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	2073      	movs	r0, #115	; 0x73
 800247c:	f003 fd66 	bl	8005f4c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b090      	sub	sp, #64	; 0x40
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericSend+0x32>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <xQueueGenericSend+0x40>
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <xQueueGenericSend+0x44>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <xQueueGenericSend+0x46>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <xQueueGenericSend+0x60>
        __asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024e4:	bf00      	nop
 80024e6:	e7fe      	b.n	80024e6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d103      	bne.n	80024f6 <xQueueGenericSend+0x6e>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0x72>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0x74>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericSend+0x8e>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002516:	f001 fa51 	bl	80039bc <xTaskGetSchedulerState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <xQueueGenericSend+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <xQueueGenericSend+0xa2>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueGenericSend+0xa4>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <xQueueGenericSend+0xbe>
        __asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61fb      	str	r3, [r7, #28]
    }
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002546:	f002 f80d 	bl	8004564 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <xQueueGenericSend+0xd4>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d136      	bne.n	80025ca <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	4618      	mov	r0, r3
 8002560:	f004 fa80 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	460b      	mov	r3, r1
 800256e:	4601      	mov	r1, r0
 8002570:	205a      	movs	r0, #90	; 0x5a
 8002572:	f003 fd61 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257c:	f000 fa78 	bl	8002a70 <prvCopyDataToQueue>
 8002580:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	3324      	adds	r3, #36	; 0x24
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f874 	bl	800367c <xTaskRemoveFromEventList>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d013      	beq.n	80025c2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800259a:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <xQueueGenericSend+0x248>)
 800259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	e00a      	b.n	80025c2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <xQueueGenericSend+0x248>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025c2:	f001 ffff 	bl	80045c4 <vPortExitCritical>
                return pdPASS;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07d      	b.n	80026c6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d110      	bne.n	80025f2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025d0:	f001 fff8 	bl	80045c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fa44 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	4601      	mov	r1, r0
 80025e8:	205a      	movs	r0, #90	; 0x5a
 80025ea:	f003 fd25 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e069      	b.n	80026c6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 f8a3 	bl	8003748 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002602:	2301      	movs	r3, #1
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002606:	f001 ffdd 	bl	80045c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800260a:	f000 fdef 	bl	80031ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800260e:	f001 ffa9 	bl	8004564 <vPortEnterCritical>
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800261e:	d103      	bne.n	8002628 <xQueueGenericSend+0x1a0>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800262e:	b25b      	sxtb	r3, r3
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002634:	d103      	bne.n	800263e <xQueueGenericSend+0x1b6>
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800263e:	f001 ffc1 	bl	80045c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002642:	1d3a      	adds	r2, r7, #4
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f001 f892 	bl	8003774 <xTaskCheckForTimeOut>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d124      	bne.n	80026a0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002658:	f000 fb02 	bl	8002c60 <prvIsQueueFull>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d018      	beq.n	8002694 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	3310      	adds	r3, #16
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ffb4 	bl	80035d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002672:	f000 fa8d 	bl	8002b90 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002676:	f000 fdc7 	bl	8003208 <xTaskResumeAll>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af62 	bne.w	8002546 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <xQueueGenericSend+0x248>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	e758      	b.n	8002546 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 fa7b 	bl	8002b90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800269a:	f000 fdb5 	bl	8003208 <xTaskResumeAll>
 800269e:	e752      	b.n	8002546 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a2:	f000 fa75 	bl	8002b90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026a6:	f000 fdaf 	bl	8003208 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 f9d9 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	460b      	mov	r3, r1
 80026bc:	4601      	mov	r1, r0
 80026be:	205a      	movs	r0, #90	; 0x5a
 80026c0:	f003 fcba 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026c4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3738      	adds	r7, #56	; 0x38
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000ed04 	.word	0xe000ed04

080026d4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b090      	sub	sp, #64	; 0x40
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <xQueueGenericSendFromISR+0x3c>
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <xQueueGenericSendFromISR+0x40>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <xQueueGenericSendFromISR+0x42>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800272c:	bf00      	nop
 800272e:	e7fe      	b.n	800272e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d103      	bne.n	800273e <xQueueGenericSendFromISR+0x6a>
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <xQueueGenericSendFromISR+0x6e>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <xQueueGenericSendFromISR+0x70>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	623b      	str	r3, [r7, #32]
    }
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800275e:	f001 ffed 	bl	800473c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002762:	f3ef 8211 	mrs	r2, BASEPRI
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	61fa      	str	r2, [r7, #28]
 8002778:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800277a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <xQueueGenericSendFromISR+0xbc>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d148      	bne.n	8002822 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 f95e 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 80027a8:	4601      	mov	r1, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	461a      	mov	r2, r3
 80027ae:	2060      	movs	r0, #96	; 0x60
 80027b0:	f003 fb72 	bl	8005e98 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027ba:	f000 f959 	bl	8002a70 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c6:	d112      	bne.n	80027ee <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d025      	beq.n	800281c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 ff51 	bl	800367c <xTaskRemoveFromEventList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01d      	beq.n	800281c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01a      	beq.n	800281c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e016      	b.n	800281c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027f2:	2b7f      	cmp	r3, #127	; 0x7f
 80027f4:	d10a      	bne.n	800280c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	617b      	str	r3, [r7, #20]
    }
 8002808:	bf00      	nop
 800280a:	e7fe      	b.n	800280a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800280c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002810:	3301      	adds	r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	b25a      	sxtb	r2, r3
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800281c:	2301      	movs	r3, #1
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002820:	e00b      	b.n	800283a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	4618      	mov	r0, r3
 8002826:	f004 f91d 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 800282a:	4601      	mov	r1, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	2060      	movs	r0, #96	; 0x60
 8002832:	f003 fb31 	bl	8005e98 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002836:	2300      	movs	r3, #0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002844:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002848:	4618      	mov	r0, r3
 800284a:	3740      	adds	r7, #64	; 0x40
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08f      	sub	sp, #60	; 0x3c
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <xQueueReceive+0x30>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	623b      	str	r3, [r7, #32]
    }
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <xQueueReceive+0x3e>
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueReceive+0x42>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueReceive+0x44>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueReceive+0x5e>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61fb      	str	r3, [r7, #28]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ae:	f001 f885 	bl	80039bc <xTaskGetSchedulerState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <xQueueReceive+0x6e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <xQueueReceive+0x72>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <xQueueReceive+0x74>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueReceive+0x8e>
        __asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	61bb      	str	r3, [r7, #24]
    }
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028de:	f001 fe41 	bl	8004564 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02f      	beq.n	800294e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f2:	f000 f927 	bl	8002b44 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 f8b3 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 80028fe:	4604      	mov	r4, r0
 8002900:	2000      	movs	r0, #0
 8002902:	f004 f8af 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2101      	movs	r1, #1
 800290c:	9100      	str	r1, [sp, #0]
 800290e:	4621      	mov	r1, r4
 8002910:	205c      	movs	r0, #92	; 0x5c
 8002912:	f003 fb91 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00f      	beq.n	8002946 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	3310      	adds	r3, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fea6 	bl	800367c <xTaskRemoveFromEventList>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <xQueueReceive+0x21c>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002946:	f001 fe3d 	bl	80045c4 <vPortExitCritical>
                return pdPASS;
 800294a:	2301      	movs	r3, #1
 800294c:	e08a      	b.n	8002a64 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002954:	f001 fe36 	bl	80045c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	4618      	mov	r0, r3
 800295c:	f004 f882 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002960:	4604      	mov	r4, r0
 8002962:	2000      	movs	r0, #0
 8002964:	f004 f87e 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2101      	movs	r1, #1
 800296e:	9100      	str	r1, [sp, #0]
 8002970:	4621      	mov	r1, r4
 8002972:	205c      	movs	r0, #92	; 0x5c
 8002974:	f003 fb60 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002978:	2300      	movs	r3, #0
 800297a:	e073      	b.n	8002a64 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fede 	bl	8003748 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002990:	f001 fe18 	bl	80045c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002994:	f000 fc2a 	bl	80031ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002998:	f001 fde4 	bl	8004564 <vPortEnterCritical>
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a8:	d103      	bne.n	80029b2 <xQueueReceive+0x162>
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029be:	d103      	bne.n	80029c8 <xQueueReceive+0x178>
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c8:	f001 fdfc 	bl	80045c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029cc:	1d3a      	adds	r2, r7, #4
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fecd 	bl	8003774 <xTaskCheckForTimeOut>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d124      	bne.n	8002a2a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e2:	f000 f927 	bl	8002c34 <prvIsQueueEmpty>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d018      	beq.n	8002a1e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	3324      	adds	r3, #36	; 0x24
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fdef 	bl	80035d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fc:	f000 f8c8 	bl	8002b90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a00:	f000 fc02 	bl	8003208 <xTaskResumeAll>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f47f af69 	bne.w	80028de <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <xQueueReceive+0x21c>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	e75f      	b.n	80028de <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a20:	f000 f8b6 	bl	8002b90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a24:	f000 fbf0 	bl	8003208 <xTaskResumeAll>
 8002a28:	e759      	b.n	80028de <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a2c:	f000 f8b0 	bl	8002b90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a30:	f000 fbea 	bl	8003208 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a36:	f000 f8fd 	bl	8002c34 <prvIsQueueEmpty>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f43f af4e 	beq.w	80028de <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 f80d 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f004 f809 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2101      	movs	r1, #1
 8002a58:	9100      	str	r1, [sp, #0]
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	205c      	movs	r0, #92	; 0x5c
 8002a5e:	f003 faeb 	bl	8006038 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a62:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3734      	adds	r7, #52	; 0x34
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d14d      	bne.n	8002b32 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 ffac 	bl	80039f8 <xTaskPriorityDisinherit>
 8002aa0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e043      	b.n	8002b32 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d119      	bne.n	8002ae4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6858      	ldr	r0, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	f004 f960 	bl	8006d80 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	441a      	add	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d32b      	bcc.n	8002b32 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e026      	b.n	8002b32 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68d8      	ldr	r0, [r3, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	461a      	mov	r2, r3
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	f004 f946 	bl	8006d80 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	425b      	negs	r3, r3
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d207      	bcs.n	8002b20 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	425b      	negs	r3, r3
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d105      	bne.n	8002b32 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b3a:	697b      	ldr	r3, [r7, #20]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	441a      	add	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d303      	bcc.n	8002b78 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	461a      	mov	r2, r3
 8002b82:	6838      	ldr	r0, [r7, #0]
 8002b84:	f004 f8fc 	bl	8006d80 <memcpy>
    }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b98:	f001 fce4 	bl	8004564 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba4:	e011      	b.n	8002bca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3324      	adds	r3, #36	; 0x24
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fd62 	bl	800367c <xTaskRemoveFromEventList>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bbe:	f000 fe3f 	bl	8003840 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	dce9      	bgt.n	8002ba6 <prvUnlockQueue+0x16>
 8002bd2:	e000      	b.n	8002bd6 <prvUnlockQueue+0x46>
                        break;
 8002bd4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002bde:	f001 fcf1 	bl	80045c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002be2:	f001 fcbf 	bl	8004564 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bee:	e011      	b.n	8002c14 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fd3d 	bl	800367c <xTaskRemoveFromEventList>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c08:	f000 fe1a 	bl	8003840 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	dce9      	bgt.n	8002bf0 <prvUnlockQueue+0x60>
 8002c1c:	e000      	b.n	8002c20 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c1e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	22ff      	movs	r2, #255	; 0xff
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c28:	f001 fccc 	bl	80045c4 <vPortExitCritical>
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c3c:	f001 fc92 	bl	8004564 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e001      	b.n	8002c52 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c52:	f001 fcb7 	bl	80045c4 <vPortExitCritical>

    return xReturn;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c68:	f001 fc7c 	bl	8004564 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d102      	bne.n	8002c7e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c82:	f001 fc9f 	bl	80045c4 <vPortExitCritical>

    return xReturn;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e01e      	b.n	8002cde <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <vQueueAddToRegistry+0x60>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cac:	4910      	ldr	r1, [pc, #64]	; (8002cf0 <vQueueAddToRegistry+0x60>)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <vQueueAddToRegistry+0x60>)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fecd 	bl	8006a64 <SEGGER_SYSVIEW_ShrinkId>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2071      	movs	r0, #113	; 0x71
 8002cd2:	f003 f8e1 	bl	8005e98 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cd6:	e006      	b.n	8002ce6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d9dd      	bls.n	8002ca0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200143b4 	.word	0x200143b4

08002cf4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d04:	f001 fc2e 	bl	8004564 <vPortEnterCritical>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0e:	b25b      	sxtb	r3, r3
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d14:	d103      	bne.n	8002d1e <vQueueWaitForMessageRestricted+0x2a>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2a:	d103      	bne.n	8002d34 <vQueueWaitForMessageRestricted+0x40>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d34:	f001 fc46 	bl	80045c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fc69 	bl	8003620 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff1e 	bl	8002b90 <prvUnlockQueue>
    }
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fd23 	bl	80047bc <pvPortMalloc>
 8002d76:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d7e:	2058      	movs	r0, #88	; 0x58
 8002d80:	f001 fd1c 	bl	80047bc <pvPortMalloc>
 8002d84:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
 8002d92:	e005      	b.n	8002da0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f001 fdf1 	bl	800497c <vPortFree>
 8002d9a:	e001      	b.n	8002da0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d013      	beq.n	8002dce <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f80e 	bl	8002dde <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dc2:	69f8      	ldr	r0, [r7, #28]
 8002dc4:	f000 f8a2 	bl	8002f0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e002      	b.n	8002dd4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
    }
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	21a5      	movs	r1, #165	; 0xa5
 8002df8:	f003 ffd0 	bl	8006d9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e06:	3b01      	subs	r3, #1
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f023 0307 	bic.w	r3, r3, #7
 8002e14:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	617b      	str	r3, [r7, #20]
    }
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01f      	beq.n	8002e7c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e012      	b.n	8002e68 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	7819      	ldrb	r1, [r3, #0]
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3334      	adds	r3, #52	; 0x34
 8002e52:	460a      	mov	r2, r1
 8002e54:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	d9e9      	bls.n	8002e42 <prvInitialiseNewTask+0x64>
 8002e6e:	e000      	b.n	8002e72 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e70:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e7a:	e003      	b.n	8002e84 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d901      	bls.n	8002e8e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e98:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f96b 	bl	8002180 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	3318      	adds	r3, #24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f966 	bl	8002180 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f1c3 0205 	rsb	r2, r3, #5
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	3350      	adds	r3, #80	; 0x50
 8002ece:	2204      	movs	r2, #4
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 ff62 	bl	8006d9c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	3354      	adds	r3, #84	; 0x54
 8002edc:	2201      	movs	r2, #1
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ff5b 	bl	8006d9c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	69b8      	ldr	r0, [r7, #24]
 8002eec:	f001 f98e 	bl	800420c <pxPortInitialiseStack>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f02:	bf00      	nop
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f14:	f001 fb26 	bl	8004564 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <prvAddNewTaskToReadyList+0xfc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <prvAddNewTaskToReadyList+0xfc>)
 8002f20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f22:	4b3a      	ldr	r3, [pc, #232]	; (800300c <prvAddNewTaskToReadyList+0x100>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f2a:	4a38      	ldr	r2, [pc, #224]	; (800300c <prvAddNewTaskToReadyList+0x100>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <prvAddNewTaskToReadyList+0xfc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d110      	bne.n	8002f5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f38:	f000 fca6 	bl	8003888 <prvInitialiseTaskLists>
 8002f3c:	e00d      	b.n	8002f5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <prvAddNewTaskToReadyList+0x104>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <prvAddNewTaskToReadyList+0x100>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d802      	bhi.n	8002f5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <prvAddNewTaskToReadyList+0x100>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <prvAddNewTaskToReadyList+0x108>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <prvAddNewTaskToReadyList+0x108>)
 8002f62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <prvAddNewTaskToReadyList+0x108>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <prvAddNewTaskToReadyList+0x94>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fc4f 	bl	8006818 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461c      	mov	r4, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1ae3      	subs	r3, r4, r3
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	f001 feb4 	bl	8004d08 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fcbc 	bl	8006920 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2201      	movs	r2, #1
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <prvAddNewTaskToReadyList+0x10c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	4a18      	ldr	r2, [pc, #96]	; (8003018 <prvAddNewTaskToReadyList+0x10c>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4a15      	ldr	r2, [pc, #84]	; (800301c <prvAddNewTaskToReadyList+0x110>)
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7ff f8e2 	bl	800219a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fd6:	f001 faf5 	bl	80045c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <prvAddNewTaskToReadyList+0x104>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <prvAddNewTaskToReadyList+0x100>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <prvAddNewTaskToReadyList+0x114>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	20000108 	.word	0x20000108
 800300c:	20000030 	.word	0x20000030
 8003010:	20000114 	.word	0x20000114
 8003014:	20000124 	.word	0x20000124
 8003018:	20000110 	.word	0x20000110
 800301c:	20000034 	.word	0x20000034
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xTaskDelayUntil+0x2a>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	617b      	str	r3, [r7, #20]
    }
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xTaskDelayUntil+0x46>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <xTaskDelayUntil+0xf8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <xTaskDelayUntil+0x64>
        __asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60fb      	str	r3, [r7, #12]
    }
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003088:	f000 f8b0 	bl	80031ec <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <xTaskDelayUntil+0xfc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4413      	add	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d20b      	bcs.n	80030be <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d211      	bcs.n	80030d4 <xTaskDelayUntil+0xb0>
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d90d      	bls.n	80030d4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	e00a      	b.n	80030d4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d303      	bcc.n	80030d0 <xTaskDelayUntil+0xac>
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d901      	bls.n	80030d4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80030e0:	2024      	movs	r0, #36	; 0x24
 80030e2:	f002 fe7f 	bl	8005de4 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fd02 	bl	8003af8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80030f4:	f000 f888 	bl	8003208 <xTaskResumeAll>
 80030f8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <xTaskDelayUntil+0x100>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003112:	4618      	mov	r0, r3
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000130 	.word	0x20000130
 8003120:	2000010c 	.word	0x2000010c
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <vTaskStartScheduler+0xa4>)
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2300      	movs	r3, #0
 8003138:	2282      	movs	r2, #130	; 0x82
 800313a:	4925      	ldr	r1, [pc, #148]	; (80031d0 <vTaskStartScheduler+0xa8>)
 800313c:	4825      	ldr	r0, [pc, #148]	; (80031d4 <vTaskStartScheduler+0xac>)
 800313e:	f7ff fe0d 	bl	8002d5c <xTaskCreate>
 8003142:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800314a:	f000 fd4d 	bl	8003be8 <xTimerCreateTimerTask>
 800314e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d124      	bne.n	80031a0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	60bb      	str	r3, [r7, #8]
    }
 8003168:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <vTaskStartScheduler+0xb0>)
 800316c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003170:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <vTaskStartScheduler+0xb4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <vTaskStartScheduler+0xb8>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <vTaskStartScheduler+0xbc>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <vTaskStartScheduler+0xa4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d102      	bne.n	8003190 <vTaskStartScheduler+0x68>
 800318a:	f003 fb29 	bl	80067e0 <SEGGER_SYSVIEW_OnIdle>
 800318e:	e004      	b.n	800319a <vTaskStartScheduler+0x72>
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <vTaskStartScheduler+0xbc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fb81 	bl	800689c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800319a:	f001 f8c3 	bl	8004324 <xPortStartScheduler>
 800319e:	e00e      	b.n	80031be <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a6:	d10a      	bne.n	80031be <vTaskStartScheduler+0x96>
        __asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	607b      	str	r3, [r7, #4]
    }
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <vTaskStartScheduler+0xc0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	2000012c 	.word	0x2000012c
 80031d0:	08006e50 	.word	0x08006e50
 80031d4:	08003859 	.word	0x08003859
 80031d8:	20000128 	.word	0x20000128
 80031dc:	20000114 	.word	0x20000114
 80031e0:	2000010c 	.word	0x2000010c
 80031e4:	20000030 	.word	0x20000030
 80031e8:	2000000c 	.word	0x2000000c

080031ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a03      	ldr	r2, [pc, #12]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	20000130 	.word	0x20000130

08003208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <xTaskResumeAll+0x11c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xTaskResumeAll+0x2c>
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	603b      	str	r3, [r7, #0]
    }
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003234:	f001 f996 	bl	8004564 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003238:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <xTaskResumeAll+0x11c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	4a39      	ldr	r2, [pc, #228]	; (8003324 <xTaskResumeAll+0x11c>)
 8003240:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <xTaskResumeAll+0x11c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d165      	bne.n	8003316 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <xTaskResumeAll+0x120>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d061      	beq.n	8003316 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003252:	e032      	b.n	80032ba <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <xTaskResumeAll+0x124>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3318      	adds	r3, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fff7 	bl	8002254 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fff2 	bl	8002254 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fb54 	bl	8006920 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <xTaskResumeAll+0x128>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <xTaskResumeAll+0x128>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4a27      	ldr	r2, [pc, #156]	; (8003334 <xTaskResumeAll+0x12c>)
 8003298:	441a      	add	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe ff7a 	bl	800219a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	4b23      	ldr	r3, [pc, #140]	; (8003338 <xTaskResumeAll+0x130>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <xTaskResumeAll+0x134>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ba:	4b1c      	ldr	r3, [pc, #112]	; (800332c <xTaskResumeAll+0x124>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1c8      	bne.n	8003254 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032c8:	f000 fb5c 	bl	8003984 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <xTaskResumeAll+0x138>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032d8:	f000 f858 	bl	800338c <xTaskIncrementTick>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <xTaskResumeAll+0x134>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f1      	bne.n	80032d8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <xTaskResumeAll+0x138>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <xTaskResumeAll+0x134>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <xTaskResumeAll+0x13c>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003316:	f001 f955 	bl	80045c4 <vPortExitCritical>

    return xAlreadyYielded;
 800331a:	68bb      	ldr	r3, [r7, #8]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	20000130 	.word	0x20000130
 8003328:	20000108 	.word	0x20000108
 800332c:	200000c8 	.word	0x200000c8
 8003330:	20000110 	.word	0x20000110
 8003334:	20000034 	.word	0x20000034
 8003338:	20000030 	.word	0x20000030
 800333c:	2000011c 	.word	0x2000011c
 8003340:	20000118 	.word	0x20000118
 8003344:	e000ed04 	.word	0xe000ed04

08003348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <xTaskGetTickCount+0x1c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003354:	687b      	ldr	r3, [r7, #4]
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	2000010c 	.word	0x2000010c

08003368 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800336e:	f001 f9e5 	bl	800473c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <xTaskGetTickCountFromISR+0x20>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800337c:	683b      	ldr	r3, [r7, #0]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000010c 	.word	0x2000010c

0800338c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <xTaskIncrementTick+0x14c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8092 	bne.w	80034c4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <xTaskIncrementTick+0x150>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033a8:	4a4c      	ldr	r2, [pc, #304]	; (80034dc <xTaskIncrementTick+0x150>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d120      	bne.n	80033f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80033b4:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <xTaskIncrementTick+0x154>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
    }
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xTaskIncrementTick+0x46>
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <xTaskIncrementTick+0x154>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <xTaskIncrementTick+0x158>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <xTaskIncrementTick+0x154>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <xTaskIncrementTick+0x158>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <xTaskIncrementTick+0x15c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <xTaskIncrementTick+0x15c>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	f000 fac7 	bl	8003984 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <xTaskIncrementTick+0x160>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d34c      	bcc.n	800349a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003400:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <xTaskIncrementTick+0x154>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340a:	4b38      	ldr	r3, [pc, #224]	; (80034ec <xTaskIncrementTick+0x160>)
 800340c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003410:	601a      	str	r2, [r3, #0]
                    break;
 8003412:	e042      	b.n	800349a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <xTaskIncrementTick+0x154>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d203      	bcs.n	8003434 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800342c:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <xTaskIncrementTick+0x160>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003432:	e032      	b.n	800349a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe ff0b 	bl	8002254 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3318      	adds	r3, #24
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe ff02 	bl	8002254 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fa64 	bl	8006920 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2201      	movs	r2, #1
 800345e:	409a      	lsls	r2, r3
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <xTaskIncrementTick+0x164>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <xTaskIncrementTick+0x164>)
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <xTaskIncrementTick+0x168>)
 8003478:	441a      	add	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3304      	adds	r3, #4
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7fe fe8a 	bl	800219a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <xTaskIncrementTick+0x16c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	429a      	cmp	r2, r3
 8003492:	d3b5      	bcc.n	8003400 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003498:	e7b2      	b.n	8003400 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <xTaskIncrementTick+0x16c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	4914      	ldr	r1, [pc, #80]	; (80034f4 <xTaskIncrementTick+0x168>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d901      	bls.n	80034b6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <xTaskIncrementTick+0x170>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e004      	b.n	80034ce <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <xTaskIncrementTick+0x174>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <xTaskIncrementTick+0x174>)
 80034cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034ce:	697b      	ldr	r3, [r7, #20]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000130 	.word	0x20000130
 80034dc:	2000010c 	.word	0x2000010c
 80034e0:	200000c0 	.word	0x200000c0
 80034e4:	200000c4 	.word	0x200000c4
 80034e8:	20000120 	.word	0x20000120
 80034ec:	20000128 	.word	0x20000128
 80034f0:	20000110 	.word	0x20000110
 80034f4:	20000034 	.word	0x20000034
 80034f8:	20000030 	.word	0x20000030
 80034fc:	2000011c 	.word	0x2000011c
 8003500:	20000118 	.word	0x20000118

08003504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <vTaskSwitchContext+0xbc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003512:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <vTaskSwitchContext+0xc0>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003518:	e04d      	b.n	80035b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <vTaskSwitchContext+0xc0>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003520:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <vTaskSwitchContext+0xc4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	f1c3 031f 	rsb	r3, r3, #31
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <vTaskSwitchContext+0xc8>)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <vTaskSwitchContext+0x5c>
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
    }
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vTaskSwitchContext+0x5a>
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <vTaskSwitchContext+0xc8>)
 800356c:	4413      	add	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	3308      	adds	r3, #8
 8003582:	429a      	cmp	r2, r3
 8003584:	d104      	bne.n	8003590 <vTaskSwitchContext+0x8c>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <vTaskSwitchContext+0xcc>)
 8003598:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <vTaskSwitchContext+0xcc>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <vTaskSwitchContext+0xd0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d102      	bne.n	80035ac <vTaskSwitchContext+0xa8>
 80035a6:	f003 f91b 	bl	80067e0 <SEGGER_SYSVIEW_OnIdle>
}
 80035aa:	e004      	b.n	80035b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <vTaskSwitchContext+0xcc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 f973 	bl	800689c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000130 	.word	0x20000130
 80035c4:	2000011c 	.word	0x2000011c
 80035c8:	20000110 	.word	0x20000110
 80035cc:	20000034 	.word	0x20000034
 80035d0:	20000030 	.word	0x20000030
 80035d4:	2000012c 	.word	0x2000012c

080035d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	60fb      	str	r3, [r7, #12]
    }
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <vTaskPlaceOnEventList+0x44>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3318      	adds	r3, #24
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe fdeb 	bl	80021e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800360c:	2101      	movs	r1, #1
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f000 fa72 	bl	8003af8 <prvAddCurrentTaskToDelayedList>
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000030 	.word	0x20000030

08003620 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	617b      	str	r3, [r7, #20]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <vTaskPlaceOnEventListRestricted+0x58>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3318      	adds	r3, #24
 800364e:	4619      	mov	r1, r3
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7fe fda2 	bl	800219a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003660:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003662:	2024      	movs	r0, #36	; 0x24
 8003664:	f002 fbbe 	bl	8005de4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f000 fa44 	bl	8003af8 <prvAddCurrentTaskToDelayedList>
    }
 8003670:	bf00      	nop
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000030 	.word	0x20000030

0800367c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60fb      	str	r3, [r7, #12]
    }
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3318      	adds	r3, #24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fdd1 	bl	8002254 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <xTaskRemoveFromEventList+0xb4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d120      	bne.n	80036fc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fdc8 	bl	8002254 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 f92a 	bl	8006920 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <xTaskRemoveFromEventList+0xb8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a16      	ldr	r2, [pc, #88]	; (8003734 <xTaskRemoveFromEventList+0xb8>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <xTaskRemoveFromEventList+0xbc>)
 80036ec:	441a      	add	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7fe fd50 	bl	800219a <vListInsertEnd>
 80036fa:	e005      	b.n	8003708 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	3318      	adds	r3, #24
 8003700:	4619      	mov	r1, r3
 8003702:	480e      	ldr	r0, [pc, #56]	; (800373c <xTaskRemoveFromEventList+0xc0>)
 8003704:	f7fe fd49 	bl	800219a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <xTaskRemoveFromEventList+0xc4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	429a      	cmp	r2, r3
 8003714:	d905      	bls.n	8003722 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <xTaskRemoveFromEventList+0xc8>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e001      	b.n	8003726 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003726:	697b      	ldr	r3, [r7, #20]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000130 	.word	0x20000130
 8003734:	20000110 	.word	0x20000110
 8003738:	20000034 	.word	0x20000034
 800373c:	200000c8 	.word	0x200000c8
 8003740:	20000030 	.word	0x20000030
 8003744:	2000011c 	.word	0x2000011c

08003748 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <vTaskInternalSetTimeOutState+0x24>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <vTaskInternalSetTimeOutState+0x28>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	605a      	str	r2, [r3, #4]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000120 	.word	0x20000120
 8003770:	2000010c 	.word	0x2000010c

08003774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	613b      	str	r3, [r7, #16]
    }
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
    }
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037b6:	f000 fed5 	bl	8004564 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <xTaskCheckForTimeOut+0xc4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d2:	d102      	bne.n	80037da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e026      	b.n	8003828 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <xTaskCheckForTimeOut+0xc8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d00a      	beq.n	80037fc <xTaskCheckForTimeOut+0x88>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d305      	bcc.n	80037fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e015      	b.n	8003828 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20b      	bcs.n	800381e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff98 	bl	8003748 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e004      	b.n	8003828 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003828:	f000 fecc 	bl	80045c4 <vPortExitCritical>

    return xReturn;
 800382c:	69fb      	ldr	r3, [r7, #28]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000010c 	.word	0x2000010c
 800383c:	20000120 	.word	0x20000120

08003840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <vTaskMissedYield+0x14>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	2000011c 	.word	0x2000011c

08003858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003860:	f000 f852 	bl	8003908 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <prvIdleTask+0x28>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d9f9      	bls.n	8003860 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <prvIdleTask+0x2c>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800387c:	e7f0      	b.n	8003860 <prvIdleTask+0x8>
 800387e:	bf00      	nop
 8003880:	20000034 	.word	0x20000034
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e00c      	b.n	80038ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <prvInitialiseTaskLists+0x60>)
 80038a0:	4413      	add	r3, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fc4c 	bl	8002140 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d9ef      	bls.n	8003894 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038b4:	480d      	ldr	r0, [pc, #52]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038b6:	f7fe fc43 	bl	8002140 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038bc:	f7fe fc40 	bl	8002140 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038c0:	480c      	ldr	r0, [pc, #48]	; (80038f4 <prvInitialiseTaskLists+0x6c>)
 80038c2:	f7fe fc3d 	bl	8002140 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038c6:	480c      	ldr	r0, [pc, #48]	; (80038f8 <prvInitialiseTaskLists+0x70>)
 80038c8:	f7fe fc3a 	bl	8002140 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <prvInitialiseTaskLists+0x74>)
 80038ce:	f7fe fc37 	bl	8002140 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <prvInitialiseTaskLists+0x78>)
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038d6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvInitialiseTaskLists+0x7c>)
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000034 	.word	0x20000034
 80038ec:	20000098 	.word	0x20000098
 80038f0:	200000ac 	.word	0x200000ac
 80038f4:	200000c8 	.word	0x200000c8
 80038f8:	200000dc 	.word	0x200000dc
 80038fc:	200000f4 	.word	0x200000f4
 8003900:	200000c0 	.word	0x200000c0
 8003904:	200000c4 	.word	0x200000c4

08003908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800390e:	e019      	b.n	8003944 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003910:	f000 fe28 	bl	8004564 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <prvCheckTasksWaitingTermination+0x50>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fc97 	bl	8002254 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 800392e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003938:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800393a:	f000 fe43 	bl	80045c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f810 	bl	8003964 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e1      	bne.n	8003910 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200000dc 	.word	0x200000dc
 800395c:	20000108 	.word	0x20000108
 8003960:	200000f0 	.word	0x200000f0

08003964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f803 	bl	800497c <vPortFree>
                vPortFree( pxTCB );
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f001 f800 	bl	800497c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <prvResetNextTaskUnblockTime+0x30>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <prvResetNextTaskUnblockTime+0x34>)
 8003994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003998:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800399a:	e005      	b.n	80039a8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <prvResetNextTaskUnblockTime+0x30>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <prvResetNextTaskUnblockTime+0x34>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	200000c0 	.word	0x200000c0
 80039b8:	20000128 	.word	0x20000128

080039bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <xTaskGetSchedulerState+0x34>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039ca:	2301      	movs	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	e008      	b.n	80039e2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <xTaskGetSchedulerState+0x38>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039d8:	2302      	movs	r3, #2
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e001      	b.n	80039e2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039e2:	687b      	ldr	r3, [r7, #4]
    }
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000114 	.word	0x20000114
 80039f4:	20000130 	.word	0x20000130

080039f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d068      	beq.n	8003ae0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <xTaskPriorityDisinherit+0xf4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d00a      	beq.n	8003a2e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60bb      	str	r3, [r7, #8]
    }
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d03e      	beq.n	8003ae0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d13a      	bne.n	8003ae0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fbf0 	bl	8002254 <uxListRemove>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43da      	mvns	r2, r3
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <xTaskPriorityDisinherit+0xf8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <xTaskPriorityDisinherit+0xf8>)
 8003a8e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4619      	mov	r1, r3
 8003a94:	204a      	movs	r0, #74	; 0x4a
 8003a96:	f002 f9c3 	bl	8005e20 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f1c3 0205 	rsb	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <xTaskPriorityDisinherit+0xf8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <xTaskPriorityDisinherit+0xf8>)
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <xTaskPriorityDisinherit+0xfc>)
 8003ace:	441a      	add	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f7fe fb5f 	bl	800219a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ae0:	697b      	ldr	r3, [r7, #20]
    }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000030 	.word	0x20000030
 8003af0:	20000110 	.word	0x20000110
 8003af4:	20000034 	.word	0x20000034

08003af8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fba0 	bl	8002254 <uxListRemove>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	2201      	movs	r2, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b30:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b38:	d110      	bne.n	8003b5c <prvAddCurrentTaskToDelayedList+0x64>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	211b      	movs	r1, #27
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 ff2c 	bl	80069a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4c:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4820      	ldr	r0, [pc, #128]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b56:	f7fe fb20 	bl	800219a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b5a:	e032      	b.n	8003bc2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d20f      	bcs.n	8003b94 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 ff12 	bl	80069a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fe fb28 	bl	80021e2 <vListInsert>
}
 8003b92:	e016      	b.n	8003bc2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 ff02 	bl	80069a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f7fe fb18 	bl	80021e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d202      	bcs.n	8003bc2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003bbc:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6013      	str	r3, [r2, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000010c 	.word	0x2000010c
 8003bd0:	20000030 	.word	0x20000030
 8003bd4:	20000110 	.word	0x20000110
 8003bd8:	200000f4 	.word	0x200000f4
 8003bdc:	200000c4 	.word	0x200000c4
 8003be0:	200000c0 	.word	0x200000c0
 8003be4:	20000128 	.word	0x20000128

08003be8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bf2:	f000 fad5 	bl	80041a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <xTimerCreateTimerTask+0x54>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <xTimerCreateTimerTask+0x58>)
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2302      	movs	r3, #2
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c0c:	490d      	ldr	r1, [pc, #52]	; (8003c44 <xTimerCreateTimerTask+0x5c>)
 8003c0e:	480e      	ldr	r0, [pc, #56]	; (8003c48 <xTimerCreateTimerTask+0x60>)
 8003c10:	f7ff f8a4 	bl	8002d5c <xTaskCreate>
 8003c14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	603b      	str	r3, [r7, #0]
    }
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c32:	687b      	ldr	r3, [r7, #4]
    }
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000164 	.word	0x20000164
 8003c40:	20000168 	.word	0x20000168
 8003c44:	08006e58 	.word	0x08006e58
 8003c48:	08003d81 	.word	0x08003d81

08003c4c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	623b      	str	r3, [r7, #32]
    }
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <xTimerGenericCommand+0x98>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02a      	beq.n	8003cd8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	dc18      	bgt.n	8003cc6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c94:	f7ff fe92 	bl	80039bc <xTaskGetSchedulerState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d109      	bne.n	8003cb2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <xTimerGenericCommand+0x98>)
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f107 0114 	add.w	r1, r7, #20
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003caa:	f7fe fbed 	bl	8002488 <xQueueGenericSend>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24
 8003cb0:	e012      	b.n	8003cd8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <xTimerGenericCommand+0x98>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f107 0114 	add.w	r1, r7, #20
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f7fe fbe3 	bl	8002488 <xQueueGenericSend>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003cc4:	e008      	b.n	8003cd8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <xTimerGenericCommand+0x98>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f107 0114 	add.w	r1, r7, #20
 8003cce:	2300      	movs	r3, #0
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	f7fe fcff 	bl	80026d4 <xQueueGenericSendFromISR>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000164 	.word	0x20000164

08003ce8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <prvProcessExpiredTimer+0x94>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe faa7 	bl	8002254 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d022      	beq.n	8003d5a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	18d1      	adds	r1, r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f000 f8d1 	bl	8003ec8 <prvInsertTimerInActiveList>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01f      	beq.n	8003d6c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	2100      	movs	r1, #0
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff88 	bl	8003c4c <xTimerGenericCommand>
 8003d3c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60fb      	str	r3, [r7, #12]
    }
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	6978      	ldr	r0, [r7, #20]
 8003d72:	4798      	blx	r3
    }
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000015c 	.word	0x2000015c

08003d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f857 	bl	8003e40 <prvGetNextExpireTime>
 8003d92:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4619      	mov	r1, r3
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f803 	bl	8003da4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d9e:	f000 f8d5 	bl	8003f4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003da2:	e7f1      	b.n	8003d88 <prvTimerTask+0x8>

08003da4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dae:	f7ff fa1d 	bl	80031ec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003db2:	f107 0308 	add.w	r3, r7, #8
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f866 	bl	8003e88 <prvSampleTimeNow>
 8003dbc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d130      	bne.n	8003e26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <prvProcessTimerOrBlockTask+0x3c>
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d806      	bhi.n	8003de0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dd2:	f7ff fa19 	bl	8003208 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff85 	bl	8003ce8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dde:	e024      	b.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <prvProcessTimerOrBlockTask+0x90>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <prvProcessTimerOrBlockTask+0x50>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x52>
 8003df4:	2300      	movs	r3, #0
 8003df6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <prvProcessTimerOrBlockTask+0x94>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fe ff75 	bl	8002cf4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e0a:	f7ff f9fd 	bl	8003208 <xTaskResumeAll>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <prvProcessTimerOrBlockTask+0x98>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
    }
 8003e24:	e001      	b.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e26:	f7ff f9ef 	bl	8003208 <xTaskResumeAll>
    }
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000160 	.word	0x20000160
 8003e38:	20000164 	.word	0x20000164
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <prvGetNextExpireTime+0x44>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <prvGetNextExpireTime+0x16>
 8003e52:	2201      	movs	r2, #1
 8003e54:	e000      	b.n	8003e58 <prvGetNextExpireTime+0x18>
 8003e56:	2200      	movs	r2, #0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <prvGetNextExpireTime+0x44>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e001      	b.n	8003e74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e74:	68fb      	ldr	r3, [r7, #12]
    }
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000015c 	.word	0x2000015c

08003e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e90:	f7ff fa5a 	bl	8003348 <xTaskGetTickCount>
 8003e94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <prvSampleTimeNow+0x3c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d205      	bcs.n	8003eac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ea0:	f000 f91a 	bl	80040d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <prvSampleTimeNow+0x3c>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    }
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000016c 	.word	0x2000016c

08003ec8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d812      	bhi.n	8003f14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e01b      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <prvInsertTimerInActiveList+0x7c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fe f968 	bl	80021e2 <vListInsert>
 8003f12:	e012      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d206      	bcs.n	8003f2a <prvInsertTimerInActiveList+0x62>
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e007      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <prvInsertTimerInActiveList+0x80>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe f954 	bl	80021e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f3a:	697b      	ldr	r3, [r7, #20]
    }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000160 	.word	0x20000160
 8003f48:	2000015c 	.word	0x2000015c

08003f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f52:	e0ae      	b.n	80040b2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f2c0 80aa 	blt.w	80040b0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe f971 	bl	8002254 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff87 	bl	8003e88 <prvSampleTimeNow>
 8003f7a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b09      	cmp	r3, #9
 8003f80:	f200 8097 	bhi.w	80040b2 <prvProcessReceivedCommands+0x166>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <prvProcessReceivedCommands+0x40>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fb5 	.word	0x08003fb5
 8003f98:	08004029 	.word	0x08004029
 8003f9c:	0800403d 	.word	0x0800403d
 8003fa0:	08004087 	.word	0x08004087
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fb5 	.word	0x08003fb5
 8003fac:	08004029 	.word	0x08004029
 8003fb0:	0800403d 	.word	0x0800403d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	18d1      	adds	r1, r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fd4:	f7ff ff78 	bl	8003ec8 <prvInsertTimerInActiveList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d069      	beq.n	80040b2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05e      	beq.n	80040b2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	2100      	movs	r1, #0
 8004004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004006:	f7ff fe21 	bl	8003c4c <xTimerGenericCommand>
 800400a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d14f      	bne.n	80040b2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	61bb      	str	r3, [r7, #24]
    }
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800403a:	e03a      	b.n	80040b2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	617b      	str	r3, [r7, #20]
    }
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	18d1      	adds	r1, r2, r3
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004080:	f7ff ff22 	bl	8003ec8 <prvInsertTimerInActiveList>
                        break;
 8004084:	e015      	b.n	80040b2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004096:	f000 fc71 	bl	800497c <vPortFree>
 800409a:	e00a      	b.n	80040b2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040ae:	e000      	b.n	80040b2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <prvProcessReceivedCommands+0x188>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f107 0108 	add.w	r1, r7, #8
 80040ba:	2200      	movs	r2, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fbc7 	bl	8002850 <xQueueReceive>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f af45 	bne.w	8003f54 <prvProcessReceivedCommands+0x8>
        }
    }
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000164 	.word	0x20000164

080040d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040de:	e048      	b.n	8004172 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <prvSwitchTimerLists+0xc0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <prvSwitchTimerLists+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f8ab 	bl	8002254 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02e      	beq.n	8004172 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d90e      	bls.n	8004144 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <prvSwitchTimerLists+0xc0>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7fe f850 	bl	80021e2 <vListInsert>
 8004142:	e016      	b.n	8004172 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	2100      	movs	r1, #0
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fd7c 	bl	8003c4c <xTimerGenericCommand>
 8004154:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	603b      	str	r3, [r7, #0]
    }
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <prvSwitchTimerLists+0xc0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1b1      	bne.n	80040e0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <prvSwitchTimerLists+0xc0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <prvSwitchTimerLists+0xc4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a04      	ldr	r2, [pc, #16]	; (8004198 <prvSwitchTimerLists+0xc0>)
 8004188:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <prvSwitchTimerLists+0xc4>)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	6013      	str	r3, [r2, #0]
    }
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	2000015c 	.word	0x2000015c
 800419c:	20000160 	.word	0x20000160

080041a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041a4:	f000 f9de 	bl	8004564 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <prvCheckForValidListAndQueue+0x54>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11d      	bne.n	80041ec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041b0:	4811      	ldr	r0, [pc, #68]	; (80041f8 <prvCheckForValidListAndQueue+0x58>)
 80041b2:	f7fd ffc5 	bl	8002140 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041b6:	4811      	ldr	r0, [pc, #68]	; (80041fc <prvCheckForValidListAndQueue+0x5c>)
 80041b8:	f7fd ffc2 	bl	8002140 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <prvCheckForValidListAndQueue+0x60>)
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <prvCheckForValidListAndQueue+0x58>)
 80041c0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <prvCheckForValidListAndQueue+0x64>)
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <prvCheckForValidListAndQueue+0x5c>)
 80041c6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041c8:	2200      	movs	r2, #0
 80041ca:	210c      	movs	r1, #12
 80041cc:	200a      	movs	r0, #10
 80041ce:	f7fe f8d3 	bl	8002378 <xQueueGenericCreate>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <prvCheckForValidListAndQueue+0x54>)
 80041d6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvCheckForValidListAndQueue+0x54>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <prvCheckForValidListAndQueue+0x54>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4908      	ldr	r1, [pc, #32]	; (8004208 <prvCheckForValidListAndQueue+0x68>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fd52 	bl	8002c90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041ec:	f000 f9ea 	bl	80045c4 <vPortExitCritical>
    }
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000164 	.word	0x20000164
 80041f8:	20000134 	.word	0x20000134
 80041fc:	20000148 	.word	0x20000148
 8004200:	2000015c 	.word	0x2000015c
 8004204:	20000160 	.word	0x20000160
 8004208:	08006e60 	.word	0x08006e60

0800420c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b04      	subs	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b04      	subs	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b04      	subs	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <pxPortInitialiseStack+0x64>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b14      	subs	r3, #20
 8004246:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b04      	subs	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f06f 0202 	mvn.w	r2, #2
 800425a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b20      	subs	r3, #32
 8004260:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	08004275 	.word	0x08004275

08004274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvTaskExitError+0x54>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	d00a      	beq.n	800429e <prvTaskExitError+0x2a>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <prvTaskExitError+0x28>
        __asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
    }
 80042b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042b2:	bf00      	nop
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0fc      	beq.n	80042b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000010 	.word	0x20000010
 80042cc:	00000000 	.word	0x00000000

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	4770      	bx	lr
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst2>:
 80042f0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042f8:	4808      	ldr	r0, [pc, #32]	; (800431c <prvPortStartFirstTask+0x24>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8814 	msr	CONTROL, r0
 800430a:	b662      	cpsie	i
 800430c:	b661      	cpsie	f
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	df00      	svc	0
 8004318:	bf00      	nop
 800431a:	0000      	.short	0x0000
 800431c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop

08004324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800432a:	4b46      	ldr	r3, [pc, #280]	; (8004444 <xPortStartScheduler+0x120>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a46      	ldr	r2, [pc, #280]	; (8004448 <xPortStartScheduler+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10a      	bne.n	800434a <xPortStartScheduler+0x26>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <xPortStartScheduler+0x120>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3f      	ldr	r2, [pc, #252]	; (800444c <xPortStartScheduler+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10a      	bne.n	800436a <xPortStartScheduler+0x46>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <xPortStartScheduler+0x12c>)
 800436c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <xPortStartScheduler+0x130>)
 8004390:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <xPortStartScheduler+0x134>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004398:	e009      	b.n	80043ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <xPortStartScheduler+0x134>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <xPortStartScheduler+0x134>)
 80043a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d0ef      	beq.n	800439a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ba:	4b27      	ldr	r3, [pc, #156]	; (8004458 <xPortStartScheduler+0x134>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00a      	beq.n	80043dc <xPortStartScheduler+0xb8>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60bb      	str	r3, [r7, #8]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <xPortStartScheduler+0x134>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <xPortStartScheduler+0x134>)
 80043e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <xPortStartScheduler+0x134>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <xPortStartScheduler+0x134>)
 80043f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <xPortStartScheduler+0x138>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <xPortStartScheduler+0x138>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <xPortStartScheduler+0x138>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <xPortStartScheduler+0x138>)
 800440c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004412:	f000 f963 	bl	80046dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <xPortStartScheduler+0x13c>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800441c:	f000 f982 	bl	8004724 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xPortStartScheduler+0x140>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <xPortStartScheduler+0x140>)
 8004426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800442c:	f7ff ff64 	bl	80042f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004430:	f7ff f868 	bl	8003504 <vTaskSwitchContext>
    prvTaskExitError();
 8004434:	f7ff ff1e 	bl	8004274 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000ed00 	.word	0xe000ed00
 8004448:	410fc271 	.word	0x410fc271
 800444c:	410fc270 	.word	0x410fc270
 8004450:	e000e400 	.word	0xe000e400
 8004454:	20000170 	.word	0x20000170
 8004458:	20000174 	.word	0x20000174
 800445c:	e000ed20 	.word	0xe000ed20
 8004460:	20000010 	.word	0x20000010
 8004464:	e000ef34 	.word	0xe000ef34

08004468 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800446e:	4b37      	ldr	r3, [pc, #220]	; (800454c <vInitPrioGroupValue+0xe4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <vInitPrioGroupValue+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10a      	bne.n	800448e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <vInitPrioGroupValue+0xe4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a30      	ldr	r2, [pc, #192]	; (8004554 <vInitPrioGroupValue+0xec>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10a      	bne.n	80044ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
    }
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <vInitPrioGroupValue+0xf0>)
 80044b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <vInitPrioGroupValue+0xf4>)
 80044d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044d8:	2207      	movs	r2, #7
 80044da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044dc:	e009      	b.n	80044f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d0ef      	beq.n	80044de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1c3 0307 	rsb	r3, r3, #7
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00a      	beq.n	8004520 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
    }
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004528:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <vInitPrioGroupValue+0xf8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004534:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000ed00 	.word	0xe000ed00
 8004550:	410fc271 	.word	0x410fc271
 8004554:	410fc270 	.word	0x410fc270
 8004558:	e000e400 	.word	0xe000e400
 800455c:	20000170 	.word	0x20000170
 8004560:	20000174 	.word	0x20000174

08004564 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	607b      	str	r3, [r7, #4]
    }
 800457c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <vPortEnterCritical+0x58>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <vPortEnterCritical+0x58>)
 8004586:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <vPortEnterCritical+0x58>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10f      	bne.n	80045b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortEnterCritical+0x5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	603b      	str	r3, [r7, #0]
    }
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <vPortEnterCritical+0x4a>
    }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000010 	.word	0x20000010
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <vPortExitCritical+0x50>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <vPortExitCritical+0x24>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <vPortExitCritical+0x50>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <vPortExitCritical+0x50>)
 80045f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <vPortExitCritical+0x50>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <vPortExitCritical+0x42>
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f383 8811 	msr	BASEPRI, r3
    }
 8004604:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000010 	.word	0x20000010
	...

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004644:	f380 8811 	msr	BASEPRI, r0
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f7fe ff58 	bl	8003504 <vTaskSwitchContext>
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f380 8811 	msr	BASEPRI, r0
 800465c:	bc09      	pop	{r0, r3}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004666:	f01e 0f10 	tst.w	lr, #16
 800466a:	bf08      	it	eq
 800466c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004670:	f380 8809 	msr	PSP, r0
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst>:
 8004680:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
        __asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
    }
 80046a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80046a2:	f002 f823 	bl	80066ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80046a6:	f7fe fe71 	bl	800338c <xTaskIncrementTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80046b0:	f002 f87a 	bl	80067a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <SysTick_Handler+0x50>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e001      	b.n	80046c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80046be:	f002 f857 	bl	8006770 <SEGGER_SYSVIEW_RecordExitISR>
 80046c2:	2300      	movs	r3, #0
 80046c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f383 8811 	msr	BASEPRI, r3
    }
 80046cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <vPortSetupTimerInterrupt+0x40>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <vPortSetupTimerInterrupt+0x44>)
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	e000e014 	.word	0xe000e014

08004724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004734 <vPortEnableVFP+0x10>
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800472e:	6001      	str	r1, [r0, #0]
 8004730:	4770      	bx	lr
 8004732:	0000      	.short	0x0000
 8004734:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop

0800473c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004742:	f3ef 8305 	mrs	r3, IPSR
 8004746:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d914      	bls.n	8004778 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <vPortValidateInterruptPriority+0x70>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <vPortValidateInterruptPriority+0x74>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	7afa      	ldrb	r2, [r7, #11]
 800475e:	429a      	cmp	r2, r3
 8004760:	d20a      	bcs.n	8004778 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
    }
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <vPortValidateInterruptPriority+0x78>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <vPortValidateInterruptPriority+0x7c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d90a      	bls.n	800479e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	603b      	str	r3, [r7, #0]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vPortValidateInterruptPriority+0x60>
    }
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e3f0 	.word	0xe000e3f0
 80047b0:	20000170 	.word	0x20000170
 80047b4:	e000ed0c 	.word	0xe000ed0c
 80047b8:	20000174 	.word	0x20000174

080047bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	; 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80047c8:	f7fe fd10 	bl	80031ec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047cc:	4b65      	ldr	r3, [pc, #404]	; (8004964 <pvPortMalloc+0x1a8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047d4:	f000 f934 	bl	8004a40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d8:	4b63      	ldr	r3, [pc, #396]	; (8004968 <pvPortMalloc+0x1ac>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 80a7 	bne.w	8004934 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02d      	beq.n	8004848 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047ec:	2208      	movs	r2, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d227      	bcs.n	8004848 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d021      	beq.n	800484e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	3308      	adds	r3, #8
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d214      	bcs.n	8004842 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	3308      	adds	r3, #8
 8004820:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	2b00      	cmp	r3, #0
 800482a:	d010      	beq.n	800484e <pvPortMalloc+0x92>
        __asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	617b      	str	r3, [r7, #20]
    }
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004846:	e002      	b.n	800484e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	e000      	b.n	8004850 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800484e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d06e      	beq.n	8004934 <pvPortMalloc+0x178>
 8004856:	4b45      	ldr	r3, [pc, #276]	; (800496c <pvPortMalloc+0x1b0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d869      	bhi.n	8004934 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004860:	4b43      	ldr	r3, [pc, #268]	; (8004970 <pvPortMalloc+0x1b4>)
 8004862:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004864:	4b42      	ldr	r3, [pc, #264]	; (8004970 <pvPortMalloc+0x1b4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800486a:	e004      	b.n	8004876 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d903      	bls.n	8004888 <pvPortMalloc+0xcc>
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f1      	bne.n	800486c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004888:	4b36      	ldr	r3, [pc, #216]	; (8004964 <pvPortMalloc+0x1a8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	429a      	cmp	r2, r3
 8004890:	d050      	beq.n	8004934 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2208      	movs	r2, #8
 8004898:	4413      	add	r3, r2
 800489a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	2308      	movs	r3, #8
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d91f      	bls.n	80048f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <pvPortMalloc+0x120>
        __asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	613b      	str	r3, [r7, #16]
    }
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f000 f908 	bl	8004b04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <pvPortMalloc+0x1b0>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1b      	ldr	r2, [pc, #108]	; (800496c <pvPortMalloc+0x1b0>)
 8004900:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <pvPortMalloc+0x1b0>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <pvPortMalloc+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d203      	bcs.n	8004916 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <pvPortMalloc+0x1b0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	; (8004974 <pvPortMalloc+0x1b8>)
 8004914:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <pvPortMalloc+0x1ac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	431a      	orrs	r2, r3
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <pvPortMalloc+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	4a11      	ldr	r2, [pc, #68]	; (8004978 <pvPortMalloc+0x1bc>)
 8004932:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004934:	f7fe fc68 	bl	8003208 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <pvPortMalloc+0x19c>
        __asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
    }
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <pvPortMalloc+0x19a>
    return pvReturn;
 8004958:	69fb      	ldr	r3, [r7, #28]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3728      	adds	r7, #40	; 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20012d80 	.word	0x20012d80
 8004968:	20012d94 	.word	0x20012d94
 800496c:	20012d84 	.word	0x20012d84
 8004970:	20012d78 	.word	0x20012d78
 8004974:	20012d88 	.word	0x20012d88
 8004978:	20012d8c 	.word	0x20012d8c

0800497c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04d      	beq.n	8004a2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800498e:	2308      	movs	r3, #8
 8004990:	425b      	negs	r3, r3
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <vPortFree+0xb8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <vPortFree+0x44>
        __asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60fb      	str	r3, [r7, #12]
    }
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <vPortFree+0x62>
        __asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	60bb      	str	r3, [r7, #8]
    }
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <vPortFree+0xb8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01e      	beq.n	8004a2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11a      	bne.n	8004a2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <vPortFree+0xb8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	401a      	ands	r2, r3
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a04:	f7fe fbf2 	bl	80031ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <vPortFree+0xbc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <vPortFree+0xbc>)
 8004a14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a16:	6938      	ldr	r0, [r7, #16]
 8004a18:	f000 f874 	bl	8004b04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <vPortFree+0xc0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <vPortFree+0xc0>)
 8004a24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a26:	f7fe fbef 	bl	8003208 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20012d94 	.word	0x20012d94
 8004a38:	20012d84 	.word	0x20012d84
 8004a3c:	20012d90 	.word	0x20012d90

08004a40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a4c:	4b27      	ldr	r3, [pc, #156]	; (8004aec <prvHeapInit+0xac>)
 8004a4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3307      	adds	r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <prvHeapInit+0xac>)
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <prvHeapInit+0xb0>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <prvHeapInit+0xb0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4413      	add	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0307 	bic.w	r3, r3, #7
 8004a9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <prvHeapInit+0xb4>)
 8004aa0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <prvHeapInit+0xb4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <prvHeapInit+0xb4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <prvHeapInit+0xb4>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <prvHeapInit+0xb8>)
 8004ace:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <prvHeapInit+0xbc>)
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <prvHeapInit+0xc0>)
 8004ada:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	20000178 	.word	0x20000178
 8004af0:	20012d78 	.word	0x20012d78
 8004af4:	20012d80 	.word	0x20012d80
 8004af8:	20012d88 	.word	0x20012d88
 8004afc:	20012d84 	.word	0x20012d84
 8004b00:	20012d94 	.word	0x20012d94

08004b04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <prvInsertBlockIntoFreeList+0xac>)
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e002      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x14>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d8f7      	bhi.n	8004b12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d108      	bne.n	8004b46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d118      	bne.n	8004b8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d00d      	beq.n	8004b82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e008      	b.n	8004b94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e003      	b.n	8004b94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d002      	beq.n	8004ba2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20012d78 	.word	0x20012d78
 8004bb4:	20012d80 	.word	0x20012d80

08004bb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004bbc:	4803      	ldr	r0, [pc, #12]	; (8004bcc <_cbSendSystemDesc+0x14>)
 8004bbe:	f001 fd3f 	bl	8006640 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004bc2:	4803      	ldr	r0, [pc, #12]	; (8004bd0 <_cbSendSystemDesc+0x18>)
 8004bc4:	f001 fd3c 	bl	8006640 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08006e68 	.word	0x08006e68
 8004bd0:	08006ea8 	.word	0x08006ea8

08004bd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004be2:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <SEGGER_SYSVIEW_Conf+0x28>)
 8004be4:	f001 f8aa 	bl	8005d3c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004be8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bec:	f001 f8ea 	bl	8005dc4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bf0:	bf00      	nop
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08006f48 	.word	0x08006f48

08004c00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e033      	b.n	8004c74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c0c:	491e      	ldr	r1, [pc, #120]	; (8004c88 <_cbSendTaskList+0x88>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	491a      	ldr	r1, [pc, #104]	; (8004c88 <_cbSendTaskList+0x88>)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	4c16      	ldr	r4, [pc, #88]	; (8004c88 <_cbSendTaskList+0x88>)
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4423      	add	r3, r4
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	4d11      	ldr	r5, [pc, #68]	; (8004c88 <_cbSendTaskList+0x88>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	442b      	add	r3, r5
 8004c4e:	330c      	adds	r3, #12
 8004c50:	681d      	ldr	r5, [r3, #0]
 8004c52:	4e0d      	ldr	r6, [pc, #52]	; (8004c88 <_cbSendTaskList+0x88>)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4433      	add	r3, r6
 8004c60:	3310      	adds	r3, #16
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462b      	mov	r3, r5
 8004c68:	4622      	mov	r2, r4
 8004c6a:	f000 f8b5 	bl	8004dd8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3301      	adds	r3, #1
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <_cbSendTaskList+0x8c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3c6      	bcc.n	8004c0c <_cbSendTaskList+0xc>
  }
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	20012d98 	.word	0x20012d98
 8004c8c:	20012e38 	.word	0x20012e38

08004c90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c90:	b5b0      	push	{r4, r5, r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c96:	f7fe fb67 	bl	8003368 <xTaskGetTickCountFromISR>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	f04f 0400 	mov.w	r4, #0
 8004cb2:	f04f 0500 	mov.w	r5, #0
 8004cb6:	015d      	lsls	r5, r3, #5
 8004cb8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004cbc:	0154      	lsls	r4, r2, #5
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	1a12      	subs	r2, r2, r0
 8004cc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc8:	f04f 0400 	mov.w	r4, #0
 8004ccc:	f04f 0500 	mov.w	r5, #0
 8004cd0:	009d      	lsls	r5, r3, #2
 8004cd2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004cd6:	0094      	lsls	r4, r2, #2
 8004cd8:	4622      	mov	r2, r4
 8004cda:	462b      	mov	r3, r5
 8004cdc:	1812      	adds	r2, r2, r0
 8004cde:	eb41 0303 	adc.w	r3, r1, r3
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	00d9      	lsls	r1, r3, #3
 8004cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cf0:	00d0      	lsls	r0, r2, #3
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bdb0      	pop	{r4, r5, r7, pc}

08004d08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d16:	2205      	movs	r2, #5
 8004d18:	492b      	ldr	r1, [pc, #172]	; (8004dc8 <SYSVIEW_AddTask+0xc0>)
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f002 f822 	bl	8006d64 <memcmp>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d04b      	beq.n	8004dbe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d26:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	d903      	bls.n	8004d36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d2e:	4828      	ldr	r0, [pc, #160]	; (8004dd0 <SYSVIEW_AddTask+0xc8>)
 8004d30:	f001 ff98 	bl	8006c64 <SEGGER_SYSVIEW_Warn>
    return;
 8004d34:	e044      	b.n	8004dc0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d36:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4926      	ldr	r1, [pc, #152]	; (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4921      	ldr	r1, [pc, #132]	; (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3308      	adds	r3, #8
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4916      	ldr	r1, [pc, #88]	; (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	330c      	adds	r3, #12
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4910      	ldr	r1, [pc, #64]	; (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004daa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f80e 	bl	8004dd8 <SYSVIEW_SendTaskInfo>
 8004dbc:	e000      	b.n	8004dc0 <SYSVIEW_AddTask+0xb8>
    return;
 8004dbe:	bf00      	nop

}
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	08006eb8 	.word	0x08006eb8
 8004dcc:	20012e38 	.word	0x20012e38
 8004dd0:	08006ec0 	.word	0x08006ec0
 8004dd4:	20012d98 	.word	0x20012d98

08004dd8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	2214      	movs	r2, #20
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 ffd4 	bl	8006d9c <memset>
  TaskInfo.TaskID     = TaskID;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fb1f 	bl	8006450 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e12:	bf00      	nop
 8004e14:	3728      	adds	r7, #40	; 0x28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <_DoInit+0x98>)
 8004e24:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <_DoInit+0x9c>)
 8004e36:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <_DoInit+0xa0>)
 8004e3c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e44:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <_DoInit+0x9c>)
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <_DoInit+0xa4>)
 8004e62:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2210      	movs	r2, #16
 8004e68:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <_DoInit+0xa8>)
 8004e82:	6810      	ldr	r0, [r2, #0]
 8004e84:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	; (8004ec8 <_DoInit+0xac>)
 8004e8e:	6810      	ldr	r0, [r2, #0]
 8004e90:	6018      	str	r0, [r3, #0]
 8004e92:	8891      	ldrh	r1, [r2, #4]
 8004e94:	7992      	ldrb	r2, [r2, #6]
 8004e96:	8099      	strh	r1, [r3, #4]
 8004e98:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e9a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ea4:	f3bf 8f5f 	dmb	sy
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	200143f4 	.word	0x200143f4
 8004eb8:	08006f10 	.word	0x08006f10
 8004ebc:	20012e3c 	.word	0x20012e3c
 8004ec0:	2001323c 	.word	0x2001323c
 8004ec4:	08006f1c 	.word	0x08006f1c
 8004ec8:	08006f20 	.word	0x08006f20

08004ecc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	; 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ed8:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <SEGGER_RTT_ReadNoLock+0x1e>
 8004ee6:	f7ff ff99 	bl	8004e1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3360      	adds	r3, #96	; 0x60
 8004ef6:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d92b      	bls.n	8004f70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bf28      	it	cs
 8004f2a:	4613      	movcs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	4413      	add	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3e:	f001 ff1f 	bl	8006d80 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d101      	bne.n	8004f70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bf28      	it	cs
 8004f80:	4613      	movcs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d019      	beq.n	8004fbe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	4413      	add	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6939      	ldr	r1, [r7, #16]
 8004f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9a:	f001 fef1 	bl	8006d80 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3730      	adds	r7, #48	; 0x30
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200143f4 	.word	0x200143f4

08004fd8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ff4:	f7ff ff12 	bl	8004e1c <_DoInit>
  SEGGER_RTT_LOCK();
 8004ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffc:	f04f 0120 	mov.w	r1, #32
 8005000:	f381 8811 	msr	BASEPRI, r1
 8005004:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005006:	4b35      	ldr	r3, [pc, #212]	; (80050dc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005008:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800500e:	6939      	ldr	r1, [r7, #16]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	3304      	adds	r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	429a      	cmp	r2, r3
 8005034:	dbeb      	blt.n	800500e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005036:	e000      	b.n	800503a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005038:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	429a      	cmp	r2, r3
 8005042:	da3f      	bge.n	80050c4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005044:	6939      	ldr	r1, [r7, #16]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005058:	6939      	ldr	r1, [r7, #16]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	440b      	add	r3, r1
 8005068:	3304      	adds	r3, #4
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800506e:	6939      	ldr	r1, [r7, #16]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3320      	adds	r3, #32
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005082:	6939      	ldr	r1, [r7, #16]
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	3328      	adds	r3, #40	; 0x28
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005096:	6939      	ldr	r1, [r7, #16]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	3324      	adds	r3, #36	; 0x24
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	332c      	adds	r3, #44	; 0x2c
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050be:	f3bf 8f5f 	dmb	sy
 80050c2:	e002      	b.n	80050ca <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80050d0:	69fb      	ldr	r3, [r7, #28]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200143f4 	.word	0x200143f4

080050e0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050ee:	4b33      	ldr	r3, [pc, #204]	; (80051bc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050fc:	f7ff fe8e 	bl	8004e1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005100:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005102:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4293      	cmp	r3, r2
 800510e:	d24d      	bcs.n	80051ac <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005110:	f3ef 8311 	mrs	r3, BASEPRI
 8005114:	f04f 0120 	mov.w	r1, #32
 8005118:	f381 8811 	msr	BASEPRI, r1
 800511c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d031      	beq.n	8005188 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005124:	6979      	ldr	r1, [r7, #20]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	3360      	adds	r3, #96	; 0x60
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	3364      	adds	r3, #100	; 0x64
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3368      	adds	r3, #104	; 0x68
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	3370      	adds	r3, #112	; 0x70
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005174:	6979      	ldr	r1, [r7, #20]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	336c      	adds	r3, #108	; 0x6c
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005188:	6979      	ldr	r1, [r7, #20]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	440b      	add	r3, r1
 8005196:	3374      	adds	r3, #116	; 0x74
 8005198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800519c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e002      	b.n	80051b2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80051b2:	69fb      	ldr	r3, [r7, #28]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200143f4 	.word	0x200143f4

080051c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80051d0:	e002      	b.n	80051d8 <_EncodeStr+0x18>
    Len++;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3301      	adds	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f6      	bne.n	80051d2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d901      	bls.n	80051f0 <_EncodeStr+0x30>
    Len = Limit;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2bfe      	cmp	r3, #254	; 0xfe
 80051f4:	d806      	bhi.n	8005204 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	60fa      	str	r2, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e011      	b.n	8005228 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	60fa      	str	r2, [r7, #12]
 800520a:	22ff      	movs	r2, #255	; 0xff
 800520c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	60fa      	str	r2, [r7, #12]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	0a19      	lsrs	r1, r3, #8
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	b2ca      	uxtb	r2, r1
 8005226:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800522c:	e00a      	b.n	8005244 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	1c53      	adds	r3, r2, #1
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	60f9      	str	r1, [r7, #12]
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	701a      	strb	r2, [r3, #0]
    n++;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3301      	adds	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3f0      	bcc.n	800522e <_EncodeStr+0x6e>
  }
  return pPayload;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800527a:	4b36      	ldr	r3, [pc, #216]	; (8005354 <_HandleIncomingPacket+0xe0>)
 800527c:	7e1b      	ldrb	r3, [r3, #24]
 800527e:	4618      	mov	r0, r3
 8005280:	1cfb      	adds	r3, r7, #3
 8005282:	2201      	movs	r2, #1
 8005284:	4619      	mov	r1, r3
 8005286:	f7ff fe21 	bl	8004ecc <SEGGER_RTT_ReadNoLock>
 800528a:	4603      	mov	r3, r0
 800528c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd54      	ble.n	800533e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d032      	beq.n	8005300 <_HandleIncomingPacket+0x8c>
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	dc42      	bgt.n	8005324 <_HandleIncomingPacket+0xb0>
 800529e:	2b07      	cmp	r3, #7
 80052a0:	dc16      	bgt.n	80052d0 <_HandleIncomingPacket+0x5c>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dd3e      	ble.n	8005324 <_HandleIncomingPacket+0xb0>
 80052a6:	3b01      	subs	r3, #1
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d83b      	bhi.n	8005324 <_HandleIncomingPacket+0xb0>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <_HandleIncomingPacket+0x40>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d7 	.word	0x080052d7
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e3 	.word	0x080052e3
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	080052fb 	.word	0x080052fb
 80052d0:	2b7f      	cmp	r3, #127	; 0x7f
 80052d2:	d036      	beq.n	8005342 <_HandleIncomingPacket+0xce>
 80052d4:	e026      	b.n	8005324 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80052d6:	f000 ff41 	bl	800615c <SEGGER_SYSVIEW_Start>
      break;
 80052da:	e037      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80052dc:	f000 fff8 	bl	80062d0 <SEGGER_SYSVIEW_Stop>
      break;
 80052e0:	e034      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80052e2:	f001 f9d1 	bl	8006688 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80052e6:	e031      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80052e8:	f001 f996 	bl	8006618 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80052ec:	e02e      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80052ee:	f001 f815 	bl	800631c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80052f2:	e02b      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80052f4:	f001 fc64 	bl	8006bc0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80052f8:	e028      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80052fa:	f001 fc43 	bl	8006b84 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80052fe:	e025      	b.n	800534c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <_HandleIncomingPacket+0xe0>)
 8005302:	7e1b      	ldrb	r3, [r3, #24]
 8005304:	4618      	mov	r0, r3
 8005306:	1cfb      	adds	r3, r7, #3
 8005308:	2201      	movs	r2, #1
 800530a:	4619      	mov	r1, r3
 800530c:	f7ff fdde 	bl	8004ecc <SEGGER_RTT_ReadNoLock>
 8005310:	4603      	mov	r3, r0
 8005312:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd15      	ble.n	8005346 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fbb1 	bl	8006a84 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005322:	e010      	b.n	8005346 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	b25b      	sxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	da0e      	bge.n	800534a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <_HandleIncomingPacket+0xe0>)
 800532e:	7e1b      	ldrb	r3, [r3, #24]
 8005330:	4618      	mov	r0, r3
 8005332:	1cfb      	adds	r3, r7, #3
 8005334:	2201      	movs	r2, #1
 8005336:	4619      	mov	r1, r3
 8005338:	f7ff fdc8 	bl	8004ecc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800533c:	e005      	b.n	800534a <_HandleIncomingPacket+0xd6>
    }
  }
 800533e:	bf00      	nop
 8005340:	e004      	b.n	800534c <_HandleIncomingPacket+0xd8>
      break;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <_HandleIncomingPacket+0xd8>
      break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <_HandleIncomingPacket+0xd8>
      break;
 800534a:	bf00      	nop
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20014254 	.word	0x20014254

08005358 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	; 0x30
 800535c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800535e:	2301      	movs	r3, #1
 8005360:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005362:	1d3b      	adds	r3, r7, #4
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	e00b      	b.n	800538c <_TrySendOverflowPacket+0x34>
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800537e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b7f      	cmp	r3, #127	; 0x7f
 8005390:	d8f0      	bhi.n	8005374 <_TrySendOverflowPacket+0x1c>
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053a2:	4b25      	ldr	r3, [pc, #148]	; (8005438 <_TrySendOverflowPacket+0xe0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80053a8:	4b22      	ldr	r3, [pc, #136]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	623b      	str	r3, [r7, #32]
 80053ba:	e00b      	b.n	80053d4 <_TrySendOverflowPacket+0x7c>
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	1c59      	adds	r1, r3, #1
 80053c4:	6279      	str	r1, [r7, #36]	; 0x24
 80053c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	09db      	lsrs	r3, r3, #7
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b7f      	cmp	r3, #127	; 0x7f
 80053d8:	d8f0      	bhi.n	80053bc <_TrySendOverflowPacket+0x64>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	627a      	str	r2, [r7, #36]	; 0x24
 80053e0:	6a3a      	ldr	r2, [r7, #32]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	4618      	mov	r0, r3
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	f7fa fee8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005400:	4603      	mov	r3, r0
 8005402:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005410:	4b08      	ldr	r3, [pc, #32]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	3b01      	subs	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e004      	b.n	8005428 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	3301      	adds	r3, #1
 8005424:	4a03      	ldr	r2, [pc, #12]	; (8005434 <_TrySendOverflowPacket+0xdc>)
 8005426:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005428:	693b      	ldr	r3, [r7, #16]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3730      	adds	r7, #48	; 0x30
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20014254 	.word	0x20014254
 8005438:	e0001004 	.word	0xe0001004

0800543c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005448:	4b6c      	ldr	r3, [pc, #432]	; (80055fc <_SendPacket+0x1c0>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d010      	beq.n	8005472 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005450:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <_SendPacket+0x1c0>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80a3 	beq.w	80055a0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <_SendPacket+0x1c0>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d109      	bne.n	8005476 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005462:	f7ff ff79 	bl	8005358 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005466:	4b65      	ldr	r3, [pc, #404]	; (80055fc <_SendPacket+0x1c0>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	f040 809a 	bne.w	80055a4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005470:	e001      	b.n	8005476 <_SendPacket+0x3a>
    goto Send;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <_SendPacket+0x3c>
Send:
 8005476:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b1f      	cmp	r3, #31
 800547c:	d809      	bhi.n	8005492 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800547e:	4b5f      	ldr	r3, [pc, #380]	; (80055fc <_SendPacket+0x1c0>)
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 808b 	bne.w	80055a8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b17      	cmp	r3, #23
 8005496:	d807      	bhi.n	80054a8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e03d      	b.n	8005524 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b7f      	cmp	r3, #127	; 0x7f
 80054b4:	d912      	bls.n	80054dc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	09da      	lsrs	r2, r3, #7
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	60fa      	str	r2, [r7, #12]
 80054d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e006      	b.n	80054ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b01      	subs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b7f      	cmp	r3, #127	; 0x7f
 80054ee:	d912      	bls.n	8005516 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	09da      	lsrs	r2, r3, #7
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	3a01      	subs	r2, #1
 8005508:	60fa      	str	r2, [r7, #12]
 800550a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e006      	b.n	8005524 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3b01      	subs	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <_SendPacket+0x1c4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800552a:	4b34      	ldr	r3, [pc, #208]	; (80055fc <_SendPacket+0x1c0>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	e00b      	b.n	8005556 <_SendPacket+0x11a>
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	6279      	str	r1, [r7, #36]	; 0x24
 8005548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	09db      	lsrs	r3, r3, #7
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2b7f      	cmp	r3, #127	; 0x7f
 800555a:	d8f0      	bhi.n	800553e <_SendPacket+0x102>
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	627a      	str	r2, [r7, #36]	; 0x24
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800556c:	4b23      	ldr	r3, [pc, #140]	; (80055fc <_SendPacket+0x1c0>)
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	4618      	mov	r0, r3
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	461a      	mov	r2, r3
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	f7fa fe28 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005580:	4603      	mov	r3, r0
 8005582:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800558a:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <_SendPacket+0x1c0>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	60d3      	str	r3, [r2, #12]
 8005590:	e00b      	b.n	80055aa <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <_SendPacket+0x1c0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <_SendPacket+0x1c0>)
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e004      	b.n	80055aa <_SendPacket+0x16e>
    goto SendDone;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <_SendPacket+0x16e>
      goto SendDone;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <_SendPacket+0x16e>
      goto SendDone;
 80055a8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <_SendPacket+0x1c0>)
 80055ac:	7e1b      	ldrb	r3, [r3, #24]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <_SendPacket+0x1c8>)
 80055b2:	460b      	mov	r3, r1
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	440b      	add	r3, r1
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4413      	add	r3, r2
 80055bc:	336c      	adds	r3, #108	; 0x6c
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <_SendPacket+0x1c0>)
 80055c2:	7e1b      	ldrb	r3, [r3, #24]
 80055c4:	4618      	mov	r0, r3
 80055c6:	490f      	ldr	r1, [pc, #60]	; (8005604 <_SendPacket+0x1c8>)
 80055c8:	4603      	mov	r3, r0
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4403      	add	r3, r0
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	3370      	adds	r3, #112	; 0x70
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d00b      	beq.n	80055f2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <_SendPacket+0x1c0>)
 80055dc:	789b      	ldrb	r3, [r3, #2]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <_SendPacket+0x1c0>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055e8:	f7ff fe44 	bl	8005274 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <_SendPacket+0x1c0>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055f2:	bf00      	nop
 80055f4:	3728      	adds	r7, #40	; 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20014254 	.word	0x20014254
 8005600:	e0001004 	.word	0xe0001004
 8005604:	200143f4 	.word	0x200143f4

08005608 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	3301      	adds	r3, #1
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d80a      	bhi.n	8005638 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6051      	str	r1, [r2, #4]
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d15a      	bne.n	80056f6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	e00b      	b.n	800567a <_StoreChar+0x72>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	1c59      	adds	r1, r3, #1
 800566a:	6279      	str	r1, [r7, #36]	; 0x24
 800566c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b7f      	cmp	r3, #127	; 0x7f
 800567e:	d8f0      	bhi.n	8005662 <_StoreChar+0x5a>
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	627a      	str	r2, [r7, #36]	; 0x24
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e00b      	b.n	80056b2 <_StoreChar+0xaa>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	1c59      	adds	r1, r3, #1
 80056a2:	61f9      	str	r1, [r7, #28]
 80056a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	09db      	lsrs	r3, r3, #7
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b7f      	cmp	r3, #127	; 0x7f
 80056b6:	d8f0      	bhi.n	800569a <_StoreChar+0x92>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	61fa      	str	r2, [r7, #28]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	221a      	movs	r2, #26
 80056ce:	6939      	ldr	r1, [r7, #16]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff feb3 	bl	800543c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fdbd 	bl	800525a <_PreparePacket>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
  }
}
 80056f6:	bf00      	nop
 80056f8:	3728      	adds	r7, #40	; 0x28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005712:	2301      	movs	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005716:	2301      	movs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800571a:	e007      	b.n	800572c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800571c:	6a3a      	ldr	r2, [r7, #32]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	623b      	str	r3, [r7, #32]
    Width++;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d2f3      	bcs.n	800571c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	429a      	cmp	r2, r3
 800573a:	d901      	bls.n	8005740 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11f      	bne.n	800578a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01c      	beq.n	800578a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <_PrintUnsigned+0x66>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <_PrintUnsigned+0x66>
        c = '0';
 8005760:	2330      	movs	r3, #48	; 0x30
 8005762:	76fb      	strb	r3, [r7, #27]
 8005764:	e001      	b.n	800576a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005766:	2320      	movs	r3, #32
 8005768:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800576a:	e007      	b.n	800577c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	3b01      	subs	r3, #1
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005772:	7efb      	ldrb	r3, [r7, #27]
 8005774:	4619      	mov	r1, r3
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ff46 	bl	8005608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <_PrintUnsigned+0x8a>
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	429a      	cmp	r2, r3
 8005788:	d3f0      	bcc.n	800576c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d903      	bls.n	8005798 <_PrintUnsigned+0x98>
      NumDigits--;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3b01      	subs	r3, #1
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	e009      	b.n	80057ac <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d200      	bcs.n	80057ac <_PrintUnsigned+0xac>
        break;
 80057aa:	e005      	b.n	80057b8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057b6:	e7e8      	b.n	800578a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <_PrintUnsigned+0x128>)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4413      	add	r3, r2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff ff14 	bl	8005608 <_StoreChar>
    Digit /= Base;
 80057e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e3      	bne.n	80057b8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005800:	e006      	b.n	8005810 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	3b01      	subs	r3, #1
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005808:	2120      	movs	r1, #32
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fefc 	bl	8005608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <_PrintUnsigned+0x11e>
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	429a      	cmp	r2, r3
 800581c:	d3f1      	bcc.n	8005802 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800581e:	bf00      	nop
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	08006f5c 	.word	0x08006f5c

0800582c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfb8      	it	lt
 8005840:	425b      	neglt	r3, r3
 8005842:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005848:	e007      	b.n	800585a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005852:	613b      	str	r3, [r7, #16]
    Width++;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	daf3      	bge.n	800584a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	429a      	cmp	r2, r3
 8005868:	d901      	bls.n	800586e <_PrintInt+0x42>
    Width = NumDigits;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <_PrintInt+0x5e>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	db04      	blt.n	8005884 <_PrintInt+0x58>
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <_PrintInt+0x5e>
    FieldWidth--;
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3b01      	subs	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <_PrintInt+0x6e>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <_PrintInt+0x9c>
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d111      	bne.n	80058c8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00e      	beq.n	80058c8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058aa:	e006      	b.n	80058ba <_PrintInt+0x8e>
        FieldWidth--;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80058b2:	2120      	movs	r1, #32
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fea7 	bl	8005608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <_PrintInt+0x9c>
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d3f1      	bcc.n	80058ac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da07      	bge.n	80058de <_PrintInt+0xb2>
    v = -v;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	425b      	negs	r3, r3
 80058d2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80058d4:	212d      	movs	r1, #45	; 0x2d
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff fe96 	bl	8005608 <_StoreChar>
 80058dc:	e008      	b.n	80058f0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80058e8:	212b      	movs	r1, #43	; 0x2b
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fe8c 	bl	8005608 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d019      	beq.n	800592e <_PrintInt+0x102>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d114      	bne.n	800592e <_PrintInt+0x102>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d111      	bne.n	800592e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005910:	e006      	b.n	8005920 <_PrintInt+0xf4>
        FieldWidth--;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	3b01      	subs	r3, #1
 8005916:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005918:	2130      	movs	r1, #48	; 0x30
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fe74 	bl	8005608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <_PrintInt+0x102>
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	429a      	cmp	r2, r3
 800592c:	d3f1      	bcc.n	8005912 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff fedf 	bl	8005700 <_PrintUnsigned>
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b098      	sub	sp, #96	; 0x60
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005958:	f3ef 8311 	mrs	r3, BASEPRI
 800595c:	f04f 0120 	mov.w	r1, #32
 8005960:	f381 8811 	msr	BASEPRI, r1
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
 8005966:	48b7      	ldr	r0, [pc, #732]	; (8005c44 <_VPrintTarget+0x2f8>)
 8005968:	f7ff fc77 	bl	800525a <_PreparePacket>
 800596c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800596e:	4bb5      	ldr	r3, [pc, #724]	; (8005c44 <_VPrintTarget+0x2f8>)
 8005970:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8183 	beq.w	8005ca2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800599c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059a0:	2b25      	cmp	r3, #37	; 0x25
 80059a2:	f040 8170 	bne.w	8005c86 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80059a6:	2300      	movs	r3, #0
 80059a8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80059b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ba:	3b23      	subs	r3, #35	; 0x23
 80059bc:	2b0d      	cmp	r3, #13
 80059be:	d83f      	bhi.n	8005a40 <_VPrintTarget+0xf4>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <_VPrintTarget+0x7c>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	08005a41 	.word	0x08005a41
 80059d0:	08005a41 	.word	0x08005a41
 80059d4:	08005a41 	.word	0x08005a41
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	08005a41 	.word	0x08005a41
 80059e0:	08005a41 	.word	0x08005a41
 80059e4:	08005a41 	.word	0x08005a41
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a11 	.word	0x08005a11
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e01a      	b.n	8005a46 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a12:	f043 0302 	orr.w	r3, r3, #2
 8005a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e012      	b.n	8005a46 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	f043 0304 	orr.w	r3, r3, #4
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e00a      	b.n	8005a46 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	f043 0308 	orr.w	r3, r3, #8
 8005a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e002      	b.n	8005a46 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005a40:	2300      	movs	r3, #0
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
 8005a44:	bf00      	nop
        }
      } while (v);
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1b0      	bne.n	80059ae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005a5e:	d912      	bls.n	8005a86 <_VPrintTarget+0x13a>
 8005a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a64:	2b39      	cmp	r3, #57	; 0x39
 8005a66:	d80e      	bhi.n	8005a86 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a7e:	4413      	add	r3, r2
 8005a80:	3b30      	subs	r3, #48	; 0x30
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005a84:	e7e4      	b.n	8005a50 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005a86:	2300      	movs	r3, #0
 8005a88:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005a92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a96:	2b2e      	cmp	r3, #46	; 0x2e
 8005a98:	d11d      	bne.n	8005ad6 <_VPrintTarget+0x18a>
        sFormat++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aac:	2b2f      	cmp	r3, #47	; 0x2f
 8005aae:	d912      	bls.n	8005ad6 <_VPrintTarget+0x18a>
 8005ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab4:	2b39      	cmp	r3, #57	; 0x39
 8005ab6:	d80e      	bhi.n	8005ad6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ace:	4413      	add	r3, r2
 8005ad0:	3b30      	subs	r3, #48	; 0x30
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005ad4:	e7e4      	b.n	8005aa0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae2:	2b6c      	cmp	r3, #108	; 0x6c
 8005ae4:	d003      	beq.n	8005aee <_VPrintTarget+0x1a2>
 8005ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aea:	2b68      	cmp	r3, #104	; 0x68
 8005aec:	d107      	bne.n	8005afe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005afc:	e7ef      	b.n	8005ade <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b02:	2b25      	cmp	r3, #37	; 0x25
 8005b04:	f000 80b3 	beq.w	8005c6e <_VPrintTarget+0x322>
 8005b08:	2b25      	cmp	r3, #37	; 0x25
 8005b0a:	f2c0 80b7 	blt.w	8005c7c <_VPrintTarget+0x330>
 8005b0e:	2b78      	cmp	r3, #120	; 0x78
 8005b10:	f300 80b4 	bgt.w	8005c7c <_VPrintTarget+0x330>
 8005b14:	2b58      	cmp	r3, #88	; 0x58
 8005b16:	f2c0 80b1 	blt.w	8005c7c <_VPrintTarget+0x330>
 8005b1a:	3b58      	subs	r3, #88	; 0x58
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	f200 80ad 	bhi.w	8005c7c <_VPrintTarget+0x330>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <_VPrintTarget+0x1dc>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005c1f 	.word	0x08005c1f
 8005b2c:	08005c7d 	.word	0x08005c7d
 8005b30:	08005c7d 	.word	0x08005c7d
 8005b34:	08005c7d 	.word	0x08005c7d
 8005b38:	08005c7d 	.word	0x08005c7d
 8005b3c:	08005c7d 	.word	0x08005c7d
 8005b40:	08005c7d 	.word	0x08005c7d
 8005b44:	08005c7d 	.word	0x08005c7d
 8005b48:	08005c7d 	.word	0x08005c7d
 8005b4c:	08005c7d 	.word	0x08005c7d
 8005b50:	08005c7d 	.word	0x08005c7d
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bd3 	.word	0x08005bd3
 8005b5c:	08005c7d 	.word	0x08005c7d
 8005b60:	08005c7d 	.word	0x08005c7d
 8005b64:	08005c7d 	.word	0x08005c7d
 8005b68:	08005c7d 	.word	0x08005c7d
 8005b6c:	08005c7d 	.word	0x08005c7d
 8005b70:	08005c7d 	.word	0x08005c7d
 8005b74:	08005c7d 	.word	0x08005c7d
 8005b78:	08005c7d 	.word	0x08005c7d
 8005b7c:	08005c7d 	.word	0x08005c7d
 8005b80:	08005c7d 	.word	0x08005c7d
 8005b84:	08005c7d 	.word	0x08005c7d
 8005b88:	08005c49 	.word	0x08005c49
 8005b8c:	08005c7d 	.word	0x08005c7d
 8005b90:	08005c7d 	.word	0x08005c7d
 8005b94:	08005c7d 	.word	0x08005c7d
 8005b98:	08005c7d 	.word	0x08005c7d
 8005b9c:	08005bf9 	.word	0x08005bf9
 8005ba0:	08005c7d 	.word	0x08005c7d
 8005ba4:	08005c7d 	.word	0x08005c7d
 8005ba8:	08005c1f 	.word	0x08005c1f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005bc0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fd1c 	bl	8005608 <_StoreChar>
        break;
 8005bd0:	e055      	b.n	8005c7e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6011      	str	r1, [r2, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005be0:	f107 0014 	add.w	r0, r7, #20
 8005be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	220a      	movs	r2, #10
 8005bf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bf2:	f7ff fe1b 	bl	800582c <_PrintInt>
        break;
 8005bf6:	e042      	b.n	8005c7e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	1d19      	adds	r1, r3, #4
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6011      	str	r1, [r2, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c08:	f107 0014 	add.w	r0, r7, #20
 8005c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	220a      	movs	r2, #10
 8005c18:	f7ff fd72 	bl	8005700 <_PrintUnsigned>
        break;
 8005c1c:	e02f      	b.n	8005c7e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1d19      	adds	r1, r3, #4
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6011      	str	r1, [r2, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c2e:	f107 0014 	add.w	r0, r7, #20
 8005c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	f7ff fd5f 	bl	8005700 <_PrintUnsigned>
        break;
 8005c42:	e01c      	b.n	8005c7e <_VPrintTarget+0x332>
 8005c44:	20014284 	.word	0x20014284
      case 'p':
        v = va_arg(*pParamList, int);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1d19      	adds	r1, r3, #4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c58:	f107 0014 	add.w	r0, r7, #20
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	2308      	movs	r3, #8
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2308      	movs	r3, #8
 8005c66:	2210      	movs	r2, #16
 8005c68:	f7ff fd4a 	bl	8005700 <_PrintUnsigned>
        break;
 8005c6c:	e007      	b.n	8005c7e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2125      	movs	r1, #37	; 0x25
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fcc7 	bl	8005608 <_StoreChar>
        break;
 8005c7a:	e000      	b.n	8005c7e <_VPrintTarget+0x332>
      default:
        break;
 8005c7c:	bf00      	nop
      }
      sFormat++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e007      	b.n	8005c96 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005c86:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fcb9 	bl	8005608 <_StoreChar>
    }
  } while (*sFormat);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f47f ae72 	bne.w	8005984 <_VPrintTarget+0x38>
 8005ca0:	e000      	b.n	8005ca4 <_VPrintTarget+0x358>
      break;
 8005ca2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d041      	beq.n	8005d2e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cba:	e00b      	b.n	8005cd4 <_VPrintTarget+0x388>
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	6439      	str	r1, [r7, #64]	; 0x40
 8005cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <_VPrintTarget+0x370>
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	643a      	str	r2, [r7, #64]	; 0x40
 8005ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cee:	2300      	movs	r3, #0
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	e00b      	b.n	8005d0c <_VPrintTarget+0x3c0>
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	09db      	lsrs	r3, r3, #7
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d10:	d8f0      	bhi.n	8005cf4 <_VPrintTarget+0x3a8>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	221a      	movs	r2, #26
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fb87 	bl	800543c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005d34:	bf00      	nop
 8005d36:	3758      	adds	r7, #88	; 0x58
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d50:	4917      	ldr	r1, [pc, #92]	; (8005db0 <SEGGER_SYSVIEW_Init+0x74>)
 8005d52:	4818      	ldr	r0, [pc, #96]	; (8005db4 <SEGGER_SYSVIEW_Init+0x78>)
 8005d54:	f7ff f940 	bl	8004fd8 <SEGGER_RTT_AllocUpBuffer>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b16      	ldr	r3, [pc, #88]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d5e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d62:	785a      	ldrb	r2, [r3, #1]
 8005d64:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d66:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d6a:	7e1b      	ldrb	r3, [r3, #24]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	2308      	movs	r3, #8
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <SEGGER_SYSVIEW_Init+0x80>)
 8005d76:	490f      	ldr	r1, [pc, #60]	; (8005db4 <SEGGER_SYSVIEW_Init+0x78>)
 8005d78:	f7ff f9b2 	bl	80050e0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <SEGGER_SYSVIEW_Init+0x84>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d88:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005d90:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005d96:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005d9c:	4a06      	ldr	r2, [pc, #24]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	2001324c 	.word	0x2001324c
 8005db4:	08006f28 	.word	0x08006f28
 8005db8:	20014254 	.word	0x20014254
 8005dbc:	2001424c 	.word	0x2001424c
 8005dc0:	e0001004 	.word	0xe0001004

08005dc4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005dcc:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6113      	str	r3, [r2, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20014254 	.word	0x20014254

08005de4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dec:	f3ef 8311 	mrs	r3, BASEPRI
 8005df0:	f04f 0120 	mov.w	r1, #32
 8005df4:	f381 8811 	msr	BASEPRI, r1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	4808      	ldr	r0, [pc, #32]	; (8005e1c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005dfc:	f7ff fa2d 	bl	800525a <_PreparePacket>
 8005e00:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68b8      	ldr	r0, [r7, #8]
 8005e08:	f7ff fb18 	bl	800543c <_SendPacket>
  RECORD_END();
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f383 8811 	msr	BASEPRI, r3
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20014284 	.word	0x20014284

08005e20 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2e:	f04f 0120 	mov.w	r1, #32
 8005e32:	f381 8811 	msr	BASEPRI, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	4816      	ldr	r0, [pc, #88]	; (8005e94 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005e3a:	f7ff fa0e 	bl	800525a <_PreparePacket>
 8005e3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e00b      	b.n	8005e66 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	61f9      	str	r1, [r7, #28]
 8005e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6a:	d8f0      	bhi.n	8005e4e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	61fa      	str	r2, [r7, #28]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	6938      	ldr	r0, [r7, #16]
 8005e82:	f7ff fadb 	bl	800543c <_SendPacket>
  RECORD_END();
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f383 8811 	msr	BASEPRI, r3
}
 8005e8c:	bf00      	nop
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20014284 	.word	0x20014284

08005e98 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08c      	sub	sp, #48	; 0x30
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	f04f 0120 	mov.w	r1, #32
 8005eac:	f381 8811 	msr	BASEPRI, r1
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	4825      	ldr	r0, [pc, #148]	; (8005f48 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005eb4:	f7ff f9d1 	bl	800525a <_PreparePacket>
 8005eb8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	e00b      	b.n	8005ee0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	09db      	lsrs	r3, r3, #7
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee4:	d8f0      	bhi.n	8005ec8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	e00b      	b.n	8005f18 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	6279      	str	r1, [r7, #36]	; 0x24
 8005f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	09db      	lsrs	r3, r3, #7
 8005f16:	623b      	str	r3, [r7, #32]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1c:	d8f0      	bhi.n	8005f00 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	627a      	str	r2, [r7, #36]	; 0x24
 8005f24:	6a3a      	ldr	r2, [r7, #32]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f7ff fa82 	bl	800543c <_SendPacket>
  RECORD_END();
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
 8005f40:	3730      	adds	r7, #48	; 0x30
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20014284 	.word	0x20014284

08005f4c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5e:	f04f 0120 	mov.w	r1, #32
 8005f62:	f381 8811 	msr	BASEPRI, r1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	4832      	ldr	r0, [pc, #200]	; (8006034 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005f6a:	f7ff f976 	bl	800525a <_PreparePacket>
 8005f6e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	e00b      	b.n	8005f96 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	1c59      	adds	r1, r3, #1
 8005f86:	6379      	str	r1, [r7, #52]	; 0x34
 8005f88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	09db      	lsrs	r3, r3, #7
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9a:	d8f0      	bhi.n	8005f7e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	637a      	str	r2, [r7, #52]	; 0x34
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	e00b      	b.n	8005fce <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	09db      	lsrs	r3, r3, #7
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd2:	d8f0      	bhi.n	8005fb6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	e00b      	b.n	8006006 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	09db      	lsrs	r3, r3, #7
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	2b7f      	cmp	r3, #127	; 0x7f
 800600a:	d8f0      	bhi.n	8005fee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	627a      	str	r2, [r7, #36]	; 0x24
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	6979      	ldr	r1, [r7, #20]
 8006020:	69b8      	ldr	r0, [r7, #24]
 8006022:	f7ff fa0b 	bl	800543c <_SendPacket>
  RECORD_END();
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f383 8811 	msr	BASEPRI, r3
}
 800602c:	bf00      	nop
 800602e:	3738      	adds	r7, #56	; 0x38
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20014284 	.word	0x20014284

08006038 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b090      	sub	sp, #64	; 0x40
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006046:	f3ef 8311 	mrs	r3, BASEPRI
 800604a:	f04f 0120 	mov.w	r1, #32
 800604e:	f381 8811 	msr	BASEPRI, r1
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	4840      	ldr	r0, [pc, #256]	; (8006158 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006056:	f7ff f900 	bl	800525a <_PreparePacket>
 800605a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
 8006068:	e00b      	b.n	8006082 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	09db      	lsrs	r3, r3, #7
 8006080:	63bb      	str	r3, [r7, #56]	; 0x38
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b7f      	cmp	r3, #127	; 0x7f
 8006086:	d8f0      	bhi.n	800606a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800608e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
 80060a0:	e00b      	b.n	80060ba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	6379      	str	r1, [r7, #52]	; 0x34
 80060ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	09db      	lsrs	r3, r3, #7
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b7f      	cmp	r3, #127	; 0x7f
 80060be:	d8f0      	bhi.n	80060a2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	637a      	str	r2, [r7, #52]	; 0x34
 80060c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d8:	e00b      	b.n	80060f2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	1c59      	adds	r1, r3, #1
 80060e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	09db      	lsrs	r3, r3, #7
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	2b7f      	cmp	r3, #127	; 0x7f
 80060f6:	d8f0      	bhi.n	80060da <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	6279      	str	r1, [r7, #36]	; 0x24
 800611c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	2b7f      	cmp	r3, #127	; 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	627a      	str	r2, [r7, #36]	; 0x24
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	69b8      	ldr	r0, [r7, #24]
 8006146:	f7ff f979 	bl	800543c <_SendPacket>
  RECORD_END();
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
 8006152:	3740      	adds	r7, #64	; 0x40
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20014284 	.word	0x20014284

0800615c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b08c      	sub	sp, #48	; 0x30
 8006160:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006162:	4b58      	ldr	r3, [pc, #352]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006164:	2201      	movs	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006168:	f3ef 8311 	mrs	r3, BASEPRI
 800616c:	f04f 0120 	mov.w	r1, #32
 8006170:	f381 8811 	msr	BASEPRI, r1
 8006174:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006176:	4b53      	ldr	r3, [pc, #332]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	220a      	movs	r2, #10
 800617c:	4952      	ldr	r1, [pc, #328]	; (80062c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa f826 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800618a:	200a      	movs	r0, #10
 800618c:	f7ff fe2a 	bl	8005de4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006190:	f3ef 8311 	mrs	r3, BASEPRI
 8006194:	f04f 0120 	mov.w	r1, #32
 8006198:	f381 8811 	msr	BASEPRI, r1
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	484b      	ldr	r0, [pc, #300]	; (80062cc <SEGGER_SYSVIEW_Start+0x170>)
 80061a0:	f7ff f85b 	bl	800525a <_PreparePacket>
 80061a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ae:	4b45      	ldr	r3, [pc, #276]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_Start+0x72>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	2b7f      	cmp	r3, #127	; 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_Start+0x5a>
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
 80061e8:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	623b      	str	r3, [r7, #32]
 80061ee:	e00b      	b.n	8006208 <SEGGER_SYSVIEW_Start+0xac>
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	6279      	str	r1, [r7, #36]	; 0x24
 80061fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	09db      	lsrs	r3, r3, #7
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b7f      	cmp	r3, #127	; 0x7f
 800620c:	d8f0      	bhi.n	80061f0 <SEGGER_SYSVIEW_Start+0x94>
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	627a      	str	r2, [r7, #36]	; 0x24
 8006214:	6a3a      	ldr	r2, [r7, #32]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	e00b      	b.n	8006242 <SEGGER_SYSVIEW_Start+0xe6>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	61f9      	str	r1, [r7, #28]
 8006234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	09db      	lsrs	r3, r3, #7
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d8f0      	bhi.n	800622a <SEGGER_SYSVIEW_Start+0xce>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	61fa      	str	r2, [r7, #28]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_Start+0x11e>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	6179      	str	r1, [r7, #20]
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_Start+0x106>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	617a      	str	r2, [r7, #20]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006290:	2218      	movs	r2, #24
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff f8d1 	bl	800543c <_SendPacket>
      RECORD_END();
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <SEGGER_SYSVIEW_Start+0x168>)
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80062ae:	f000 f9eb 	bl	8006688 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80062b2:	f000 f9b1 	bl	8006618 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80062b6:	f000 fc83 	bl	8006bc0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80062ba:	bf00      	nop
 80062bc:	3730      	adds	r7, #48	; 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20014254 	.word	0x20014254
 80062c8:	08006f50 	.word	0x08006f50
 80062cc:	20014284 	.word	0x20014284

080062d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062d6:	f3ef 8311 	mrs	r3, BASEPRI
 80062da:	f04f 0120 	mov.w	r1, #32
 80062de:	f381 8811 	msr	BASEPRI, r1
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	480b      	ldr	r0, [pc, #44]	; (8006314 <SEGGER_SYSVIEW_Stop+0x44>)
 80062e6:	f7fe ffb8 	bl	800525a <_PreparePacket>
 80062ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <SEGGER_SYSVIEW_Stop+0x48>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80062f4:	220b      	movs	r2, #11
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	f7ff f89f 	bl	800543c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <SEGGER_SYSVIEW_Stop+0x48>)
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f383 8811 	msr	BASEPRI, r3
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20014284 	.word	0x20014284
 8006318:	20014254 	.word	0x20014254

0800631c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	; 0x30
 8006320:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006322:	f3ef 8311 	mrs	r3, BASEPRI
 8006326:	f04f 0120 	mov.w	r1, #32
 800632a:	f381 8811 	msr	BASEPRI, r1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	4845      	ldr	r0, [pc, #276]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006332:	f7fe ff92 	bl	800525a <_PreparePacket>
 8006336:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006340:	4b42      	ldr	r3, [pc, #264]	; (800644c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
 8006346:	e00b      	b.n	8006360 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	09db      	lsrs	r3, r3, #7
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b7f      	cmp	r3, #127	; 0x7f
 8006364:	d8f0      	bhi.n	8006348 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
 800637a:	4b34      	ldr	r3, [pc, #208]	; (800644c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	e00b      	b.n	800639a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	6279      	str	r1, [r7, #36]	; 0x24
 800638c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2b7f      	cmp	r3, #127	; 0x7f
 800639e:	d8f0      	bhi.n	8006382 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	627a      	str	r2, [r7, #36]	; 0x24
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	e00b      	b.n	80063d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	1c59      	adds	r1, r3, #1
 80063c4:	61f9      	str	r1, [r7, #28]
 80063c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	09db      	lsrs	r3, r3, #7
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b7f      	cmp	r3, #127	; 0x7f
 80063d8:	d8f0      	bhi.n	80063bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6179      	str	r1, [r7, #20]
 80063fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	617a      	str	r2, [r7, #20]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006422:	2218      	movs	r2, #24
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	68b8      	ldr	r0, [r7, #8]
 8006428:	f7ff f808 	bl	800543c <_SendPacket>
  RECORD_END();
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800643a:	4b04      	ldr	r3, [pc, #16]	; (800644c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	4798      	blx	r3
  }
}
 8006440:	bf00      	nop
 8006442:	3730      	adds	r7, #48	; 0x30
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20014284 	.word	0x20014284
 800644c:	20014254 	.word	0x20014254

08006450 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b092      	sub	sp, #72	; 0x48
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006458:	f3ef 8311 	mrs	r3, BASEPRI
 800645c:	f04f 0120 	mov.w	r1, #32
 8006460:	f381 8811 	msr	BASEPRI, r1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	486a      	ldr	r0, [pc, #424]	; (8006610 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006468:	f7fe fef7 	bl	800525a <_PreparePacket>
 800646c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b66      	ldr	r3, [pc, #408]	; (8006614 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
 8006482:	e00b      	b.n	800649c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	6479      	str	r1, [r7, #68]	; 0x44
 800648e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	643b      	str	r3, [r7, #64]	; 0x40
 800649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d8f0      	bhi.n	8006484 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80064a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	647a      	str	r2, [r7, #68]	; 0x44
 80064a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80064bc:	e00b      	b.n	80064d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	09db      	lsrs	r3, r3, #7
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	2b7f      	cmp	r3, #127	; 0x7f
 80064da:	d8f0      	bhi.n	80064be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80064dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7fe fe63 	bl	80051c0 <_EncodeStr>
 80064fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80064fc:	2209      	movs	r2, #9
 80064fe:	68f9      	ldr	r1, [r7, #12]
 8006500:	6938      	ldr	r0, [r7, #16]
 8006502:	f7fe ff9b 	bl	800543c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b40      	ldr	r3, [pc, #256]	; (8006614 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
 800651a:	e00b      	b.n	8006534 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	6379      	str	r1, [r7, #52]	; 0x34
 8006526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	09db      	lsrs	r3, r3, #7
 8006532:	633b      	str	r3, [r7, #48]	; 0x30
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2b7f      	cmp	r3, #127	; 0x7f
 8006538:	d8f0      	bhi.n	800651c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	637a      	str	r2, [r7, #52]	; 0x34
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
 8006554:	e00b      	b.n	800656e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2b7f      	cmp	r3, #127	; 0x7f
 8006572:	d8f0      	bhi.n	8006556 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6279      	str	r1, [r7, #36]	; 0x24
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	623b      	str	r3, [r7, #32]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	627a      	str	r2, [r7, #36]	; 0x24
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e00b      	b.n	80065e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	61f9      	str	r1, [r7, #28]
 80065d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	09db      	lsrs	r3, r3, #7
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b7f      	cmp	r3, #127	; 0x7f
 80065e4:	d8f0      	bhi.n	80065c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	61fa      	str	r2, [r7, #28]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80065f6:	2215      	movs	r2, #21
 80065f8:	68f9      	ldr	r1, [r7, #12]
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f7fe ff1e 	bl	800543c <_SendPacket>
  RECORD_END();
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f383 8811 	msr	BASEPRI, r3
}
 8006606:	bf00      	nop
 8006608:	3748      	adds	r7, #72	; 0x48
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20014284 	.word	0x20014284
 8006614:	20014254 	.word	0x20014254

08006618 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800662e:	4b03      	ldr	r3, [pc, #12]	; (800663c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4798      	blx	r3
  }
}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20014254 	.word	0x20014254

08006640 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006648:	f3ef 8311 	mrs	r3, BASEPRI
 800664c:	f04f 0120 	mov.w	r1, #32
 8006650:	f381 8811 	msr	BASEPRI, r1
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	480b      	ldr	r0, [pc, #44]	; (8006684 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006658:	f7fe fdff 	bl	800525a <_PreparePacket>
 800665c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	6938      	ldr	r0, [r7, #16]
 8006664:	f7fe fdac 	bl	80051c0 <_EncodeStr>
 8006668:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800666a:	220e      	movs	r2, #14
 800666c:	68f9      	ldr	r1, [r7, #12]
 800666e:	6938      	ldr	r0, [r7, #16]
 8006670:	f7fe fee4 	bl	800543c <_SendPacket>
  RECORD_END();
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f383 8811 	msr	BASEPRI, r3
}
 800667a:	bf00      	nop
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20014284 	.word	0x20014284

08006688 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800668e:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01a      	beq.n	80066cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80066a0:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4798      	blx	r3
 80066a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80066ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	000a      	movs	r2, r1
 80066bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066be:	4613      	mov	r3, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4621      	mov	r1, r4
 80066c4:	200d      	movs	r0, #13
 80066c6:	f7ff fbe7 	bl	8005e98 <SEGGER_SYSVIEW_RecordU32x2>
 80066ca:	e006      	b.n	80066da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	200c      	movs	r0, #12
 80066d4:	f7ff fba4 	bl	8005e20 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20014254 	.word	0x20014254
 80066e8:	e0001004 	.word	0xe0001004

080066ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f2:	f3ef 8311 	mrs	r3, BASEPRI
 80066f6:	f04f 0120 	mov.w	r1, #32
 80066fa:	f381 8811 	msr	BASEPRI, r1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4819      	ldr	r0, [pc, #100]	; (8006768 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006702:	f7fe fdaa 	bl	800525a <_PreparePacket>
 8006706:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800670c:	4b17      	ldr	r3, [pc, #92]	; (800676c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006714:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	e00b      	b.n	8006738 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	b2da      	uxtb	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	1c59      	adds	r1, r3, #1
 8006728:	6179      	str	r1, [r7, #20]
 800672a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b7f      	cmp	r3, #127	; 0x7f
 800673c:	d8f0      	bhi.n	8006720 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	617a      	str	r2, [r7, #20]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800674e:	2202      	movs	r2, #2
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	68b8      	ldr	r0, [r7, #8]
 8006754:	f7fe fe72 	bl	800543c <_SendPacket>
  RECORD_END();
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f383 8811 	msr	BASEPRI, r3
}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20014284 	.word	0x20014284
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006776:	f3ef 8311 	mrs	r3, BASEPRI
 800677a:	f04f 0120 	mov.w	r1, #32
 800677e:	f381 8811 	msr	BASEPRI, r1
 8006782:	607b      	str	r3, [r7, #4]
 8006784:	4807      	ldr	r0, [pc, #28]	; (80067a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006786:	f7fe fd68 	bl	800525a <_PreparePacket>
 800678a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800678c:	2203      	movs	r2, #3
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6838      	ldr	r0, [r7, #0]
 8006792:	f7fe fe53 	bl	800543c <_SendPacket>
  RECORD_END();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f383 8811 	msr	BASEPRI, r3
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20014284 	.word	0x20014284

080067a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067ae:	f3ef 8311 	mrs	r3, BASEPRI
 80067b2:	f04f 0120 	mov.w	r1, #32
 80067b6:	f381 8811 	msr	BASEPRI, r1
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	4807      	ldr	r0, [pc, #28]	; (80067dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80067be:	f7fe fd4c 	bl	800525a <_PreparePacket>
 80067c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80067c4:	2212      	movs	r2, #18
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6838      	ldr	r0, [r7, #0]
 80067ca:	f7fe fe37 	bl	800543c <_SendPacket>
  RECORD_END();
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f383 8811 	msr	BASEPRI, r3
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20014284 	.word	0x20014284

080067e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067e6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ea:	f04f 0120 	mov.w	r1, #32
 80067ee:	f381 8811 	msr	BASEPRI, r1
 80067f2:	607b      	str	r3, [r7, #4]
 80067f4:	4807      	ldr	r0, [pc, #28]	; (8006814 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067f6:	f7fe fd30 	bl	800525a <_PreparePacket>
 80067fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067fc:	2211      	movs	r2, #17
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	f7fe fe1b 	bl	800543c <_SendPacket>
  RECORD_END();
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f383 8811 	msr	BASEPRI, r3
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20014284 	.word	0x20014284

08006818 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006820:	f3ef 8311 	mrs	r3, BASEPRI
 8006824:	f04f 0120 	mov.w	r1, #32
 8006828:	f381 8811 	msr	BASEPRI, r1
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	4819      	ldr	r0, [pc, #100]	; (8006894 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006830:	f7fe fd13 	bl	800525a <_PreparePacket>
 8006834:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800683a:	4b17      	ldr	r3, [pc, #92]	; (8006898 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e00b      	b.n	8006866 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	61f9      	str	r1, [r7, #28]
 8006858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b7f      	cmp	r3, #127	; 0x7f
 800686a:	d8f0      	bhi.n	800684e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	61fa      	str	r2, [r7, #28]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800687c:	2208      	movs	r2, #8
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	6938      	ldr	r0, [r7, #16]
 8006882:	f7fe fddb 	bl	800543c <_SendPacket>
  RECORD_END();
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f383 8811 	msr	BASEPRI, r3
}
 800688c:	bf00      	nop
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20014284 	.word	0x20014284
 8006898:	20014254 	.word	0x20014254

0800689c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068a4:	f3ef 8311 	mrs	r3, BASEPRI
 80068a8:	f04f 0120 	mov.w	r1, #32
 80068ac:	f381 8811 	msr	BASEPRI, r1
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	4819      	ldr	r0, [pc, #100]	; (8006918 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068b4:	f7fe fcd1 	bl	800525a <_PreparePacket>
 80068b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	61f9      	str	r1, [r7, #28]
 80068dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b7f      	cmp	r3, #127	; 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	61fa      	str	r2, [r7, #28]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006900:	2204      	movs	r2, #4
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	6938      	ldr	r0, [r7, #16]
 8006906:	f7fe fd99 	bl	800543c <_SendPacket>
  RECORD_END();
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f383 8811 	msr	BASEPRI, r3
}
 8006910:	bf00      	nop
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20014284 	.word	0x20014284
 800691c:	20014254 	.word	0x20014254

08006920 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006928:	f3ef 8311 	mrs	r3, BASEPRI
 800692c:	f04f 0120 	mov.w	r1, #32
 8006930:	f381 8811 	msr	BASEPRI, r1
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	4819      	ldr	r0, [pc, #100]	; (800699c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006938:	f7fe fc8f 	bl	800525a <_PreparePacket>
 800693c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	e00b      	b.n	800696e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	61f9      	str	r1, [r7, #28]
 8006960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	09db      	lsrs	r3, r3, #7
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b7f      	cmp	r3, #127	; 0x7f
 8006972:	d8f0      	bhi.n	8006956 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	61fa      	str	r2, [r7, #28]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006984:	2206      	movs	r2, #6
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	6938      	ldr	r0, [r7, #16]
 800698a:	f7fe fd57 	bl	800543c <_SendPacket>
  RECORD_END();
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f383 8811 	msr	BASEPRI, r3
}
 8006994:	bf00      	nop
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20014284 	.word	0x20014284
 80069a0:	20014254 	.word	0x20014254

080069a4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069ae:	f3ef 8311 	mrs	r3, BASEPRI
 80069b2:	f04f 0120 	mov.w	r1, #32
 80069b6:	f381 8811 	msr	BASEPRI, r1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	4827      	ldr	r0, [pc, #156]	; (8006a5c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80069be:	f7fe fc4c 	bl	800525a <_PreparePacket>
 80069c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6279      	str	r1, [r7, #36]	; 0x24
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e00b      	b.n	8006a2c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	61f9      	str	r1, [r7, #28]
 8006a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	09db      	lsrs	r3, r3, #7
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a30:	d8f0      	bhi.n	8006a14 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	61fa      	str	r2, [r7, #28]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006a42:	2207      	movs	r2, #7
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f7fe fcf8 	bl	800543c <_SendPacket>
  RECORD_END();
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f383 8811 	msr	BASEPRI, r3
}
 8006a52:	bf00      	nop
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20014284 	.word	0x20014284
 8006a60:	20014254 	.word	0x20014254

08006a64 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a6c:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	1ad3      	subs	r3, r2, r3
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20014254 	.word	0x20014254

08006a84 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	; 0x30
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a8e:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d06d      	beq.n	8006b72 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa0:	e008      	b.n	8006ab4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3f2      	bcc.n	8006aa2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006abc:	e000      	b.n	8006ac0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006abe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d055      	beq.n	8006b72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aca:	f04f 0120 	mov.w	r1, #32
 8006ace:	f381 8811 	msr	BASEPRI, r1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	482a      	ldr	r0, [pc, #168]	; (8006b80 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ad6:	f7fe fbc0 	bl	800525a <_PreparePacket>
 8006ada:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	e00b      	b.n	8006b02 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	6279      	str	r1, [r7, #36]	; 0x24
 8006af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	09db      	lsrs	r3, r3, #7
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b7f      	cmp	r3, #127	; 0x7f
 8006b06:	d8f0      	bhi.n	8006aea <SEGGER_SYSVIEW_SendModule+0x66>
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e00b      	b.n	8006b3c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	61f9      	str	r1, [r7, #28]
 8006b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	09db      	lsrs	r3, r3, #7
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b40:	d8f0      	bhi.n	8006b24 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2280      	movs	r2, #128	; 0x80
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fe fb30 	bl	80051c0 <_EncodeStr>
 8006b60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b62:	2216      	movs	r2, #22
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f7fe fc68 	bl	800543c <_SendPacket>
      RECORD_END();
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	; 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	2001427c 	.word	0x2001427c
 8006b80:	20014284 	.word	0x20014284

08006b84 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f2      	bne.n	8006b98 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2001427c 	.word	0x2001427c

08006bc0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bca:	f04f 0120 	mov.w	r1, #32
 8006bce:	f381 8811 	msr	BASEPRI, r1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	4817      	ldr	r0, [pc, #92]	; (8006c34 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006bd6:	f7fe fb40 	bl	800525a <_PreparePacket>
 8006bda:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	6179      	str	r1, [r7, #20]
 8006bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	617a      	str	r2, [r7, #20]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c1a:	221b      	movs	r2, #27
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f7fe fc0c 	bl	800543c <_SendPacket>
  RECORD_END();
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f383 8811 	msr	BASEPRI, r3
}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20014284 	.word	0x20014284
 8006c38:	20014280 	.word	0x20014280

08006c3c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c3c:	b40f      	push	{r0, r1, r2, r3}
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7fe fe7b 	bl	800594c <_VPrintTarget>
  va_end(ParamList);
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c60:	b004      	add	sp, #16
 8006c62:	4770      	bx	lr

08006c64 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c70:	f04f 0120 	mov.w	r1, #32
 8006c74:	f381 8811 	msr	BASEPRI, r1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	4827      	ldr	r0, [pc, #156]	; (8006d18 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c7c:	f7fe faed 	bl	800525a <_PreparePacket>
 8006c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c82:	2280      	movs	r2, #128	; 0x80
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	6938      	ldr	r0, [r7, #16]
 8006c88:	f7fe fa9a 	bl	80051c0 <_EncodeStr>
 8006c8c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	2301      	movs	r3, #1
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_Warn+0x34>
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	627a      	str	r2, [r7, #36]	; 0x24
 8006cbc:	6a3a      	ldr	r2, [r7, #32]
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	e00b      	b.n	8006ce8 <SEGGER_SYSVIEW_Warn+0x84>
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	1c59      	adds	r1, r3, #1
 8006cd8:	61f9      	str	r1, [r7, #28]
 8006cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	09db      	lsrs	r3, r3, #7
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b7f      	cmp	r3, #127	; 0x7f
 8006cec:	d8f0      	bhi.n	8006cd0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	61fa      	str	r2, [r7, #28]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cfe:	221a      	movs	r2, #26
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	6938      	ldr	r0, [r7, #16]
 8006d04:	f7fe fb9a 	bl	800543c <_SendPacket>
  RECORD_END();
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
 8006d10:	3728      	adds	r7, #40	; 0x28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20014284 	.word	0x20014284

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4d0d      	ldr	r5, [pc, #52]	; (8006d54 <__libc_init_array+0x38>)
 8006d20:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	2600      	movs	r6, #0
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	4d0b      	ldr	r5, [pc, #44]	; (8006d5c <__libc_init_array+0x40>)
 8006d2e:	4c0c      	ldr	r4, [pc, #48]	; (8006d60 <__libc_init_array+0x44>)
 8006d30:	f000 f83c 	bl	8006dac <_init>
 8006d34:	1b64      	subs	r4, r4, r5
 8006d36:	10a4      	asrs	r4, r4, #2
 8006d38:	2600      	movs	r6, #0
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	08006f74 	.word	0x08006f74
 8006d58:	08006f74 	.word	0x08006f74
 8006d5c:	08006f74 	.word	0x08006f74
 8006d60:	08006f78 	.word	0x08006f78

08006d64 <memcmp>:
 8006d64:	b530      	push	{r4, r5, lr}
 8006d66:	3901      	subs	r1, #1
 8006d68:	2400      	movs	r4, #0
 8006d6a:	42a2      	cmp	r2, r4
 8006d6c:	d101      	bne.n	8006d72 <memcmp+0xe>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e005      	b.n	8006d7e <memcmp+0x1a>
 8006d72:	5d03      	ldrb	r3, [r0, r4]
 8006d74:	3401      	adds	r4, #1
 8006d76:	5d0d      	ldrb	r5, [r1, r4]
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	d0f6      	beq.n	8006d6a <memcmp+0x6>
 8006d7c:	1b58      	subs	r0, r3, r5
 8006d7e:	bd30      	pop	{r4, r5, pc}

08006d80 <memcpy>:
 8006d80:	440a      	add	r2, r1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d88:	d100      	bne.n	8006d8c <memcpy+0xc>
 8006d8a:	4770      	bx	lr
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d96:	4291      	cmp	r1, r2
 8006d98:	d1f9      	bne.n	8006d8e <memcpy+0xe>
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <memset>:
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
