
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a18  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bd8  08000bd8  00010be0  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd8  08000bd8  00010be0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd8  08000be0  00010be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd8  08000bd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bdc  08000bdc  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010be0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018bd  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000441  00000000  00000000  000124cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00012a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020a1  00000000  00000000  00012b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015bc  00000000  00000000  00014bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009502  00000000  00000000  00016195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001f697  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003fc  00000000  00000000  0001f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ba8 	.word	0x08000ba8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ba8 	.word	0x08000ba8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PCLK_Control>:

#include "stm32f407xx_gpio_driver.h"


void GPIO_PCLK_Control(GPIO_RegDef_t *pGPIOx, uint8_t En_Or_Di)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(En_Or_Di == ENABLE){
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PCLK_Control+0xd8>
		if(pGPIOx==GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PCLK_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx==GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		if(pGPIOx==GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PCLK_Control+0xee>
			GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOB)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PCLK_Control+0x104>
			GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PCLK_Control+0x11a>
			GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOD)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PCLK_Control+0x130>
			GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PCLK_Control+0x146>
			GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PCLK_Control+0x15c>
			GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PCLK_Control+0x172>
			GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PCLK_Control+0x188>
			GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		}else if(pGPIOx==GPIOI)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:


//GPOI Init DeInit

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	//enable peri clk
	GPIO_PCLK_Control(pGPIOHandle->pGPIOx, ENABLE);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2101      	movs	r1, #1
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff0e 	bl	80001f8 <GPIO_PCLK_Control>
	uint32_t temp=0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d822      	bhi.n	800042e <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	e062      	b.n	80004f4 <GPIO_Init+0x12c>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	795b      	ldrb	r3, [r3, #5]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d117      	bne.n	8000466 <GPIO_Init+0x9e>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000436:	4b7f      	ldr	r3, [pc, #508]	; (8000634 <GPIO_Init+0x26c>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	4611      	mov	r1, r2
 8000446:	4a7b      	ldr	r2, [pc, #492]	; (8000634 <GPIO_Init+0x26c>)
 8000448:	430b      	orrs	r3, r1
 800044a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044c:	4b79      	ldr	r3, [pc, #484]	; (8000634 <GPIO_Init+0x26c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7912      	ldrb	r2, [r2, #4]
 8000454:	4611      	mov	r1, r2
 8000456:	2201      	movs	r2, #1
 8000458:	408a      	lsls	r2, r1
 800045a:	43d2      	mvns	r2, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a75      	ldr	r2, [pc, #468]	; (8000634 <GPIO_Init+0x26c>)
 8000460:	400b      	ands	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
 8000464:	e035      	b.n	80004d2 <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	2b05      	cmp	r3, #5
 800046c:	d117      	bne.n	800049e <GPIO_Init+0xd6>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046e:	4b71      	ldr	r3, [pc, #452]	; (8000634 <GPIO_Init+0x26c>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4611      	mov	r1, r2
 800047e:	4a6d      	ldr	r2, [pc, #436]	; (8000634 <GPIO_Init+0x26c>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	4b6b      	ldr	r3, [pc, #428]	; (8000634 <GPIO_Init+0x26c>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	43d2      	mvns	r2, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a67      	ldr	r2, [pc, #412]	; (8000634 <GPIO_Init+0x26c>)
 8000498:	400b      	ands	r3, r1
 800049a:	60d3      	str	r3, [r2, #12]
 800049c:	e019      	b.n	80004d2 <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d115      	bne.n	80004d2 <GPIO_Init+0x10a>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b63      	ldr	r3, [pc, #396]	; (8000634 <GPIO_Init+0x26c>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a5f      	ldr	r2, [pc, #380]	; (8000634 <GPIO_Init+0x26c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b5d      	ldr	r3, [pc, #372]	; (8000634 <GPIO_Init+0x26c>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a59      	ldr	r2, [pc, #356]	; (8000634 <GPIO_Init+0x26c>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6093      	str	r3, [r2, #8]
		}
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d2:	4b58      	ldr	r3, [pc, #352]	; (8000634 <GPIO_Init+0x26c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a54      	ldr	r2, [pc, #336]	; (8000634 <GPIO_Init+0x26c>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	6013      	str	r3, [r2, #0]
		SYSCFG_PCLK_EN();
 80004e8:	4b53      	ldr	r3, [pc, #332]	; (8000638 <GPIO_Init+0x270>)
 80004ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ec:	4a52      	ldr	r2, [pc, #328]	; (8000638 <GPIO_Init+0x270>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f2:	6453      	str	r3, [r2, #68]	; 0x44

	}
	temp = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	799b      	ldrb	r3, [r3, #6]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6899      	ldr	r1, [r3, #8]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	430a      	orrs	r2, r1
 8000536:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	79db      	ldrb	r3, [r3, #7]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68d9      	ldr	r1, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	430a      	orrs	r2, r1
 800057a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOptType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7a1b      	ldrb	r3, [r3, #8]
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	4619      	mov	r1, r3
 800059c:	2301      	movs	r3, #1
 800059e:	408b      	lsls	r3, r1
 80005a0:	43db      	mvns	r3, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	400a      	ands	r2, r1
 80005aa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6859      	ldr	r1, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d132      	bne.n	800062a <GPIO_Init+0x262>
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	08db      	lsrs	r3, r3, #3
 80005ca:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	7afa      	ldrb	r2, [r7, #11]
 80005dc:	3208      	adds	r2, #8
 80005de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	220f      	movs	r2, #15
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7afa      	ldrb	r2, [r7, #11]
 80005f8:	4001      	ands	r1, r0
 80005fa:	3208      	adds	r2, #8
 80005fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	7afa      	ldrb	r2, [r7, #11]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a5b      	ldrb	r3, [r3, #9]
 8000610:	461a      	mov	r2, r3
 8000612:	7abb      	ldrb	r3, [r7, #10]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	7afa      	ldrb	r2, [r7, #11]
 8000622:	4301      	orrs	r1, r0
 8000624:	3208      	adds	r2, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}



}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40013c00 	.word	0x40013c00
 8000638:	40023800 	.word	0x40023800

0800063c <SPI_PCLK_Control>:



// init deinit
void SPI_PCLK_Control(SPI_RegDef_t *pSPIx, uint8_t En_Or_Di)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	if(En_Or_Di == ENABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d140      	bne.n	80006d0 <SPI_PCLK_Control+0x94>
	{
		if(pSPIx	==	SPI1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a44      	ldr	r2, [pc, #272]	; (8000764 <SPI_PCLK_Control+0x128>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <SPI_PCLK_Control+0x28>
		{
			SPI1_PCLK_EN();
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	4a43      	ldr	r2, [pc, #268]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800065c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000660:	6453      	str	r3, [r2, #68]	; 0x44
 8000662:	e035      	b.n	80006d0 <SPI_PCLK_Control+0x94>
		}
		else if(pSPIx	==	SPI2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <SPI_PCLK_Control+0x130>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <SPI_PCLK_Control+0x3e>
		{
			SPI2_PCLK_EN();
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	e02a      	b.n	80006d0 <SPI_PCLK_Control+0x94>
		}
		else if(pSPIx	==	SPI3)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a3c      	ldr	r2, [pc, #240]	; (8000770 <SPI_PCLK_Control+0x134>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <SPI_PCLK_Control+0x54>
		{
			SPI3_PCLK_EN();
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a38      	ldr	r2, [pc, #224]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	e01f      	b.n	80006d0 <SPI_PCLK_Control+0x94>
		}
		else if(pSPIx	==	SPI4)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a38      	ldr	r2, [pc, #224]	; (8000774 <SPI_PCLK_Control+0x138>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d106      	bne.n	80006a6 <SPI_PCLK_Control+0x6a>
		{
			SPI4_PCLK_EN();
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800069a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800069e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a2:	6453      	str	r3, [r2, #68]	; 0x44
 80006a4:	e014      	b.n	80006d0 <SPI_PCLK_Control+0x94>
		}
		else if(pSPIx	==	SPI5)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a33      	ldr	r2, [pc, #204]	; (8000778 <SPI_PCLK_Control+0x13c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <SPI_PCLK_Control+0x80>
		{
			SPI5_PCLK_EN();
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	e009      	b.n	80006d0 <SPI_PCLK_Control+0x94>
		}
		else if(pSPIx	==	SPI6)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <SPI_PCLK_Control+0x140>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d105      	bne.n	80006d0 <SPI_PCLK_Control+0x94>
		{
			SPI6_PCLK_EN();
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c8:	4a27      	ldr	r2, [pc, #156]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ce:	6453      	str	r3, [r2, #68]	; 0x44
		}
	}
	if(En_Or_Di == DISABLE)
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d140      	bne.n	8000758 <SPI_PCLK_Control+0x11c>
	{
		if(pSPIx	==	SPI1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SPI_PCLK_Control+0x128>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <SPI_PCLK_Control+0xb0>
		{
			SPI1_PCLK_DI();
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006e8:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx	==	SPI6)
		{
			SPI6_PCLK_DI();
		}
	}
}
 80006ea:	e035      	b.n	8000758 <SPI_PCLK_Control+0x11c>
		else if(pSPIx	==	SPI2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <SPI_PCLK_Control+0x130>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d106      	bne.n	8000702 <SPI_PCLK_Control+0xc6>
			SPI2_PCLK_DI();
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SPI_PCLK_Control+0x12c>)
 80006fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e02a      	b.n	8000758 <SPI_PCLK_Control+0x11c>
		else if(pSPIx	==	SPI3)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <SPI_PCLK_Control+0x134>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d106      	bne.n	8000718 <SPI_PCLK_Control+0xdc>
			SPI3_PCLK_DI();
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000716:	e01f      	b.n	8000758 <SPI_PCLK_Control+0x11c>
		else if(pSPIx	==	SPI4)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <SPI_PCLK_Control+0x138>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d106      	bne.n	800072e <SPI_PCLK_Control+0xf2>
			SPI4_PCLK_DI();
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800072a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800072c:	e014      	b.n	8000758 <SPI_PCLK_Control+0x11c>
		else if(pSPIx	==	SPI5)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <SPI_PCLK_Control+0x13c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <SPI_PCLK_Control+0x108>
			SPI5_PCLK_DI();
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800073c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000742:	e009      	b.n	8000758 <SPI_PCLK_Control+0x11c>
		else if(pSPIx	==	SPI6)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <SPI_PCLK_Control+0x140>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d105      	bne.n	8000758 <SPI_PCLK_Control+0x11c>
			SPI6_PCLK_DI();
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SPI_PCLK_Control+0x12c>)
 800074e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SPI_PCLK_Control+0x12c>)
 8000752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000756:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40013000 	.word	0x40013000
 8000768:	40023800 	.word	0x40023800
 800076c:	40003800 	.word	0x40003800
 8000770:	40003c00 	.word	0x40003c00
 8000774:	40013400 	.word	0x40013400
 8000778:	40015000 	.word	0x40015000
 800077c:	40015400 	.word	0x40015400

08000780 <SPI_Init>:
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	SPI_PCLK_Control(pSPIHandle->pSPIx, ENABLE);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff54 	bl	800063c <SPI_PCLK_Control>
	uint32_t temp =0;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
	//device mode
	temp |= pSPIHandle->SPI_Config.SPI_DviceMode << SPI_CR1_MSTR;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
	//bus config
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	795b      	ldrb	r3, [r3, #5]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d104      	bne.n	80007b8 <SPI_Init+0x38>
	{
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e021      	b.n	80007fc <SPI_Init+0x7c>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d104      	bne.n	80007ca <SPI_Init+0x4a>
	{
		temp |= (1<<SPI_CR1_BIDIMODE);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e018      	b.n	80007fc <SPI_Init+0x7c>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIPLEX_RX_ONLY)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	795b      	ldrb	r3, [r3, #5]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d108      	bne.n	80007e4 <SPI_Init+0x64>
	{
		temp &= (1<<SPI_CR1_BIDIMODE);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d8:	60fb      	str	r3, [r7, #12]
		temp &= ~(1<<SPI_CR1_BIDIOE);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e00b      	b.n	80007fc <SPI_Init+0x7c>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIPLEX_TX_ONLY)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d107      	bne.n	80007fc <SPI_Init+0x7c>
	{
		temp &= (~1<<SPI_CR1_BIDIMODE);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	0c1b      	lsrs	r3, r3, #16
 80007f0:	041b      	lsls	r3, r3, #16
 80007f2:	60fb      	str	r3, [r7, #12]
		temp &= (1<<SPI_CR1_BIDIOE);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	60fb      	str	r3, [r7, #12]
	}

	temp |= pSPIHandle->SPI_Config.SPI_SclkSpeed <<SPI_CR1_BR;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4313      	orrs	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPI_Config.SPI_DFF <<SPI_CR1_DFF;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	79db      	ldrb	r3, [r3, #7]
 800080e:	02db      	lsls	r3, r3, #11
 8000810:	461a      	mov	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPI_Config.SPI_CPOL <<SPI_CR1_CPOL;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a5b      	ldrb	r3, [r3, #9]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4313      	orrs	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPI_Config.SPI_CPHA <<SPI_CR1_CPHA;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a1b      	ldrb	r3, [r3, #8]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4313      	orrs	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPI_Config.SPI_SSM <<SPI_CR1_SSM;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a9b      	ldrb	r3, [r3, #10]
 8000836:	025b      	lsls	r3, r3, #9
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 |= temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]



}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <SPI_GetFlagStatus>:
void 		SPI_DeInit(SPI_RegDef_t *pSPIx);


uint8_t  SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SPI_SendData>:

//data RX TX

//this is blocking blocking// polling
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	while(Len >0)
 800088c:	e027      	b.n	80008de <SPI_SendData+0x5e>
	{
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 800088e:	bf00      	nop
 8000890:	2102      	movs	r1, #2
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff ffe0 	bl	8000858 <SPI_GetFlagStatus>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f8      	beq.n	8000890 <SPI_SendData+0x10>

		if((pSPIx->CR1 & (1<<SPI_CR1_DFF)))
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00e      	beq.n	80008c8 <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t*)(pTxBuffer));
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	60da      	str	r2, [r3, #12]
			Len--;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
			Len--;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3b01      	subs	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	e00a      	b.n	80008de <SPI_SendData+0x5e>
		}else
		{
			pSPIx->DR = *pTxBuffer;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	60da      	str	r2, [r3, #12]
			Len--;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	3301      	adds	r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
	while(Len >0)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1d4      	bne.n	800088e <SPI_SendData+0xe>
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <SPI_Peri_Control>:
		}
	}
}

void SPI_Peri_Control(SPI_RegDef_t *pSPIx, uint8_t En_Or_Di)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
	if(En_Or_Di == ENABLE)
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d106      	bne.n	800090e <SPI_Peri_Control+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800090c:	e005      	b.n	800091a <SPI_Peri_Control+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SPI_SSOE_Control>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOE_Control(SPI_RegDef_t *pSPIx, uint8_t En_Or_Di)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	70fb      	strb	r3, [r7, #3]
	if(En_Or_Di == ENABLE)
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d106      	bne.n	8000946 <SPI_SSOE_Control+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f043 0204 	orr.w	r2, r3, #4
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000944:	e005      	b.n	8000952 <SPI_SSOE_Control+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f023 0204 	bic.w	r2, r3, #4
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	605a      	str	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <SPI1_GPIOInit>:
#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx_spi_driver.h"


void SPI1_GPIOInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <SPI1_GPIOInit+0x54>)
 8000968:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800096a:	2302      	movs	r3, #2
 800096c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode= 5;
 800096e:	2305      	movs	r3, #5
 8000970:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000972:	2300      	movs	r3, #0
 8000974:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000976:	2302      	movs	r3, #2
 8000978:	72bb      	strb	r3, [r7, #10]

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_4;
 800097a:	2304      	movs	r3, #4
 800097c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fd21 	bl	80003c8 <GPIO_Init>
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_5;
 8000986:	2305      	movs	r3, #5
 8000988:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fd1b 	bl	80003c8 <GPIO_Init>
	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_6;
 8000992:	2306      	movs	r3, #6
 8000994:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd15 	bl	80003c8 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_7;
 800099e:	2307      	movs	r3, #7
 80009a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fd0f 	bl	80003c8 <GPIO_Init>

	//comment
	//more comments.
	//more and more comments

}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000

080009b8 <SPI1_Inits>:

void SPI1_Inits(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI1;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <SPI1_Inits+0x38>)
 80009c0:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80009c2:	2301      	movs	r3, #1
 80009c4:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_Config.SPI_DviceMode = SPI_DEVICE_MODE_MASTER;
 80009c6:	2301      	movs	r3, #1
 80009c8:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 80009ca:	2302      	movs	r3, #2
 80009cc:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 80009ce:	2300      	movs	r3, #0
 80009d0:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPOL_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_Config.SPI_CPOL= SPI_CPOL_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 80009da:	2300      	movs	r3, #0
 80009dc:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fecd 	bl	8000780 <SPI_Init>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40013000 	.word	0x40013000

080009f4 <SPI2_GPIOInit>:




void SPI2_GPIOInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SPI2_GPIOInit+0x58>)
 80009fc:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009fe:	2302      	movs	r3, #2
 8000a00:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode= 5;
 8000a02:	2305      	movs	r3, #5
 8000a04:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_13;
 8000a0e:	230d      	movs	r3, #13
 8000a10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcd7 	bl	80003c8 <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_12;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fcd1 	bl	80003c8 <GPIO_Init>


	//From port C

	SPIPins.pGPIOx = GPIOC;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SPI2_GPIOInit+0x5c>)
 8000a28:	607b      	str	r3, [r7, #4]

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fcc9 	bl	80003c8 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPOIO_PIN_NO_3;
 8000a36:	2303      	movs	r3, #3
 8000a38:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fcc3 	bl	80003c8 <GPIO_Init>


}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800

08000a54 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SPI2_Inits+0x38>)
 8000a5c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_Config.SPI_DviceMode = SPI_DEVICE_MODE_SLAVE;
 8000a62:	2302      	movs	r3, #2
 8000a64:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000a66:	2302      	movs	r3, #2
 8000a68:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPOL_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_Config.SPI_CPOL= SPI_CPOL_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73bb      	strb	r3, [r7, #14]
//	SPI2Handle.SPI_Config.

	SPI_Init(&SPI2Handle);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe7f 	bl	8000780 <SPI_Init>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40003800 	.word	0x40003800

08000a90 <main>:




int main(void){
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

	//Using same chip as Master and Slave. SPI1->PortA is Master and SPI2->PortB+C are
	char usrData[]= "Sending Data over SPI1.";
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <main+0x70>)
 8000a98:	463c      	mov	r4, r7
 8000a9a:	461d      	mov	r5, r3
 8000a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aa4:	e884 0003 	stmia.w	r4, {r0, r1}

	SPI1_GPIOInit();
 8000aa8:	f7ff ff5a 	bl	8000960 <SPI1_GPIOInit>

	SPI1_Inits();
 8000aac:	f7ff ff84 	bl	80009b8 <SPI1_Inits>

	SPI2_GPIOInit();
 8000ab0:	f7ff ffa0 	bl	80009f4 <SPI2_GPIOInit>

	SPI2_Inits();
 8000ab4:	f7ff ffce 	bl	8000a54 <SPI2_Inits>

	//SPI_SSI_Control(SPI1, ENABLE);
	//SPI_SSI_Control(SPI2, ENABLE);

	SPI_SSOE_Control(SPI1, ENABLE);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <main+0x74>)
 8000abc:	f7ff ff33 	bl	8000926 <SPI_SSOE_Control>

	SPI_Peri_Control(SPI1, ENABLE);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <main+0x74>)
 8000ac4:	f7ff ff13 	bl	80008ee <SPI_Peri_Control>
	SPI_Peri_Control(SPI2, ENABLE);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	480f      	ldr	r0, [pc, #60]	; (8000b08 <main+0x78>)
 8000acc:	f7ff ff0f 	bl	80008ee <SPI_Peri_Control>



	SPI_SendData(SPI1, (uint8_t*)usrData, strlen(usrData));
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb88 	bl	80001e8 <strlen>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <main+0x74>)
 8000ae0:	f7ff fece 	bl	8000880 <SPI_SendData>

	while(SPI_GetFlagStatus(SPI1, SPI_SR_BSY));
 8000ae4:	bf00      	nop
 8000ae6:	2107      	movs	r1, #7
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <main+0x74>)
 8000aea:	f7ff feb5 	bl	8000858 <SPI_GetFlagStatus>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f8      	bne.n	8000ae6 <main+0x56>
	SPI_Peri_Control(SPI1, DISABLE);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <main+0x74>)
 8000af8:	f7ff fef9 	bl	80008ee <SPI_Peri_Control>


	for(;;);
 8000afc:	e7fe      	b.n	8000afc <main+0x6c>
 8000afe:	bf00      	nop
 8000b00:	08000bc0 	.word	0x08000bc0
 8000b04:	40013000 	.word	0x40013000
 8000b08:	40003800 	.word	0x40003800

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3a:	f000 f811 	bl	8000b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff ffa7 	bl	8000a90 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b50:	08000be0 	.word	0x08000be0
  ldr r2, =_sbss
 8000b54:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b58:	2000001c 	.word	0x2000001c

08000b5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <__libc_init_array>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	4d0d      	ldr	r5, [pc, #52]	; (8000b98 <__libc_init_array+0x38>)
 8000b64:	4c0d      	ldr	r4, [pc, #52]	; (8000b9c <__libc_init_array+0x3c>)
 8000b66:	1b64      	subs	r4, r4, r5
 8000b68:	10a4      	asrs	r4, r4, #2
 8000b6a:	2600      	movs	r6, #0
 8000b6c:	42a6      	cmp	r6, r4
 8000b6e:	d109      	bne.n	8000b84 <__libc_init_array+0x24>
 8000b70:	4d0b      	ldr	r5, [pc, #44]	; (8000ba0 <__libc_init_array+0x40>)
 8000b72:	4c0c      	ldr	r4, [pc, #48]	; (8000ba4 <__libc_init_array+0x44>)
 8000b74:	f000 f818 	bl	8000ba8 <_init>
 8000b78:	1b64      	subs	r4, r4, r5
 8000b7a:	10a4      	asrs	r4, r4, #2
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	42a6      	cmp	r6, r4
 8000b80:	d105      	bne.n	8000b8e <__libc_init_array+0x2e>
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b88:	4798      	blx	r3
 8000b8a:	3601      	adds	r6, #1
 8000b8c:	e7ee      	b.n	8000b6c <__libc_init_array+0xc>
 8000b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b92:	4798      	blx	r3
 8000b94:	3601      	adds	r6, #1
 8000b96:	e7f2      	b.n	8000b7e <__libc_init_array+0x1e>
 8000b98:	08000bd8 	.word	0x08000bd8
 8000b9c:	08000bd8 	.word	0x08000bd8
 8000ba0:	08000bd8 	.word	0x08000bd8
 8000ba4:	08000bdc 	.word	0x08000bdc

08000ba8 <_init>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr

08000bb4 <_fini>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr
