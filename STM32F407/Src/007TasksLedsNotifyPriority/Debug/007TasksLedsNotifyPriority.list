
007TasksLedsNotifyPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000144a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144b4  200144b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018dca  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003174  00000000  00000000  00038e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bfb  00000000  00000000  0003e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014de6  00000000  00000000  00061ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7cdb  00000000  00000000  00076de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014eabc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f64  00000000  00000000  0014eb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fcc 	.word	0x08006fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006fcc 	.word	0x08006fcc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001440c 	.word	0x2001440c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fba5 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f84f 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8b7 	bl	80006dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <main+0x90>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <main+0x90>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 fbcb 	bl	8004d14 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057e:	f005 fefd 	bl	800637c <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(led_green_handler, "task-1", 200, NULL, 2, &task1_handle);
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <main+0x94>)
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2302      	movs	r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	22c8      	movs	r2, #200	; 0xc8
 800058e:	4919      	ldr	r1, [pc, #100]	; (80005f4 <main+0x98>)
 8000590:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0x9c>)
 8000592:	f002 fc17 	bl	8002dc4 <xTaskCreate>
 8000596:	60f8      	str	r0, [r7, #12]

  configASSERT(status==pdPASS);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00a      	beq.n	80005b4 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	f3bf 8f6f 	isb	sy
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b0:	bf00      	nop
 80005b2:	e7fe      	b.n	80005b2 <main+0x56>


  status = xTaskCreate(led_orange_handler, "task-2", 200, NULL, 3, &task2_handle);
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <main+0xa0>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2303      	movs	r3, #3
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	; 0xc8
 80005c0:	490f      	ldr	r1, [pc, #60]	; (8000600 <main+0xa4>)
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0xa8>)
 80005c4:	f002 fbfe 	bl	8002dc4 <xTaskCreate>
 80005c8:	60f8      	str	r0, [r7, #12]

  configASSERT(status==pdPASS);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00a      	beq.n	80005e6 <main+0x8a>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	607b      	str	r3, [r7, #4]
    }
 80005e2:	bf00      	nop
 80005e4:	e7fe      	b.n	80005e4 <main+0x88>



  vTaskStartScheduler();
 80005e6:	f002 fe2b 	bl	8003240 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>
 80005ec:	e0001000 	.word	0xe0001000
 80005f0:	2001436c 	.word	0x2001436c
 80005f4:	08006fe4 	.word	0x08006fe4
 80005f8:	080009a9 	.word	0x080009a9
 80005fc:	20014370 	.word	0x20014370
 8000600:	08006fec 	.word	0x08006fec
 8000604:	080009d9 	.word	0x080009d9

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fcd0 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	; 0x32
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe4b 	bl	8001328 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa20 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f8ac 	bl	8001818 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 fa09 	bl	8000adc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4ba6      	ldr	r3, [pc, #664]	; (8000990 <MX_GPIO_Init+0x2b4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4aa5      	ldr	r2, [pc, #660]	; (8000990 <MX_GPIO_Init+0x2b4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4ba3      	ldr	r3, [pc, #652]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b9f      	ldr	r3, [pc, #636]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a9e      	ldr	r2, [pc, #632]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b9c      	ldr	r3, [pc, #624]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b98      	ldr	r3, [pc, #608]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a97      	ldr	r2, [pc, #604]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b95      	ldr	r3, [pc, #596]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b91      	ldr	r3, [pc, #580]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a90      	ldr	r2, [pc, #576]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b8e      	ldr	r3, [pc, #568]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a89      	ldr	r2, [pc, #548]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b87      	ldr	r3, [pc, #540]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b83      	ldr	r3, [pc, #524]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a82      	ldr	r2, [pc, #520]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b80      	ldr	r3, [pc, #512]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	487d      	ldr	r0, [pc, #500]	; (8000994 <MX_GPIO_Init+0x2b8>)
 80007a0:	f000 fd6a 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	487b      	ldr	r0, [pc, #492]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80007aa:	f000 fd65 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007b4:	4879      	ldr	r0, [pc, #484]	; (800099c <MX_GPIO_Init+0x2c0>)
 80007b6:	f000 fd5f 	bl	8001278 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4870      	ldr	r0, [pc, #448]	; (8000994 <MX_GPIO_Init+0x2b8>)
 80007d2:	f000 fbb5 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	486a      	ldr	r0, [pc, #424]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80007ee:	f000 fba7 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4862      	ldr	r0, [pc, #392]	; (8000998 <MX_GPIO_Init+0x2bc>)
 800080e:	f000 fb97 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	485e      	ldr	r0, [pc, #376]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000828:	f000 fb8a 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082c:	2310      	movs	r3, #16
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4856      	ldr	r0, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000848:	f000 fb7a 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800084c:	23e0      	movs	r3, #224	; 0xe0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085c:	2305      	movs	r3, #5
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484e      	ldr	r0, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000868:	f000 fb6a 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086c:	2304      	movs	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4849      	ldr	r0, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 8000880:	f000 fb5e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4840      	ldr	r0, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 80008a2:	f000 fb4d 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4837      	ldr	r0, [pc, #220]	; (800099c <MX_GPIO_Init+0x2c0>)
 80008c0:	f000 fb3e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482d      	ldr	r0, [pc, #180]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80008e2:	f000 fb2d 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 80008fc:	f000 fb20 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000900:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000912:	230a      	movs	r3, #10
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 800091e:	f000 fb0f 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0x2c0>)
 8000936:	f000 fb03 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 8000958:	f000 faf2 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000960:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_GPIO_Init+0x2b8>)
 8000972:	f000 fae5 	bl	8000f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210a      	movs	r1, #10
 800097a:	2006      	movs	r0, #6
 800097c:	f000 fab6 	bl	8000eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000980:	2006      	movs	r0, #6
 8000982:	f000 facf 	bl	8000f24 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <led_green_handler>:

/* USER CODE BEGIN 4 */
void led_green_handler(void* parameters)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80009b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <led_green_handler+0x28>)
 80009b6:	f000 fc78 	bl	80012aa <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009be:	f000 f9b9 	bl	8000d34 <HAL_Delay>
		//vTaskDelay(1000);
		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <led_green_handler+0x2c>)
 80009c4:	f006 fa4a 	bl	8006e5c <SEGGER_SYSVIEW_PrintfTarget>
		switch_priority();
 80009c8:	f000 f82a 	bl	8000a20 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80009cc:	e7f0      	b.n	80009b0 <led_green_handler+0x8>
 80009ce:	bf00      	nop
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	08006ff4 	.word	0x08006ff4

080009d8 <led_orange_handler>:

	}
}
void led_orange_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <led_orange_handler+0x24>)
 80009e6:	f000 fc60 	bl	80012aa <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80009ea:	20c8      	movs	r0, #200	; 0xc8
 80009ec:	f000 f9a2 	bl	8000d34 <HAL_Delay>
		//vTaskDelay(1000);
		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <led_orange_handler+0x28>)
 80009f2:	f006 fa33 	bl	8006e5c <SEGGER_SYSVIEW_PrintfTarget>
		switch_priority();
 80009f6:	f000 f813 	bl	8000a20 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80009fa:	e7f1      	b.n	80009e0 <led_orange_handler+0x8>
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	08006ff4 	.word	0x08006ff4

08000a04 <user_button_interrupt_handler>:

}


void user_button_interrupt_handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000a08:	f005 ff80 	bl	800690c <SEGGER_SYSVIEW_RecordEnterISR>
	button_status = 1;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <user_button_interrupt_handler+0x18>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000a12:	f005 ffbd 	bl	8006990 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000030 	.word	0x20000030

08000a20 <switch_priority>:

void switch_priority(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
	BaseType_t p1,p2;
	xTaskHandle t1,t2,cur;

	BaseType_t switch_priority =0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000a2a:	f003 fe3b 	bl	80046a4 <vPortEnterCritical>
	if(button_status)
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <switch_priority+0x8c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <switch_priority+0x20>
	{
		button_status =0;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <switch_priority+0x8c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
		switch_priority=1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000a40:	f003 fe60 	bl	8004704 <vPortExitCritical>

	if(switch_priority)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d02b      	beq.n	8000aa2 <switch_priority+0x82>
	{
		//t1=xTaskGetHandle("task-1");
		t1=task1_handle;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <switch_priority+0x90>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]

		//t2=xTaskGetHandle("task-2");
		t2=task2_handle;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <switch_priority+0x94>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]


		p1=uxTaskPriorityGet(t1);
 8000a56:	6938      	ldr	r0, [r7, #16]
 8000a58:	f002 fb18 	bl	800308c <uxTaskPriorityGet>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60bb      	str	r3, [r7, #8]
		p2=uxTaskPriorityGet(t2);
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f002 fb13 	bl	800308c <uxTaskPriorityGet>
 8000a66:	4603      	mov	r3, r0
 8000a68:	607b      	str	r3, [r7, #4]

		cur=xTaskGetCurrentTaskHandle();
 8000a6a:	f003 f833 	bl	8003ad4 <xTaskGetCurrentTaskHandle>
 8000a6e:	6038      	str	r0, [r7, #0]
		if(cur==t1)
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d10a      	bne.n	8000a8e <switch_priority+0x6e>
		{
			vTaskPrioritySet(t1, p2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6938      	ldr	r0, [r7, #16]
 8000a7e:	f002 fb1f 	bl	80030c0 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	4619      	mov	r1, r3
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f002 fb1a 	bl	80030c0 <vTaskPrioritySet>
		{
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}
}
 8000a8c:	e009      	b.n	8000aa2 <switch_priority+0x82>
			vTaskPrioritySet(t2, p1);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4619      	mov	r1, r3
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f002 fb14 	bl	80030c0 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6938      	ldr	r0, [r7, #16]
 8000a9e:	f002 fb0f 	bl	80030c0 <vTaskPrioritySet>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000030 	.word	0x20000030
 8000ab0:	2001436c 	.word	0x2001436c
 8000ab4:	20014370 	.word	0x20014370

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 f913 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40002000 	.word	0x40002000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	vInitPrioGroupValue();
 8000aee:	f003 fd5b 	bl	80045a8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	202d      	movs	r0, #45	; 0x2d
 8000b4e:	f000 f9cd 	bl	8000eec <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b52:	202d      	movs	r0, #45	; 0x2d
 8000b54:	f000 f9e6 	bl	8000f24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f832 	bl	8001be8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 f81c 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_InitTick+0xa8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_InitTick+0xac>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_InitTick+0xb0>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_InitTick+0xac>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_InitTick+0xac>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_InitTick+0xac>)
 8000bbe:	f001 f845 	bl	8001c4c <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_InitTick+0xac>)
 8000bca:	f001 f899 	bl	8001d00 <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20014380 	.word	0x20014380
 8000be8:	40002000 	.word	0x40002000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	user_button_interrupt_handler();
 8000c0e:	f7ff fef9 	bl	8000a04 <user_button_interrupt_handler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fb64 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fb61 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c2a:	f001 f8d9 	bl	8001de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20014380 	.word	0x20014380

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f006 f957 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc65 	bl	800055c <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca0:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 8000ca4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ca8:	200144b4 	.word	0x200144b4

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f8fc 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff2a 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff ff00 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	200143c8 	.word	0x200143c8

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200143c8 	.word	0x200143c8

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_Delay+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e16b      	b.n	8001234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 815a 	bne.w	800122e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d017      	beq.n	8001030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80b4 	beq.w	800122e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a5f      	ldr	r2, [pc, #380]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	4a5b      	ldr	r2, [pc, #364]	; (8001250 <HAL_GPIO_Init+0x310>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a51      	ldr	r2, [pc, #324]	; (8001258 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x324>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x328>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x20e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x20a>
 8001146:	2307      	movs	r3, #7
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114a:	2308      	movs	r3, #8
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x310>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae90 	bls.w	8000f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012bc:	887a      	ldrh	r2, [r7, #2]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	041a      	lsls	r2, r3, #16
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	400b      	ands	r3, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f806 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e264      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d075      	beq.n	8001432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	4ba3      	ldr	r3, [pc, #652]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00c      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b9d      	ldr	r3, [pc, #628]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d157      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e23f      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b91      	ldr	r3, [pc, #580]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a8a      	ldr	r2, [pc, #552]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 80013c0:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a83      	ldr	r2, [pc, #524]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a80      	ldr	r2, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc9c 	bl	8000d1c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc98 	bl	8000d1c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e204      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fc88 	bl	8000d1c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc84 	bl	8000d1c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1f0      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xe8>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1c4      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4952      	ldr	r1, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e03a      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fc3d 	bl	8000d1c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc39 	bl	8000d1c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1a5      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4940      	ldr	r1, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc1c 	bl	8000d1c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc18 	bl	8000d1c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e184      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d030      	beq.n	8001574 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fbfc 	bl	8000d1c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fbf8 	bl	8000d1c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e164      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x200>
 8001546:	e015      	b.n	8001574 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fbe5 	bl	8000d1c <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fbe1 	bl	8000d1c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e14d      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a0 	beq.w	80016c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fba7 	bl	8000d1c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e011      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	42470000 	.word	0x42470000
 80015dc:	42470e80 	.word	0x42470e80
 80015e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e4:	f7ff fb9a 	bl	8000d1c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e106      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x4e4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x2f0>
 800160a:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x312>
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a77      	ldr	r2, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a74      	ldr	r2, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fb5f 	bl	8000d1c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fb5b 	bl	8000d1c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0c5      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x33a>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fb49 	bl	8000d1c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fb45 	bl	8000d1c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0af      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 809b 	beq.w	8001802 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d05c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d141      	bne.n	8001764 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb19 	bl	8000d1c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb15 	bl	8000d1c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e081      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff faee 	bl	8000d1c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff faea 	bl	8000d1c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e056      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x41c>
 8001762:	e04e      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fad7 	bl	8000d1c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fad3 	bl	8000d1c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e03f      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x44a>
 8001790:	e037      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e032      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d028      	beq.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d121      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d11a      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d111      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40007000 	.word	0x40007000
 8001810:	40023800 	.word	0x40023800
 8001814:	42470060 	.word	0x42470060

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d90c      	bls.n	8001854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0b8      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	494d      	ldr	r1, [pc, #308]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d044      	beq.n	8001938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e07f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e067      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4934      	ldr	r1, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001908:	f7ff fa08 	bl	8000d1c <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fa04 	bl	8000d1c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e04f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d20c      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e032      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4916      	ldr	r1, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199e:	f000 f821 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	490a      	ldr	r1, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8ba 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	080070e8 	.word	0x080070e8
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fc:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d00d      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x40>
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	f200 80bd 	bhi.w	8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a16:	e0b7      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a1a:	60bb      	str	r3, [r7, #8]
       break;
 8001a1c:	e0b7      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e0b4      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04d      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	461a      	mov	r2, r3
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	ea02 0800 	and.w	r8, r2, r0
 8001a52:	ea03 0901 	and.w	r9, r3, r1
 8001a56:	4640      	mov	r0, r8
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	014b      	lsls	r3, r1, #5
 8001a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a68:	0142      	lsls	r2, r0, #5
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	ebb0 0008 	subs.w	r0, r0, r8
 8001a72:	eb61 0109 	sbc.w	r1, r1, r9
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a84:	0182      	lsls	r2, r0, #6
 8001a86:	1a12      	subs	r2, r2, r0
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9a:	00d0      	lsls	r0, r2, #3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	eb12 0208 	adds.w	r2, r2, r8
 8001aa4:	eb43 0309 	adc.w	r3, r3, r9
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0259      	lsls	r1, r3, #9
 8001ab2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ab6:	0250      	lsls	r0, r2, #9
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f7fe fbcc 	bl	8000264 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e04a      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	461a      	mov	r2, r3
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	ea02 0400 	and.w	r4, r2, r0
 8001aee:	ea03 0501 	and.w	r5, r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	014b      	lsls	r3, r1, #5
 8001b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b04:	0142      	lsls	r2, r0, #5
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	1b00      	subs	r0, r0, r4
 8001b0c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	018b      	lsls	r3, r1, #6
 8001b1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b1e:	0182      	lsls	r2, r0, #6
 8001b20:	1a12      	subs	r2, r2, r0
 8001b22:	eb63 0301 	sbc.w	r3, r3, r1
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	00d9      	lsls	r1, r3, #3
 8001b30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b34:	00d0      	lsls	r0, r2, #3
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	1912      	adds	r2, r2, r4
 8001b3c:	eb45 0303 	adc.w	r3, r5, r3
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	0299      	lsls	r1, r3, #10
 8001b4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b4e:	0290      	lsls	r0, r2, #10
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	f7fe fb80 	bl	8000264 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	60bb      	str	r3, [r7, #8]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b8a:	60bb      	str	r3, [r7, #8]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	080070f8 	.word	0x080070f8

08001be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCC_GetClockConfig+0x60>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0207 	and.w	r2, r3, #7
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f839 	bl	8001cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 f9d8 	bl	8002040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d001      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e04e      	b.n	8001db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d01d      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d111      	bne.n	8001da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d010      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	e007      	b.n	8001db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40010400 	.word	0x40010400
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40001800 	.word	0x40001800

08001de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0202 	mvn.w	r2, #2
 8001e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8ee 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8e0 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8f1 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0204 	mvn.w	r2, #4
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8c4 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8b6 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8c7 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0208 	mvn.w	r2, #8
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f89a 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f88c 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f89d 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0210 	mvn.w	r2, #16
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f870 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f862 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f873 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fdaa 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f902 	bl	8002194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f838 	bl	800202c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0220 	mvn.w	r2, #32
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8cc 	bl	8002180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d00f      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <TIM_Base_SetConfig+0x118>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <TIM_Base_SetConfig+0x11c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <TIM_Base_SetConfig+0x120>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <TIM_Base_SetConfig+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d027      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <TIM_Base_SetConfig+0x118>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d023      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_Base_SetConfig+0x11c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <TIM_Base_SetConfig+0x120>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0x124>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a28      	ldr	r2, [pc, #160]	; (8002168 <TIM_Base_SetConfig+0x128>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <TIM_Base_SetConfig+0x12c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <TIM_Base_SetConfig+0x130>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <TIM_Base_SetConfig+0x134>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <TIM_Base_SetConfig+0x138>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <TIM_Base_SetConfig+0x13c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <TIM_Base_SetConfig+0x114>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <TIM_Base_SetConfig+0xf8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <TIM_Base_SetConfig+0x124>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	615a      	str	r2, [r3, #20]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40010400 	.word	0x40010400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	40001800 	.word	0x40001800
 8002178:	40001c00 	.word	0x40001c00
 800217c:	40002000 	.word	0x40002000

08002180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 0208 	add.w	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0208 	add.w	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002260:	d103      	bne.n	800226a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e00c      	b.n	8002284 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3308      	adds	r3, #8
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e002      	b.n	8002278 <vListInsert+0x2e>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d2f6      	bcs.n	8002272 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6892      	ldr	r2, [r2, #8]
 80022d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6852      	ldr	r2, [r2, #4]
 80022dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d103      	bne.n	80022f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericReset+0x2a>
        __asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	60bb      	str	r3, [r7, #8]
    }
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800233a:	f002 f9b3 	bl	80046a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	441a      	add	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	3b01      	subs	r3, #1
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01a      	beq.n	80023ce <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3310      	adds	r3, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f9f9 	bl	8003794 <xTaskRemoveFromEventList>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <xQueueGenericReset+0xcc>)
 80023aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	e009      	b.n	80023ce <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3310      	adds	r3, #16
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fef2 	bl	80021a8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3324      	adds	r3, #36	; 0x24
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff feed 	bl	80021a8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023ce:	f002 f999 	bl	8004704 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	e000ed04 	.word	0xe000ed04

080023e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericCreate+0x2a>
        __asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	61bb      	str	r3, [r7, #24]
    }
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <xQueueGenericCreate+0x48>
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d101      	bne.n	800242c <xQueueGenericCreate+0x4c>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <xQueueGenericCreate+0x4e>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <xQueueGenericCreate+0x68>
        __asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	617b      	str	r3, [r7, #20]
    }
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800244e:	d90a      	bls.n	8002466 <xQueueGenericCreate+0x86>
        __asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	613b      	str	r3, [r7, #16]
    }
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3350      	adds	r3, #80	; 0x50
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fa46 	bl	80048fc <pvPortMalloc>
 8002470:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3350      	adds	r3, #80	; 0x50
 8002480:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f805 	bl	800249e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002494:	6a3b      	ldr	r3, [r7, #32]
    }
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024cc:	2101      	movs	r1, #1
 80024ce:	69b8      	ldr	r0, [r7, #24]
 80024d0:	f7ff ff1e 	bl	8002310 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	2073      	movs	r0, #115	; 0x73
 80024e4:	f003 fe42 	bl	800616c <SEGGER_SYSVIEW_RecordU32x3>
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b090      	sub	sp, #64	; 0x40
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericSend+0x32>
        __asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <xQueueGenericSend+0x40>
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <xQueueGenericSend+0x44>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <xQueueGenericSend+0x46>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <xQueueGenericSend+0x60>
        __asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800254c:	bf00      	nop
 800254e:	e7fe      	b.n	800254e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d103      	bne.n	800255e <xQueueGenericSend+0x6e>
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <xQueueGenericSend+0x72>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xQueueGenericSend+0x74>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xQueueGenericSend+0x8e>
        __asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	623b      	str	r3, [r7, #32]
    }
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257e:	f001 fab9 	bl	8003af4 <xTaskGetSchedulerState>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <xQueueGenericSend+0x9e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <xQueueGenericSend+0xa2>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <xQueueGenericSend+0xa4>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <xQueueGenericSend+0xbe>
        __asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	61fb      	str	r3, [r7, #28]
    }
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025ae:	f002 f879 	bl	80046a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <xQueueGenericSend+0xd4>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d136      	bne.n	8002632 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fb5c 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	4601      	mov	r1, r0
 80025d8:	205a      	movs	r0, #90	; 0x5a
 80025da:	f003 fe3d 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e4:	f000 fa78 	bl	8002ad8 <prvCopyDataToQueue>
 80025e8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	3324      	adds	r3, #36	; 0x24
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 f8cc 	bl	8003794 <xTaskRemoveFromEventList>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d013      	beq.n	800262a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002602:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <xQueueGenericSend+0x248>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	e00a      	b.n	800262a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <xQueueGenericSend+0x248>)
 800261c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800262a:	f002 f86b 	bl	8004704 <vPortExitCritical>
                return pdPASS;
 800262e:	2301      	movs	r3, #1
 8002630:	e07d      	b.n	800272e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d110      	bne.n	800265a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002638:	f002 f864 	bl	8004704 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fb20 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	4601      	mov	r1, r0
 8002650:	205a      	movs	r0, #90	; 0x5a
 8002652:	f003 fe01 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002656:	2300      	movs	r3, #0
 8002658:	e069      	b.n	800272e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4618      	mov	r0, r3
 8002666:	f001 f8fb 	bl	8003860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800266a:	2301      	movs	r3, #1
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800266e:	f002 f849 	bl	8004704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002672:	f000 fe47 	bl	8003304 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002676:	f002 f815 	bl	80046a4 <vPortEnterCritical>
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002680:	b25b      	sxtb	r3, r3
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002686:	d103      	bne.n	8002690 <xQueueGenericSend+0x1a0>
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002696:	b25b      	sxtb	r3, r3
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d103      	bne.n	80026a6 <xQueueGenericSend+0x1b6>
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a6:	f002 f82d 	bl	8004704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026aa:	1d3a      	adds	r2, r7, #4
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f8ea 	bl	800388c <xTaskCheckForTimeOut>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d124      	bne.n	8002708 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c0:	f000 fb02 	bl	8002cc8 <prvIsQueueFull>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	3310      	adds	r3, #16
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 f80c 	bl	80036f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026da:	f000 fa8d 	bl	8002bf8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026de:	f000 fe1f 	bl	8003320 <xTaskResumeAll>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f af62 	bne.w	80025ae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <xQueueGenericSend+0x248>)
 80026ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	e758      	b.n	80025ae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fe:	f000 fa7b 	bl	8002bf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002702:	f000 fe0d 	bl	8003320 <xTaskResumeAll>
 8002706:	e752      	b.n	80025ae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800270a:	f000 fa75 	bl	8002bf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800270e:	f000 fe07 	bl	8003320 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fab5 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	460b      	mov	r3, r1
 8002724:	4601      	mov	r1, r0
 8002726:	205a      	movs	r0, #90	; 0x5a
 8002728:	f003 fd96 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800272c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800272e:	4618      	mov	r0, r3
 8002730:	3738      	adds	r7, #56	; 0x38
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000ed04 	.word	0xe000ed04

0800273c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b090      	sub	sp, #64	; 0x40
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <xQueueGenericSendFromISR+0x3c>
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <xQueueGenericSendFromISR+0x40>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <xQueueGenericSendFromISR+0x42>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d103      	bne.n	80027a6 <xQueueGenericSendFromISR+0x6a>
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <xQueueGenericSendFromISR+0x6e>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <xQueueGenericSendFromISR+0x70>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	623b      	str	r3, [r7, #32]
    }
 80027c2:	bf00      	nop
 80027c4:	e7fe      	b.n	80027c4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027c6:	f002 f859 	bl	800487c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027ca:	f3ef 8211 	mrs	r2, BASEPRI
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	61fa      	str	r2, [r7, #28]
 80027e0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027e2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <xQueueGenericSendFromISR+0xbc>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d148      	bne.n	800288a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	4618      	mov	r0, r3
 800280c:	f004 fa3a 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002810:	4601      	mov	r1, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	461a      	mov	r2, r3
 8002816:	2060      	movs	r0, #96	; 0x60
 8002818:	f003 fc4e 	bl	80060b8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002822:	f000 f959 	bl	8002ad8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282e:	d112      	bne.n	8002856 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d025      	beq.n	8002884 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	3324      	adds	r3, #36	; 0x24
 800283c:	4618      	mov	r0, r3
 800283e:	f000 ffa9 	bl	8003794 <xTaskRemoveFromEventList>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01d      	beq.n	8002884 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01a      	beq.n	8002884 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e016      	b.n	8002884 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002856:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800285a:	2b7f      	cmp	r3, #127	; 0x7f
 800285c:	d10a      	bne.n	8002874 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	617b      	str	r3, [r7, #20]
    }
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002878:	3301      	adds	r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	b25a      	sxtb	r2, r3
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002884:	2301      	movs	r3, #1
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002888:	e00b      	b.n	80028a2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	4618      	mov	r0, r3
 800288e:	f004 f9f9 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002892:	4601      	mov	r1, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	461a      	mov	r2, r3
 8002898:	2060      	movs	r0, #96	; 0x60
 800289a:	f003 fc0d 	bl	80060b8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80028ac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3740      	adds	r7, #64	; 0x40
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08f      	sub	sp, #60	; 0x3c
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <xQueueReceive+0x30>
        __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	623b      	str	r3, [r7, #32]
    }
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <xQueueReceive+0x3e>
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <xQueueReceive+0x42>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <xQueueReceive+0x44>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueReceive+0x5e>
        __asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	61fb      	str	r3, [r7, #28]
    }
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002916:	f001 f8ed 	bl	8003af4 <xTaskGetSchedulerState>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <xQueueReceive+0x6e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <xQueueReceive+0x72>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <xQueueReceive+0x74>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xQueueReceive+0x8e>
        __asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	61bb      	str	r3, [r7, #24]
    }
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002946:	f001 fead 	bl	80046a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02f      	beq.n	80029b6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295a:	f000 f927 	bl	8002bac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	4618      	mov	r0, r3
 8002962:	f004 f98f 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002966:	4604      	mov	r4, r0
 8002968:	2000      	movs	r0, #0
 800296a:	f004 f98b 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2101      	movs	r1, #1
 8002974:	9100      	str	r1, [sp, #0]
 8002976:	4621      	mov	r1, r4
 8002978:	205c      	movs	r0, #92	; 0x5c
 800297a:	f003 fc6d 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00f      	beq.n	80029ae <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	3310      	adds	r3, #16
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fefe 	bl	8003794 <xTaskRemoveFromEventList>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800299e:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <xQueueReceive+0x21c>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029ae:	f001 fea9 	bl	8004704 <vPortExitCritical>
                return pdPASS;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e08a      	b.n	8002acc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029bc:	f001 fea2 	bl	8004704 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 f95e 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 80029c8:	4604      	mov	r4, r0
 80029ca:	2000      	movs	r0, #0
 80029cc:	f004 f95a 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2101      	movs	r1, #1
 80029d6:	9100      	str	r1, [sp, #0]
 80029d8:	4621      	mov	r1, r4
 80029da:	205c      	movs	r0, #92	; 0x5c
 80029dc:	f003 fc3c 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e073      	b.n	8002acc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 ff36 	bl	8003860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029f8:	f001 fe84 	bl	8004704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029fc:	f000 fc82 	bl	8003304 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a00:	f001 fe50 	bl	80046a4 <vPortEnterCritical>
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a10:	d103      	bne.n	8002a1a <xQueueReceive+0x162>
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a26:	d103      	bne.n	8002a30 <xQueueReceive+0x178>
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a30:	f001 fe68 	bl	8004704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a34:	1d3a      	adds	r2, r7, #4
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 ff25 	bl	800388c <xTaskCheckForTimeOut>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d124      	bne.n	8002a92 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f927 	bl	8002c9c <prvIsQueueEmpty>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d018      	beq.n	8002a86 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	3324      	adds	r3, #36	; 0x24
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fe47 	bl	80036f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a64:	f000 f8c8 	bl	8002bf8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a68:	f000 fc5a 	bl	8003320 <xTaskResumeAll>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f47f af69 	bne.w	8002946 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <xQueueReceive+0x21c>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	e75f      	b.n	8002946 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a88:	f000 f8b6 	bl	8002bf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a8c:	f000 fc48 	bl	8003320 <xTaskResumeAll>
 8002a90:	e759      	b.n	8002946 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a94:	f000 f8b0 	bl	8002bf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a98:	f000 fc42 	bl	8003320 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9e:	f000 f8fd 	bl	8002c9c <prvIsQueueEmpty>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f43f af4e 	beq.w	8002946 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f8e9 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f004 f8e5 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	9100      	str	r1, [sp, #0]
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	205c      	movs	r0, #92	; 0x5c
 8002ac6:	f003 fbc7 	bl	8006258 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002aca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3734      	adds	r7, #52	; 0x34
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d14d      	bne.n	8002b9a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f814 	bl	8003b30 <xTaskPriorityDisinherit>
 8002b08:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e043      	b.n	8002b9a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d119      	bne.n	8002b4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6858      	ldr	r0, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	461a      	mov	r2, r3
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	f004 fa3c 	bl	8006fa0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	441a      	add	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d32b      	bcc.n	8002b9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	e026      	b.n	8002b9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68d8      	ldr	r0, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	461a      	mov	r2, r3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	f004 fa22 	bl	8006fa0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	425b      	negs	r3, r3
 8002b66:	441a      	add	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d207      	bcs.n	8002b88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	425b      	negs	r3, r3
 8002b82:	441a      	add	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d105      	bne.n	8002b9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ba2:	697b      	ldr	r3, [r7, #20]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	441a      	add	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d303      	bcc.n	8002be0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	461a      	mov	r2, r3
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f004 f9d8 	bl	8006fa0 <memcpy>
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c00:	f001 fd50 	bl	80046a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c0c:	e011      	b.n	8002c32 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fdba 	bl	8003794 <xTaskRemoveFromEventList>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c26:	f000 fe97 	bl	8003958 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dce9      	bgt.n	8002c0e <prvUnlockQueue+0x16>
 8002c3a:	e000      	b.n	8002c3e <prvUnlockQueue+0x46>
                        break;
 8002c3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c46:	f001 fd5d 	bl	8004704 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c4a:	f001 fd2b 	bl	80046a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c56:	e011      	b.n	8002c7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3310      	adds	r3, #16
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fd95 	bl	8003794 <xTaskRemoveFromEventList>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c70:	f000 fe72 	bl	8003958 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dce9      	bgt.n	8002c58 <prvUnlockQueue+0x60>
 8002c84:	e000      	b.n	8002c88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c90:	f001 fd38 	bl	8004704 <vPortExitCritical>
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ca4:	f001 fcfe 	bl	80046a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e001      	b.n	8002cba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cba:	f001 fd23 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cd0:	f001 fce8 	bl	80046a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d102      	bne.n	8002ce6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e001      	b.n	8002cea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 fd0b 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e01e      	b.n	8002d46 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d14:	4910      	ldr	r1, [pc, #64]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 ffa9 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8002d32:	4601      	mov	r1, r0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	2071      	movs	r0, #113	; 0x71
 8002d3a:	f003 f9bd 	bl	80060b8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d3e:	e006      	b.n	8002d4e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9dd      	bls.n	8002d08 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200143cc 	.word	0x200143cc

08002d5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d6c:	f001 fc9a 	bl	80046a4 <vPortEnterCritical>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7c:	d103      	bne.n	8002d86 <vQueueWaitForMessageRestricted+0x2a>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d92:	d103      	bne.n	8002d9c <vQueueWaitForMessageRestricted+0x40>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9c:	f001 fcb2 	bl	8004704 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fcc1 	bl	8003738 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff1e 	bl	8002bf8 <prvUnlockQueue>
    }
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fd8f 	bl	80048fc <pvPortMalloc>
 8002dde:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f001 fd88 	bl	80048fc <pvPortMalloc>
 8002dec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfa:	e005      	b.n	8002e08 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f001 fe5d 	bl	8004abc <vPortFree>
 8002e02:	e001      	b.n	8002e08 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d013      	beq.n	8002e36 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f80e 	bl	8002e46 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e2a:	69f8      	ldr	r0, [r7, #28]
 8002e2c:	f000 f8a2 	bl	8002f74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e002      	b.n	8002e3c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e3a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
    }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	21a5      	movs	r1, #165	; 0xa5
 8002e60:	f004 f8ac 	bl	8006fbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f023 0307 	bic.w	r3, r3, #7
 8002e7c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	617b      	str	r3, [r7, #20]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01f      	beq.n	8002ee4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e012      	b.n	8002ed0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	7819      	ldrb	r1, [r3, #0]
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3334      	adds	r3, #52	; 0x34
 8002eba:	460a      	mov	r2, r1
 8002ebc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	d9e9      	bls.n	8002eaa <prvInitialiseNewTask+0x64>
 8002ed6:	e000      	b.n	8002eda <prvInitialiseNewTask+0x94>
            {
                break;
 8002ed8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ee2:	e003      	b.n	8002eec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d901      	bls.n	8002ef6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f96b 	bl	80021e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3318      	adds	r3, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f966 	bl	80021e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	f1c3 0205 	rsb	r2, r3, #5
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	3350      	adds	r3, #80	; 0x50
 8002f36:	2204      	movs	r2, #4
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 f83e 	bl	8006fbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	3354      	adds	r3, #84	; 0x54
 8002f44:	2201      	movs	r2, #1
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f004 f837 	bl	8006fbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	69b8      	ldr	r0, [r7, #24]
 8002f54:	f001 f9f6 	bl	8004344 <pxPortInitialiseStack>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f7c:	f001 fb92 	bl	80046a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <prvAddNewTaskToReadyList+0xfc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <prvAddNewTaskToReadyList+0xfc>)
 8002f88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <prvAddNewTaskToReadyList+0x100>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f92:	4a38      	ldr	r2, [pc, #224]	; (8003074 <prvAddNewTaskToReadyList+0x100>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <prvAddNewTaskToReadyList+0xfc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d110      	bne.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fa0:	f000 fcfe 	bl	80039a0 <prvInitialiseTaskLists>
 8002fa4:	e00d      	b.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fa6:	4b34      	ldr	r3, [pc, #208]	; (8003078 <prvAddNewTaskToReadyList+0x104>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <prvAddNewTaskToReadyList+0x100>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d802      	bhi.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <prvAddNewTaskToReadyList+0x100>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <prvAddNewTaskToReadyList+0x108>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	; (800307c <prvAddNewTaskToReadyList+0x108>)
 8002fca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <prvAddNewTaskToReadyList+0x108>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <prvAddNewTaskToReadyList+0x94>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fd2b 	bl	8006a38 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	1ae3      	subs	r3, r4, r3
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	462b      	mov	r3, r5
 8003004:	f001 ff20 	bl	8004e48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fd98 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <prvAddNewTaskToReadyList+0x10c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <prvAddNewTaskToReadyList+0x10c>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <prvAddNewTaskToReadyList+0x110>)
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f7ff f8e2 	bl	8002202 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800303e:	f001 fb61 	bl	8004704 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <prvAddNewTaskToReadyList+0x104>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <prvAddNewTaskToReadyList+0x100>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <prvAddNewTaskToReadyList+0x114>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	2000010c 	.word	0x2000010c
 8003074:	20000034 	.word	0x20000034
 8003078:	20000118 	.word	0x20000118
 800307c:	20000128 	.word	0x20000128
 8003080:	20000114 	.word	0x20000114
 8003084:	20000038 	.word	0x20000038
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8003094:	f001 fb06 	bl	80046a4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <uxTaskPriorityGet+0x18>
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <uxTaskPriorityGet+0x30>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e000      	b.n	80030a6 <uxTaskPriorityGet+0x1a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80030ae:	f001 fb29 	bl	8004704 <vPortExitCritical>

        return uxReturn;
 80030b2:	68bb      	ldr	r3, [r7, #8]
    }
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000034 	.word	0x20000034

080030c0 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d90a      	bls.n	80030ea <vTaskPrioritySet+0x2a>
        __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	60fb      	str	r3, [r7, #12]
    }
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d901      	bls.n	80030f4 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f0:	2304      	movs	r3, #4
 80030f2:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80030f4:	f001 fad6 	bl	80046a4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <vTaskPrioritySet+0x44>
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <vTaskPrioritySet+0x170>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	e000      	b.n	8003106 <vTaskPrioritySet+0x46>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fdba 	bl	8006c84 <SEGGER_SYSVIEW_ShrinkId>
 8003110:	4603      	mov	r3, r0
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	2028      	movs	r0, #40	; 0x28
 8003118:	f002 ffce 	bl	80060b8 <SEGGER_SYSVIEW_RecordU32x2>
 800311c:	69b8      	ldr	r0, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	461a      	mov	r2, r3
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	f001 fef1 	bl	8004f18 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d06f      	beq.n	8003224 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d90d      	bls.n	8003168 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <vTaskPrioritySet+0x170>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d00f      	beq.n	8003176 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <vTaskPrioritySet+0x170>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d309      	bcc.n	8003176 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e006      	b.n	8003176 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <vTaskPrioritySet+0x170>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	429a      	cmp	r2, r3
 8003170:	d101      	bne.n	8003176 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d102      	bne.n	800318e <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db04      	blt.n	80031a6 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f1c3 0205 	rsb	r2, r3, #5
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6959      	ldr	r1, [r3, #20]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <vTaskPrioritySet+0x174>)
 80031b6:	4413      	add	r3, r2
 80031b8:	4299      	cmp	r1, r3
 80031ba:	d128      	bne.n	800320e <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3304      	adds	r3, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f87b 	bl	80022bc <uxListRemove>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80031cc:	2201      	movs	r2, #1
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43da      	mvns	r2, r3
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <vTaskPrioritySet+0x178>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4013      	ands	r3, r2
 80031dc:	4a16      	ldr	r2, [pc, #88]	; (8003238 <vTaskPrioritySet+0x178>)
 80031de:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <vTaskPrioritySet+0x178>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <vTaskPrioritySet+0x178>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <vTaskPrioritySet+0x174>)
 8003200:	441a      	add	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3304      	adds	r3, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7fe fffa 	bl	8002202 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <vTaskPrioritySet+0x17c>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003224:	f001 fa6e 	bl	8004704 <vPortExitCritical>
    }
 8003228:	bf00      	nop
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000034 	.word	0x20000034
 8003234:	20000038 	.word	0x20000038
 8003238:	20000114 	.word	0x20000114
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <vTaskStartScheduler+0xa4>)
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	2282      	movs	r2, #130	; 0x82
 8003252:	4925      	ldr	r1, [pc, #148]	; (80032e8 <vTaskStartScheduler+0xa8>)
 8003254:	4825      	ldr	r0, [pc, #148]	; (80032ec <vTaskStartScheduler+0xac>)
 8003256:	f7ff fdb5 	bl	8002dc4 <xTaskCreate>
 800325a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003262:	f000 fd5d 	bl	8003d20 <xTimerCreateTimerTask>
 8003266:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d124      	bne.n	80032b8 <vTaskStartScheduler+0x78>
        __asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	60bb      	str	r3, [r7, #8]
    }
 8003280:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <vTaskStartScheduler+0xb0>)
 8003284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003288:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <vTaskStartScheduler+0xb4>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <vTaskStartScheduler+0xb8>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <vTaskStartScheduler+0xbc>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <vTaskStartScheduler+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d102      	bne.n	80032a8 <vTaskStartScheduler+0x68>
 80032a2:	f003 fbad 	bl	8006a00 <SEGGER_SYSVIEW_OnIdle>
 80032a6:	e004      	b.n	80032b2 <vTaskStartScheduler+0x72>
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <vTaskStartScheduler+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fc05 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032b2:	f001 f8d7 	bl	8004464 <xPortStartScheduler>
 80032b6:	e00e      	b.n	80032d6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032be:	d10a      	bne.n	80032d6 <vTaskStartScheduler+0x96>
        __asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	607b      	str	r3, [r7, #4]
    }
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <vTaskStartScheduler+0xc0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000130 	.word	0x20000130
 80032e8:	08007008 	.word	0x08007008
 80032ec:	08003971 	.word	0x08003971
 80032f0:	2000012c 	.word	0x2000012c
 80032f4:	20000118 	.word	0x20000118
 80032f8:	20000110 	.word	0x20000110
 80032fc:	20000034 	.word	0x20000034
 8003300:	2000000c 	.word	0x2000000c

08003304 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <vTaskSuspendAll+0x18>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <vTaskSuspendAll+0x18>)
 8003310:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20000134 	.word	0x20000134

08003320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800332e:	4b43      	ldr	r3, [pc, #268]	; (800343c <xTaskResumeAll+0x11c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <xTaskResumeAll+0x2c>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	603b      	str	r3, [r7, #0]
    }
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800334c:	f001 f9aa 	bl	80046a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003350:	4b3a      	ldr	r3, [pc, #232]	; (800343c <xTaskResumeAll+0x11c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3b01      	subs	r3, #1
 8003356:	4a39      	ldr	r2, [pc, #228]	; (800343c <xTaskResumeAll+0x11c>)
 8003358:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <xTaskResumeAll+0x11c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d165      	bne.n	800342e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <xTaskResumeAll+0x120>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d061      	beq.n	800342e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800336a:	e032      	b.n	80033d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <xTaskResumeAll+0x124>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3318      	adds	r3, #24
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe ff9f 	bl	80022bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3304      	adds	r3, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff9a 	bl	80022bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fbd8 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <xTaskResumeAll+0x128>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <xTaskResumeAll+0x128>)
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4a27      	ldr	r2, [pc, #156]	; (800344c <xTaskResumeAll+0x12c>)
 80033b0:	441a      	add	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7fe ff22 	bl	8002202 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c2:	4b23      	ldr	r3, [pc, #140]	; (8003450 <xTaskResumeAll+0x130>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d302      	bcc.n	80033d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <xTaskResumeAll+0x134>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <xTaskResumeAll+0x124>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c8      	bne.n	800336c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033e0:	f000 fb5c 	bl	8003a9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <xTaskResumeAll+0x138>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033f0:	f000 f858 	bl	80034a4 <xTaskIncrementTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <xTaskResumeAll+0x134>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f1      	bne.n	80033f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <xTaskResumeAll+0x138>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <xTaskResumeAll+0x134>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <xTaskResumeAll+0x13c>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800342e:	f001 f969 	bl	8004704 <vPortExitCritical>

    return xAlreadyYielded;
 8003432:	68bb      	ldr	r3, [r7, #8]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000134 	.word	0x20000134
 8003440:	2000010c 	.word	0x2000010c
 8003444:	200000cc 	.word	0x200000cc
 8003448:	20000114 	.word	0x20000114
 800344c:	20000038 	.word	0x20000038
 8003450:	20000034 	.word	0x20000034
 8003454:	20000120 	.word	0x20000120
 8003458:	2000011c 	.word	0x2000011c
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <xTaskGetTickCount+0x1c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800346c:	687b      	ldr	r3, [r7, #4]
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000110 	.word	0x20000110

08003480 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003486:	f001 f9f9 	bl	800487c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <xTaskGetTickCountFromISR+0x20>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003494:	683b      	ldr	r3, [r7, #0]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000110 	.word	0x20000110

080034a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <xTaskIncrementTick+0x14c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8092 	bne.w	80035dc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034b8:	4b4e      	ldr	r3, [pc, #312]	; (80035f4 <xTaskIncrementTick+0x150>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <xTaskIncrementTick+0x150>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d120      	bne.n	800350e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80034cc:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <xTaskIncrementTick+0x154>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <xTaskIncrementTick+0x48>
        __asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	603b      	str	r3, [r7, #0]
    }
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xTaskIncrementTick+0x46>
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <xTaskIncrementTick+0x154>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b42      	ldr	r3, [pc, #264]	; (80035fc <xTaskIncrementTick+0x158>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <xTaskIncrementTick+0x154>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <xTaskIncrementTick+0x158>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <xTaskIncrementTick+0x15c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <xTaskIncrementTick+0x15c>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	f000 fac7 	bl	8003a9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <xTaskIncrementTick+0x160>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	429a      	cmp	r2, r3
 8003516:	d34c      	bcc.n	80035b2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <xTaskIncrementTick+0x154>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <xTaskIncrementTick+0x160>)
 8003524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003528:	601a      	str	r2, [r3, #0]
                    break;
 800352a:	e042      	b.n	80035b2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <xTaskIncrementTick+0x154>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d203      	bcs.n	800354c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <xTaskIncrementTick+0x160>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800354a:	e032      	b.n	80035b2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe feb3 	bl	80022bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3318      	adds	r3, #24
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe feaa 	bl	80022bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fae8 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <xTaskIncrementTick+0x164>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <xTaskIncrementTick+0x164>)
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4a1f      	ldr	r2, [pc, #124]	; (800360c <xTaskIncrementTick+0x168>)
 8003590:	441a      	add	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7fe fe32 	bl	8002202 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <xTaskIncrementTick+0x16c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3b5      	bcc.n	8003518 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b0:	e7b2      	b.n	8003518 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <xTaskIncrementTick+0x16c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	4914      	ldr	r1, [pc, #80]	; (800360c <xTaskIncrementTick+0x168>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d901      	bls.n	80035ce <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xTaskIncrementTick+0x170>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e004      	b.n	80035e6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <xTaskIncrementTick+0x174>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <xTaskIncrementTick+0x174>)
 80035e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000134 	.word	0x20000134
 80035f4:	20000110 	.word	0x20000110
 80035f8:	200000c4 	.word	0x200000c4
 80035fc:	200000c8 	.word	0x200000c8
 8003600:	20000124 	.word	0x20000124
 8003604:	2000012c 	.word	0x2000012c
 8003608:	20000114 	.word	0x20000114
 800360c:	20000038 	.word	0x20000038
 8003610:	20000034 	.word	0x20000034
 8003614:	20000120 	.word	0x20000120
 8003618:	2000011c 	.word	0x2000011c

0800361c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <vTaskSwitchContext+0xbc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800362a:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <vTaskSwitchContext+0xc0>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003630:	e04d      	b.n	80036ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <vTaskSwitchContext+0xc0>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <vTaskSwitchContext+0xc4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	f1c3 031f 	rsb	r3, r3, #31
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	4925      	ldr	r1, [pc, #148]	; (80036e4 <vTaskSwitchContext+0xc8>)
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	607b      	str	r3, [r7, #4]
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vTaskSwitchContext+0x5a>
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <vTaskSwitchContext+0xc8>)
 8003684:	4413      	add	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	3308      	adds	r3, #8
 800369a:	429a      	cmp	r2, r3
 800369c:	d104      	bne.n	80036a8 <vTaskSwitchContext+0x8c>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <vTaskSwitchContext+0xcc>)
 80036b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <vTaskSwitchContext+0xcc>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <vTaskSwitchContext+0xd0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d102      	bne.n	80036c4 <vTaskSwitchContext+0xa8>
 80036be:	f003 f99f 	bl	8006a00 <SEGGER_SYSVIEW_OnIdle>
}
 80036c2:	e004      	b.n	80036ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <vTaskSwitchContext+0xcc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 f9f7 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000134 	.word	0x20000134
 80036dc:	20000120 	.word	0x20000120
 80036e0:	20000114 	.word	0x20000114
 80036e4:	20000038 	.word	0x20000038
 80036e8:	20000034 	.word	0x20000034
 80036ec:	20000130 	.word	0x20000130

080036f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	60fb      	str	r3, [r7, #12]
    }
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <vTaskPlaceOnEventList+0x44>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3318      	adds	r3, #24
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe fd93 	bl	800224a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003724:	2101      	movs	r1, #1
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	f000 fa82 	bl	8003c30 <prvAddCurrentTaskToDelayedList>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000034 	.word	0x20000034

08003738 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	617b      	str	r3, [r7, #20]
    }
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <vTaskPlaceOnEventListRestricted+0x58>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3318      	adds	r3, #24
 8003766:	4619      	mov	r1, r3
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7fe fd4a 	bl	8002202 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003778:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800377a:	2024      	movs	r0, #36	; 0x24
 800377c:	f002 fc42 	bl	8006004 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	68b8      	ldr	r0, [r7, #8]
 8003784:	f000 fa54 	bl	8003c30 <prvAddCurrentTaskToDelayedList>
    }
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000034 	.word	0x20000034

08003794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	60fb      	str	r3, [r7, #12]
    }
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fd79 	bl	80022bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <xTaskRemoveFromEventList+0xb4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d120      	bne.n	8003814 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fd70 	bl	80022bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 f9ae 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	2201      	movs	r2, #1
 80037ea:	409a      	lsls	r2, r3
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <xTaskRemoveFromEventList+0xb8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <xTaskRemoveFromEventList+0xb8>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <xTaskRemoveFromEventList+0xbc>)
 8003804:	441a      	add	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7fe fcf8 	bl	8002202 <vListInsertEnd>
 8003812:	e005      	b.n	8003820 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	3318      	adds	r3, #24
 8003818:	4619      	mov	r1, r3
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <xTaskRemoveFromEventList+0xc0>)
 800381c:	f7fe fcf1 	bl	8002202 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <xTaskRemoveFromEventList+0xc4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	429a      	cmp	r2, r3
 800382c:	d905      	bls.n	800383a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <xTaskRemoveFromEventList+0xc8>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e001      	b.n	800383e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800383e:	697b      	ldr	r3, [r7, #20]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000134 	.word	0x20000134
 800384c:	20000114 	.word	0x20000114
 8003850:	20000038 	.word	0x20000038
 8003854:	200000cc 	.word	0x200000cc
 8003858:	20000034 	.word	0x20000034
 800385c:	20000120 	.word	0x20000120

08003860 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <vTaskInternalSetTimeOutState+0x24>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <vTaskInternalSetTimeOutState+0x28>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	605a      	str	r2, [r3, #4]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20000124 	.word	0x20000124
 8003888:	20000110 	.word	0x20000110

0800388c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	613b      	str	r3, [r7, #16]
    }
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60fb      	str	r3, [r7, #12]
    }
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038ce:	f000 fee9 	bl	80046a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038d2:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <xTaskCheckForTimeOut+0xc4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ea:	d102      	bne.n	80038f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e026      	b.n	8003940 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <xTaskCheckForTimeOut+0xc8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d00a      	beq.n	8003914 <xTaskCheckForTimeOut+0x88>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	429a      	cmp	r2, r3
 8003906:	d305      	bcc.n	8003914 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e015      	b.n	8003940 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20b      	bcs.n	8003936 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ff98 	bl	8003860 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e004      	b.n	8003940 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003940:	f000 fee0 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8003944:	69fb      	ldr	r3, [r7, #28]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000110 	.word	0x20000110
 8003954:	20000124 	.word	0x20000124

08003958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <vTaskMissedYield+0x14>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000120 	.word	0x20000120

08003970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003978:	f000 f852 	bl	8003a20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <prvIdleTask+0x28>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d9f9      	bls.n	8003978 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <prvIdleTask+0x2c>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003994:	e7f0      	b.n	8003978 <prvIdleTask+0x8>
 8003996:	bf00      	nop
 8003998:	20000038 	.word	0x20000038
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	e00c      	b.n	80039c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <prvInitialiseTaskLists+0x60>)
 80039b8:	4413      	add	r3, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fbf4 	bl	80021a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3301      	adds	r3, #1
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d9ef      	bls.n	80039ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039cc:	480d      	ldr	r0, [pc, #52]	; (8003a04 <prvInitialiseTaskLists+0x64>)
 80039ce:	f7fe fbeb 	bl	80021a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039d2:	480d      	ldr	r0, [pc, #52]	; (8003a08 <prvInitialiseTaskLists+0x68>)
 80039d4:	f7fe fbe8 	bl	80021a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039d8:	480c      	ldr	r0, [pc, #48]	; (8003a0c <prvInitialiseTaskLists+0x6c>)
 80039da:	f7fe fbe5 	bl	80021a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80039de:	480c      	ldr	r0, [pc, #48]	; (8003a10 <prvInitialiseTaskLists+0x70>)
 80039e0:	f7fe fbe2 	bl	80021a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80039e4:	480b      	ldr	r0, [pc, #44]	; (8003a14 <prvInitialiseTaskLists+0x74>)
 80039e6:	f7fe fbdf 	bl	80021a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <prvInitialiseTaskLists+0x78>)
 80039ec:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <prvInitialiseTaskLists+0x64>)
 80039ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <prvInitialiseTaskLists+0x7c>)
 80039f2:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <prvInitialiseTaskLists+0x68>)
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000038 	.word	0x20000038
 8003a04:	2000009c 	.word	0x2000009c
 8003a08:	200000b0 	.word	0x200000b0
 8003a0c:	200000cc 	.word	0x200000cc
 8003a10:	200000e0 	.word	0x200000e0
 8003a14:	200000f8 	.word	0x200000f8
 8003a18:	200000c4 	.word	0x200000c4
 8003a1c:	200000c8 	.word	0x200000c8

08003a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a26:	e019      	b.n	8003a5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a28:	f000 fe3c 	bl	80046a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <prvCheckTasksWaitingTermination+0x50>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fc3f 	bl	80022bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <prvCheckTasksWaitingTermination+0x54>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <prvCheckTasksWaitingTermination+0x54>)
 8003a46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <prvCheckTasksWaitingTermination+0x58>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <prvCheckTasksWaitingTermination+0x58>)
 8003a50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a52:	f000 fe57 	bl	8004704 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f810 	bl	8003a7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <prvCheckTasksWaitingTermination+0x58>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e1      	bne.n	8003a28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200000e0 	.word	0x200000e0
 8003a74:	2000010c 	.word	0x2000010c
 8003a78:	200000f4 	.word	0x200000f4

08003a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f817 	bl	8004abc <vPortFree>
                vPortFree( pxTCB );
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f001 f814 	bl	8004abc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <prvResetNextTaskUnblockTime+0x30>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <prvResetNextTaskUnblockTime+0x34>)
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ab2:	e005      	b.n	8003ac0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <prvResetNextTaskUnblockTime+0x30>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvResetNextTaskUnblockTime+0x34>)
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	200000c4 	.word	0x200000c4
 8003ad0:	2000012c 	.word	0x2000012c

08003ad4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <xTaskGetCurrentTaskHandle+0x1c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003ae0:	687b      	ldr	r3, [r7, #4]
    }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000034 	.word	0x20000034

08003af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <xTaskGetSchedulerState+0x34>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b02:	2301      	movs	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	e008      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <xTaskGetSchedulerState+0x38>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b10:	2302      	movs	r3, #2
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e001      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b1a:	687b      	ldr	r3, [r7, #4]
    }
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000118 	.word	0x20000118
 8003b2c:	20000134 	.word	0x20000134

08003b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d068      	beq.n	8003c18 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b46:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <xTaskPriorityDisinherit+0xf4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d00a      	beq.n	8003b66 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
    }
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d03e      	beq.n	8003c18 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d13a      	bne.n	8003c18 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fb88 	bl	80022bc <uxListRemove>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bc6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	204a      	movs	r0, #74	; 0x4a
 8003bce:	f002 fa37 	bl	8006040 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f1c3 0205 	rsb	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	2201      	movs	r2, #1
 8003bec:	409a      	lsls	r2, r3
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <xTaskPriorityDisinherit+0xfc>)
 8003c06:	441a      	add	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f7fe faf7 	bl	8002202 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c18:	697b      	ldr	r3, [r7, #20]
    }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000034 	.word	0x20000034
 8003c28:	20000114 	.word	0x20000114
 8003c2c:	20000038 	.word	0x20000038

08003c30 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c3a:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c40:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fb38 	bl	80022bc <uxListRemove>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4013      	ands	r3, r2
 8003c66:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c68:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c70:	d110      	bne.n	8003c94 <prvAddCurrentTaskToDelayedList+0x64>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	211b      	movs	r1, #27
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 ffa0 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4820      	ldr	r0, [pc, #128]	; (8003d10 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c8e:	f7fe fab8 	bl	8002202 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c92:	e032      	b.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d20f      	bcs.n	8003ccc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 ff86 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe fac0 	bl	800224a <vListInsert>
}
 8003cca:	e016      	b.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 ff76 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe fab0 	bl	800224a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d202      	bcs.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000110 	.word	0x20000110
 8003d08:	20000034 	.word	0x20000034
 8003d0c:	20000114 	.word	0x20000114
 8003d10:	200000f8 	.word	0x200000f8
 8003d14:	200000c8 	.word	0x200000c8
 8003d18:	200000c4 	.word	0x200000c4
 8003d1c:	2000012c 	.word	0x2000012c

08003d20 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d2a:	f000 fad5 	bl	80042d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <xTimerCreateTimerTask+0x54>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <xTimerCreateTimerTask+0x58>)
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d44:	490d      	ldr	r1, [pc, #52]	; (8003d7c <xTimerCreateTimerTask+0x5c>)
 8003d46:	480e      	ldr	r0, [pc, #56]	; (8003d80 <xTimerCreateTimerTask+0x60>)
 8003d48:	f7ff f83c 	bl	8002dc4 <xTaskCreate>
 8003d4c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	603b      	str	r3, [r7, #0]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d6a:	687b      	ldr	r3, [r7, #4]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000168 	.word	0x20000168
 8003d78:	2000016c 	.word	0x2000016c
 8003d7c:	08007010 	.word	0x08007010
 8003d80:	08003eb9 	.word	0x08003eb9

08003d84 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02a      	beq.n	8003e10 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	dc18      	bgt.n	8003dfe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dcc:	f7ff fe92 	bl	8003af4 <xTaskGetSchedulerState>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d109      	bne.n	8003dea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	f107 0114 	add.w	r1, r7, #20
 8003dde:	2300      	movs	r3, #0
 8003de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de2:	f7fe fb85 	bl	80024f0 <xQueueGenericSend>
 8003de6:	6278      	str	r0, [r7, #36]	; 0x24
 8003de8:	e012      	b.n	8003e10 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	f107 0114 	add.w	r1, r7, #20
 8003df2:	2300      	movs	r3, #0
 8003df4:	2200      	movs	r2, #0
 8003df6:	f7fe fb7b 	bl	80024f0 <xQueueGenericSend>
 8003dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8003dfc:	e008      	b.n	8003e10 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f107 0114 	add.w	r1, r7, #20
 8003e06:	2300      	movs	r3, #0
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	f7fe fc97 	bl	800273c <xQueueGenericSendFromISR>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e12:	4618      	mov	r0, r3
 8003e14:	3728      	adds	r7, #40	; 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000168 	.word	0x20000168

08003e20 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <prvProcessExpiredTimer+0x94>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fa3f 	bl	80022bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d022      	beq.n	8003e92 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	18d1      	adds	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f000 f8d1 	bl	8004000 <prvInsertTimerInActiveList>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01f      	beq.n	8003ea4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ff88 	bl	8003d84 <xTimerGenericCommand>
 8003e74:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
    }
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	4798      	blx	r3
    }
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000160 	.word	0x20000160

08003eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f857 	bl	8003f78 <prvGetNextExpireTime>
 8003eca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f803 	bl	8003edc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ed6:	f000 f8d5 	bl	8004084 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eda:	e7f1      	b.n	8003ec0 <prvTimerTask+0x8>

08003edc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ee6:	f7ff fa0d 	bl	8003304 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f866 	bl	8003fc0 <prvSampleTimeNow>
 8003ef4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d130      	bne.n	8003f5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d806      	bhi.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f0a:	f7ff fa09 	bl	8003320 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff85 	bl	8003e20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f16:	e024      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <prvProcessTimerOrBlockTask+0x90>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <prvProcessTimerOrBlockTask+0x50>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x52>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <prvProcessTimerOrBlockTask+0x94>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fe ff0d 	bl	8002d5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f42:	f7ff f9ed 	bl	8003320 <xTaskResumeAll>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <prvProcessTimerOrBlockTask+0x98>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
    }
 8003f5c:	e001      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f5e:	f7ff f9df 	bl	8003320 <xTaskResumeAll>
    }
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000164 	.word	0x20000164
 8003f70:	20000168 	.word	0x20000168
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <prvGetNextExpireTime+0x16>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	e000      	b.n	8003f90 <prvGetNextExpireTime+0x18>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e001      	b.n	8003fac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fac:	68fb      	ldr	r3, [r7, #12]
    }
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000160 	.word	0x20000160

08003fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003fc8:	f7ff fa4a 	bl	8003460 <xTaskGetTickCount>
 8003fcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d205      	bcs.n	8003fe4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fd8:	f000 f91a 	bl	8004210 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e002      	b.n	8003fea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000170 	.word	0x20000170

08004000 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d812      	bhi.n	800404c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e01b      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <prvInsertTimerInActiveList+0x7c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe f900 	bl	800224a <vListInsert>
 800404a:	e012      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d206      	bcs.n	8004062 <prvInsertTimerInActiveList+0x62>
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e007      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <prvInsertTimerInActiveList+0x80>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe f8ec 	bl	800224a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004072:	697b      	ldr	r3, [r7, #20]
    }
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000164 	.word	0x20000164
 8004080:	20000160 	.word	0x20000160

08004084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	e0ae      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f2c0 80aa 	blt.w	80041e8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f909 	bl	80022bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff87 	bl	8003fc0 <prvSampleTimeNow>
 80040b2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b09      	cmp	r3, #9
 80040b8:	f200 8097 	bhi.w	80041ea <prvProcessReceivedCommands+0x166>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <prvProcessReceivedCommands+0x40>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	08004161 	.word	0x08004161
 80040d4:	08004175 	.word	0x08004175
 80040d8:	080041bf 	.word	0x080041bf
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040ed 	.word	0x080040ed
 80040e4:	08004161 	.word	0x08004161
 80040e8:	08004175 	.word	0x08004175
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	18d1      	adds	r1, r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800410c:	f7ff ff78 	bl	8004000 <prvInsertTimerInActiveList>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d069      	beq.n	80041ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05e      	beq.n	80041ea <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	441a      	add	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	2100      	movs	r1, #0
 800413c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413e:	f7ff fe21 	bl	8003d84 <xTimerGenericCommand>
 8004142:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d14f      	bne.n	80041ea <prvProcessReceivedCommands+0x166>
        __asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	61bb      	str	r3, [r7, #24]
    }
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004172:	e03a      	b.n	80041ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	617b      	str	r3, [r7, #20]
    }
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	18d1      	adds	r1, r2, r3
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b8:	f7ff ff22 	bl	8004000 <prvInsertTimerInActiveList>
                        break;
 80041bc:	e015      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80041cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ce:	f000 fc75 	bl	8004abc <vPortFree>
 80041d2:	e00a      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041e6:	e000      	b.n	80041ea <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80041e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <prvProcessReceivedCommands+0x188>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f107 0108 	add.w	r1, r7, #8
 80041f2:	2200      	movs	r2, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fb5f 	bl	80028b8 <xQueueReceive>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f af45 	bne.w	800408c <prvProcessReceivedCommands+0x8>
        }
    }
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000168 	.word	0x20000168

08004210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004216:	e048      	b.n	80042aa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004218:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe f843 	bl	80022bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02e      	beq.n	80042aa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d90e      	bls.n	800427c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fd ffe8 	bl	800224a <vListInsert>
 800427a:	e016      	b.n	80042aa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	2100      	movs	r1, #0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd7c 	bl	8003d84 <xTimerGenericCommand>
 800428c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	603b      	str	r3, [r7, #0]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1b1      	bne.n	8004218 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <prvSwitchTimerLists+0xc4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042c0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042c2:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <prvSwitchTimerLists+0xc4>)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6013      	str	r3, [r2, #0]
    }
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000160 	.word	0x20000160
 80042d4:	20000164 	.word	0x20000164

080042d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042dc:	f000 f9e2 	bl	80046a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11d      	bne.n	8004324 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80042e8:	4811      	ldr	r0, [pc, #68]	; (8004330 <prvCheckForValidListAndQueue+0x58>)
 80042ea:	f7fd ff5d 	bl	80021a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042ee:	4811      	ldr	r0, [pc, #68]	; (8004334 <prvCheckForValidListAndQueue+0x5c>)
 80042f0:	f7fd ff5a 	bl	80021a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <prvCheckForValidListAndQueue+0x60>)
 80042f6:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <prvCheckForValidListAndQueue+0x58>)
 80042f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <prvCheckForValidListAndQueue+0x64>)
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <prvCheckForValidListAndQueue+0x5c>)
 80042fe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004300:	2200      	movs	r2, #0
 8004302:	210c      	movs	r1, #12
 8004304:	200a      	movs	r0, #10
 8004306:	f7fe f86b 	bl	80023e0 <xQueueGenericCreate>
 800430a:	4603      	mov	r3, r0
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 800430e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4908      	ldr	r1, [pc, #32]	; (8004340 <prvCheckForValidListAndQueue+0x68>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fcea 	bl	8002cf8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004324:	f000 f9ee 	bl	8004704 <vPortExitCritical>
    }
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000168 	.word	0x20000168
 8004330:	20000138 	.word	0x20000138
 8004334:	2000014c 	.word	0x2000014c
 8004338:	20000160 	.word	0x20000160
 800433c:	20000164 	.word	0x20000164
 8004340:	08007018 	.word	0x08007018

08004344 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b04      	subs	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800435c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b04      	subs	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3b04      	subs	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <pxPortInitialiseStack+0x64>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b14      	subs	r3, #20
 800437e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f06f 0202 	mvn.w	r2, #2
 8004392:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b20      	subs	r3, #32
 8004398:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	080043ad 	.word	0x080043ad

080043ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <prvTaskExitError+0x54>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043be:	d00a      	beq.n	80043d6 <prvTaskExitError+0x2a>
        __asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
    }
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <prvTaskExitError+0x28>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60bb      	str	r3, [r7, #8]
    }
 80043e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043ea:	bf00      	nop
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0fc      	beq.n	80043ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000010 	.word	0x20000010
	...

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <prvPortStartFirstTask+0x24>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8814 	msr	CONTROL, r0
 800444a:	b662      	cpsie	i
 800444c:	b661      	cpsie	f
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	df00      	svc	0
 8004458:	bf00      	nop
 800445a:	0000      	.short	0x0000
 800445c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop

08004464 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800446a:	4b46      	ldr	r3, [pc, #280]	; (8004584 <xPortStartScheduler+0x120>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a46      	ldr	r2, [pc, #280]	; (8004588 <xPortStartScheduler+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10a      	bne.n	800448a <xPortStartScheduler+0x26>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	613b      	str	r3, [r7, #16]
    }
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3f      	ldr	r2, [pc, #252]	; (800458c <xPortStartScheduler+0x128>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x46>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <xPortStartScheduler+0x12c>)
 80044ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	22ff      	movs	r2, #255	; 0xff
 80044ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <xPortStartScheduler+0x130>)
 80044d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <xPortStartScheduler+0x134>)
 80044d4:	2207      	movs	r2, #7
 80044d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d8:	e009      	b.n	80044ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044da:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <xPortStartScheduler+0x134>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3b01      	subs	r3, #1
 80044e0:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <xPortStartScheduler+0x134>)
 80044e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d0ef      	beq.n	80044da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fa:	4b27      	ldr	r3, [pc, #156]	; (8004598 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1c3 0307 	rsb	r3, r3, #7
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00a      	beq.n	800451c <xPortStartScheduler+0xb8>
        __asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
    }
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <xPortStartScheduler+0x134>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <xPortStartScheduler+0x134>)
 8004524:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <xPortStartScheduler+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800452e:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <xPortStartScheduler+0x134>)
 8004530:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <xPortStartScheduler+0x138>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <xPortStartScheduler+0x138>)
 8004540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004544:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <xPortStartScheduler+0x138>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a14      	ldr	r2, [pc, #80]	; (800459c <xPortStartScheduler+0x138>)
 800454c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004550:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004552:	f000 f963 	bl	800481c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <xPortStartScheduler+0x13c>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800455c:	f000 f982 	bl	8004864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <xPortStartScheduler+0x140>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <xPortStartScheduler+0x140>)
 8004566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800456c:	f7ff ff64 	bl	8004438 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004570:	f7ff f854 	bl	800361c <vTaskSwitchContext>
    prvTaskExitError();
 8004574:	f7ff ff1a 	bl	80043ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	410fc271 	.word	0x410fc271
 800458c:	410fc270 	.word	0x410fc270
 8004590:	e000e400 	.word	0xe000e400
 8004594:	20000174 	.word	0x20000174
 8004598:	20000178 	.word	0x20000178
 800459c:	e000ed20 	.word	0xe000ed20
 80045a0:	20000010 	.word	0x20000010
 80045a4:	e000ef34 	.word	0xe000ef34

080045a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <vInitPrioGroupValue+0xe4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <vInitPrioGroupValue+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10a      	bne.n	80045ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	613b      	str	r3, [r7, #16]
    }
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a30      	ldr	r2, [pc, #192]	; (8004694 <vInitPrioGroupValue+0xec>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <vInitPrioGroupValue+0xf0>)
 80045f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <vInitPrioGroupValue+0xf4>)
 8004614:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800461c:	e009      	b.n	8004632 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004626:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d0ef      	beq.n	800461e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00a      	beq.n	8004660 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
    }
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004668:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004672:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004674:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00
 8004690:	410fc271 	.word	0x410fc271
 8004694:	410fc270 	.word	0x410fc270
 8004698:	e000e400 	.word	0xe000e400
 800469c:	20000174 	.word	0x20000174
 80046a0:	20000178 	.word	0x20000178

080046a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
        __asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	607b      	str	r3, [r7, #4]
    }
 80046bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <vPortEnterCritical+0x58>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <vPortEnterCritical+0x58>)
 80046c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <vPortEnterCritical+0x58>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d10f      	bne.n	80046f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <vPortEnterCritical+0x5c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
    }
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <vPortEnterCritical+0x4a>
    }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20000010 	.word	0x20000010
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <vPortExitCritical+0x50>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <vPortExitCritical+0x24>
        __asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	607b      	str	r3, [r7, #4]
    }
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <vPortExitCritical+0x50>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <vPortExitCritical+0x50>)
 8004730:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <vPortExitCritical+0x50>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <vPortExitCritical+0x42>
 800473a:	2300      	movs	r3, #0
 800473c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f383 8811 	msr	BASEPRI, r3
    }
 8004744:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000010 	.word	0x20000010
	...

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f01e 0f10 	tst.w	lr, #16
 8004770:	bf08      	it	eq
 8004772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	6010      	str	r0, [r2, #0]
 800477c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004784:	f380 8811 	msr	BASEPRI, r0
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f7fe ff44 	bl	800361c <vTaskSwitchContext>
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f380 8811 	msr	BASEPRI, r0
 800479c:	bc09      	pop	{r0, r3}
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a6:	f01e 0f10 	tst.w	lr, #16
 80047aa:	bf08      	it	eq
 80047ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047b0:	f380 8809 	msr	PSP, r0
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst>:
 80047c0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
    }
 80047e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80047e2:	f002 f893 	bl	800690c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047e6:	f7fe fe5d 	bl	80034a4 <xTaskIncrementTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80047f0:	f002 f8ea 	bl	80069c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <SysTick_Handler+0x50>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e001      	b.n	8004802 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80047fe:	f002 f8c7 	bl	8006990 <SEGGER_SYSVIEW_RecordExitISR>
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f383 8811 	msr	BASEPRI, r3
    }
 800480c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <vPortSetupTimerInterrupt+0x38>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <vPortSetupTimerInterrupt+0x3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <vPortSetupTimerInterrupt+0x40>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <vPortSetupTimerInterrupt+0x44>)
 800483a:	3b01      	subs	r3, #1
 800483c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004840:	2207      	movs	r2, #7
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e010 	.word	0xe000e010
 8004854:	e000e018 	.word	0xe000e018
 8004858:	20000000 	.word	0x20000000
 800485c:	10624dd3 	.word	0x10624dd3
 8004860:	e000e014 	.word	0xe000e014

08004864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004874 <vPortEnableVFP+0x10>
 8004868:	6801      	ldr	r1, [r0, #0]
 800486a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800486e:	6001      	str	r1, [r0, #0]
 8004870:	4770      	bx	lr
 8004872:	0000      	.short	0x0000
 8004874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop

0800487c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004882:	f3ef 8305 	mrs	r3, IPSR
 8004886:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d914      	bls.n	80048b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <vPortValidateInterruptPriority+0x70>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <vPortValidateInterruptPriority+0x74>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	7afa      	ldrb	r2, [r7, #11]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20a      	bcs.n	80048b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
    }
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <vPortValidateInterruptPriority+0x78>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <vPortValidateInterruptPriority+0x7c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d90a      	bls.n	80048de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	603b      	str	r3, [r7, #0]
    }
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <vPortValidateInterruptPriority+0x60>
    }
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000e3f0 	.word	0xe000e3f0
 80048f0:	20000174 	.word	0x20000174
 80048f4:	e000ed0c 	.word	0xe000ed0c
 80048f8:	20000178 	.word	0x20000178

080048fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004908:	f7fe fcfc 	bl	8003304 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800490c:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <pvPortMalloc+0x1a8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004914:	f000 f934 	bl	8004b80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004918:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <pvPortMalloc+0x1ac>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 80a7 	bne.w	8004a74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02d      	beq.n	8004988 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800492c:	2208      	movs	r2, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d227      	bcs.n	8004988 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d021      	beq.n	800498e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d214      	bcs.n	8004982 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	3308      	adds	r3, #8
 8004960:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <pvPortMalloc+0x92>
        __asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	617b      	str	r3, [r7, #20]
    }
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004986:	e002      	b.n	800498e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e000      	b.n	8004990 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800498e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06e      	beq.n	8004a74 <pvPortMalloc+0x178>
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <pvPortMalloc+0x1b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d869      	bhi.n	8004a74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <pvPortMalloc+0x1b4>)
 80049a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <pvPortMalloc+0x1b4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049aa:	e004      	b.n	80049b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d903      	bls.n	80049c8 <pvPortMalloc+0xcc>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f1      	bne.n	80049ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <pvPortMalloc+0x1a8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d050      	beq.n	8004a74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2208      	movs	r2, #8
 80049d8:	4413      	add	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	2308      	movs	r3, #8
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d91f      	bls.n	8004a34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <pvPortMalloc+0x120>
        __asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	613b      	str	r3, [r7, #16]
    }
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a2e:	69b8      	ldr	r0, [r7, #24]
 8004a30:	f000 f908 	bl	8004c44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <pvPortMalloc+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d203      	bcs.n	8004a56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <pvPortMalloc+0x1b8>)
 8004a54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <pvPortMalloc+0x1ac>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <pvPortMalloc+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <pvPortMalloc+0x1bc>)
 8004a72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a74:	f7fe fc54 	bl	8003320 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <pvPortMalloc+0x19c>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
    }
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <pvPortMalloc+0x19a>
    return pvReturn;
 8004a98:	69fb      	ldr	r3, [r7, #28]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3728      	adds	r7, #40	; 0x28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20012d84 	.word	0x20012d84
 8004aa8:	20012d98 	.word	0x20012d98
 8004aac:	20012d88 	.word	0x20012d88
 8004ab0:	20012d7c 	.word	0x20012d7c
 8004ab4:	20012d8c 	.word	0x20012d8c
 8004ab8:	20012d90 	.word	0x20012d90

08004abc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04d      	beq.n	8004b6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <vPortFree+0xb8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <vPortFree+0x44>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60fb      	str	r3, [r7, #12]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <vPortFree+0x62>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60bb      	str	r3, [r7, #8]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <vPortFree+0xb8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01e      	beq.n	8004b6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11a      	bne.n	8004b6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <vPortFree+0xb8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b44:	f7fe fbde 	bl	8003304 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <vPortFree+0xbc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4413      	add	r3, r2
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <vPortFree+0xbc>)
 8004b54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f000 f874 	bl	8004c44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <vPortFree+0xc0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <vPortFree+0xc0>)
 8004b64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b66:	f7fe fbdb 	bl	8003320 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20012d98 	.word	0x20012d98
 8004b78:	20012d88 	.word	0x20012d88
 8004b7c:	20012d94 	.word	0x20012d94

08004b80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <prvHeapInit+0xac>)
 8004b8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <prvHeapInit+0xac>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <prvHeapInit+0xb0>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <prvHeapInit+0xb0>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bcc:	2208      	movs	r2, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <prvHeapInit+0xb4>)
 8004be0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <prvHeapInit+0xb4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <prvHeapInit+0xb4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvHeapInit+0xb4>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <prvHeapInit+0xb8>)
 8004c0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <prvHeapInit+0xbc>)
 8004c16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <prvHeapInit+0xc0>)
 8004c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	2000017c 	.word	0x2000017c
 8004c30:	20012d7c 	.word	0x20012d7c
 8004c34:	20012d84 	.word	0x20012d84
 8004c38:	20012d8c 	.word	0x20012d8c
 8004c3c:	20012d88 	.word	0x20012d88
 8004c40:	20012d98 	.word	0x20012d98

08004c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <prvInsertBlockIntoFreeList+0xac>)
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e002      	b.n	8004c58 <prvInsertBlockIntoFreeList+0x14>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d8f7      	bhi.n	8004c52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d108      	bne.n	8004c86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d118      	bne.n	8004ccc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d00d      	beq.n	8004cc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e008      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e003      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d002      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20012d7c 	.word	0x20012d7c
 8004cf4:	20012d84 	.word	0x20012d84

08004cf8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cfc:	4803      	ldr	r0, [pc, #12]	; (8004d0c <_cbSendSystemDesc+0x14>)
 8004cfe:	f001 fdaf 	bl	8006860 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d02:	4803      	ldr	r0, [pc, #12]	; (8004d10 <_cbSendSystemDesc+0x18>)
 8004d04:	f001 fdac 	bl	8006860 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d08:	bf00      	nop
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	08007020 	.word	0x08007020
 8004d10:	08007060 	.word	0x08007060

08004d14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d22:	4a06      	ldr	r2, [pc, #24]	; (8004d3c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d24:	f001 f91a 	bl	8005f5c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d2c:	f001 f95a 	bl	8005fe4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000000 	.word	0x20000000
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08007100 	.word	0x08007100

08004d40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e033      	b.n	8004db4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d4c:	491e      	ldr	r1, [pc, #120]	; (8004dc8 <_cbSendTaskList+0x88>)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	491a      	ldr	r1, [pc, #104]	; (8004dc8 <_cbSendTaskList+0x88>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	4c16      	ldr	r4, [pc, #88]	; (8004dc8 <_cbSendTaskList+0x88>)
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4423      	add	r3, r4
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	4d11      	ldr	r5, [pc, #68]	; (8004dc8 <_cbSendTaskList+0x88>)
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	442b      	add	r3, r5
 8004d8e:	330c      	adds	r3, #12
 8004d90:	681d      	ldr	r5, [r3, #0]
 8004d92:	4e0d      	ldr	r6, [pc, #52]	; (8004dc8 <_cbSendTaskList+0x88>)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4433      	add	r3, r6
 8004da0:	3310      	adds	r3, #16
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462b      	mov	r3, r5
 8004da8:	4622      	mov	r2, r4
 8004daa:	f000 f925 	bl	8004ff8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3301      	adds	r3, #1
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <_cbSendTaskList+0x8c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d3c6      	bcc.n	8004d4c <_cbSendTaskList+0xc>
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc8:	20012d9c 	.word	0x20012d9c
 8004dcc:	20012e3c 	.word	0x20012e3c

08004dd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004dd6:	f7fe fb53 	bl	8003480 <xTaskGetTickCountFromISR>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004de6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	f04f 0400 	mov.w	r4, #0
 8004df2:	f04f 0500 	mov.w	r5, #0
 8004df6:	015d      	lsls	r5, r3, #5
 8004df8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004dfc:	0154      	lsls	r4, r2, #5
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	1a12      	subs	r2, r2, r0
 8004e04:	eb63 0301 	sbc.w	r3, r3, r1
 8004e08:	f04f 0400 	mov.w	r4, #0
 8004e0c:	f04f 0500 	mov.w	r5, #0
 8004e10:	009d      	lsls	r5, r3, #2
 8004e12:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004e16:	0094      	lsls	r4, r2, #2
 8004e18:	4622      	mov	r2, r4
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	1812      	adds	r2, r2, r0
 8004e1e:	eb41 0303 	adc.w	r3, r1, r3
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	00d9      	lsls	r1, r3, #3
 8004e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e30:	00d0      	lsls	r0, r2, #3
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bdb0      	pop	{r4, r5, r7, pc}

08004e48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e56:	2205      	movs	r2, #5
 8004e58:	492b      	ldr	r1, [pc, #172]	; (8004f08 <SYSVIEW_AddTask+0xc0>)
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f002 f892 	bl	8006f84 <memcmp>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d04b      	beq.n	8004efe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e66:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b07      	cmp	r3, #7
 8004e6c:	d903      	bls.n	8004e76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e6e:	4828      	ldr	r0, [pc, #160]	; (8004f10 <SYSVIEW_AddTask+0xc8>)
 8004e70:	f002 f808 	bl	8006e84 <SEGGER_SYSVIEW_Warn>
    return;
 8004e74:	e044      	b.n	8004f00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e76:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4926      	ldr	r1, [pc, #152]	; (8004f14 <SYSVIEW_AddTask+0xcc>)
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4921      	ldr	r1, [pc, #132]	; (8004f14 <SYSVIEW_AddTask+0xcc>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	491b      	ldr	r1, [pc, #108]	; (8004f14 <SYSVIEW_AddTask+0xcc>)
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4916      	ldr	r1, [pc, #88]	; (8004f14 <SYSVIEW_AddTask+0xcc>)
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4910      	ldr	r1, [pc, #64]	; (8004f14 <SYSVIEW_AddTask+0xcc>)
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3310      	adds	r3, #16
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <SYSVIEW_AddTask+0xc4>)
 8004eea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f87e 	bl	8004ff8 <SYSVIEW_SendTaskInfo>
 8004efc:	e000      	b.n	8004f00 <SYSVIEW_AddTask+0xb8>
    return;
 8004efe:	bf00      	nop

}
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08007070 	.word	0x08007070
 8004f0c:	20012e3c 	.word	0x20012e3c
 8004f10:	08007078 	.word	0x08007078
 8004f14:	20012d9c 	.word	0x20012d9c

08004f18 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f26:	2205      	movs	r2, #5
 8004f28:	4930      	ldr	r1, [pc, #192]	; (8004fec <SYSVIEW_UpdateTask+0xd4>)
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f002 f82a 	bl	8006f84 <memcmp>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d056      	beq.n	8004fe4 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e00d      	b.n	8004f58 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004f3c:	492c      	ldr	r1, [pc, #176]	; (8004ff0 <SYSVIEW_UpdateTask+0xd8>)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d008      	beq.n	8004f64 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3301      	adds	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <SYSVIEW_UpdateTask+0xdc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3ec      	bcc.n	8004f3c <SYSVIEW_UpdateTask+0x24>
 8004f62:	e000      	b.n	8004f66 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004f64:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004f66:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <SYSVIEW_UpdateTask+0xdc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d230      	bcs.n	8004fd2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004f70:	491f      	ldr	r1, [pc, #124]	; (8004ff0 <SYSVIEW_UpdateTask+0xd8>)
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3304      	adds	r3, #4
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004f84:	491a      	ldr	r1, [pc, #104]	; (8004ff0 <SYSVIEW_UpdateTask+0xd8>)
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3308      	adds	r3, #8
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004f98:	4915      	ldr	r1, [pc, #84]	; (8004ff0 <SYSVIEW_UpdateTask+0xd8>)
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004fac:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <SYSVIEW_UpdateTask+0xd8>)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3310      	adds	r3, #16
 8004fbc:	6a3a      	ldr	r2, [r7, #32]
 8004fbe:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f814 	bl	8004ff8 <SYSVIEW_SendTaskInfo>
 8004fd0:	e009      	b.n	8004fe6 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ff33 	bl	8004e48 <SYSVIEW_AddTask>
 8004fe2:	e000      	b.n	8004fe6 <SYSVIEW_UpdateTask+0xce>
    return;
 8004fe4:	bf00      	nop
  }
}
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	08007070 	.word	0x08007070
 8004ff0:	20012d9c 	.word	0x20012d9c
 8004ff4:	20012e3c 	.word	0x20012e3c

08004ff8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2214      	movs	r2, #20
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f001 ffd4 	bl	8006fbc <memset>
  TaskInfo.TaskID     = TaskID;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fb1f 	bl	8006670 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005032:	bf00      	nop
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <_DoInit+0x98>)
 8005044:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2203      	movs	r2, #3
 800504a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2203      	movs	r2, #3
 8005050:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <_DoInit+0x9c>)
 8005056:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <_DoInit+0xa0>)
 800505c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005064:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <_DoInit+0x9c>)
 800507c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <_DoInit+0xa4>)
 8005082:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2210      	movs	r2, #16
 8005088:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3307      	adds	r3, #7
 80050a0:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <_DoInit+0xa8>)
 80050a2:	6810      	ldr	r0, [r2, #0]
 80050a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <_DoInit+0xac>)
 80050ae:	6810      	ldr	r0, [r2, #0]
 80050b0:	6018      	str	r0, [r3, #0]
 80050b2:	8891      	ldrh	r1, [r2, #4]
 80050b4:	7992      	ldrb	r2, [r2, #6]
 80050b6:	8099      	strh	r1, [r3, #4]
 80050b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050c4:	f3bf 8f5f 	dmb	sy
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	2001440c 	.word	0x2001440c
 80050d8:	080070c8 	.word	0x080070c8
 80050dc:	20012e40 	.word	0x20012e40
 80050e0:	20013240 	.word	0x20013240
 80050e4:	080070d4 	.word	0x080070d4
 80050e8:	080070d8 	.word	0x080070d8

080050ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050f8:	4b3e      	ldr	r3, [pc, #248]	; (80051f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <SEGGER_RTT_ReadNoLock+0x1e>
 8005106:	f7ff ff99 	bl	800503c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	3360      	adds	r3, #96	; 0x60
 8005116:	4a37      	ldr	r2, [pc, #220]	; (80051f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800512c:	2300      	movs	r3, #0
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	429a      	cmp	r2, r3
 8005136:	d92b      	bls.n	8005190 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4293      	cmp	r3, r2
 8005148:	bf28      	it	cs
 800514a:	4613      	movcs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	4413      	add	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515e:	f001 ff1f 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800517a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005188:	429a      	cmp	r2, r3
 800518a:	d101      	bne.n	8005190 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800518c:	2300      	movs	r3, #0
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4293      	cmp	r3, r2
 800519e:	bf28      	it	cs
 80051a0:	4613      	movcs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d019      	beq.n	80051de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	4413      	add	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ba:	f001 fef1 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 80051be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4413      	add	r3, r2
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3730      	adds	r7, #48	; 0x30
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	2001440c 	.word	0x2001440c

080051f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005206:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005214:	f7ff ff12 	bl	800503c <_DoInit>
  SEGGER_RTT_LOCK();
 8005218:	f3ef 8311 	mrs	r3, BASEPRI
 800521c:	f04f 0120 	mov.w	r1, #32
 8005220:	f381 8811 	msr	BASEPRI, r1
 8005224:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005226:	4b35      	ldr	r3, [pc, #212]	; (80052fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005228:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800522e:	6939      	ldr	r1, [r7, #16]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3304      	adds	r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	429a      	cmp	r2, r3
 8005254:	dbeb      	blt.n	800522e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005256:	e000      	b.n	800525a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005258:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	429a      	cmp	r2, r3
 8005262:	da3f      	bge.n	80052e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005264:	6939      	ldr	r1, [r7, #16]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005278:	6939      	ldr	r1, [r7, #16]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	440b      	add	r3, r1
 8005288:	3304      	adds	r3, #4
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800528e:	6939      	ldr	r1, [r7, #16]
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	440b      	add	r3, r1
 800529c:	3320      	adds	r3, #32
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80052a2:	6939      	ldr	r1, [r7, #16]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	440b      	add	r3, r1
 80052b0:	3328      	adds	r3, #40	; 0x28
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	440b      	add	r3, r1
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052ca:	6939      	ldr	r1, [r7, #16]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	4613      	mov	r3, r2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	332c      	adds	r3, #44	; 0x2c
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052de:	f3bf 8f5f 	dmb	sy
 80052e2:	e002      	b.n	80052ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052f0:	69fb      	ldr	r3, [r7, #28]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	2001440c 	.word	0x2001440c

08005300 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800530e:	4b33      	ldr	r3, [pc, #204]	; (80053dc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800531c:	f7ff fe8e 	bl	800503c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005320:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005322:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	461a      	mov	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4293      	cmp	r3, r2
 800532e:	d24d      	bcs.n	80053cc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	f04f 0120 	mov.w	r1, #32
 8005338:	f381 8811 	msr	BASEPRI, r1
 800533c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d031      	beq.n	80053a8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005344:	6979      	ldr	r1, [r7, #20]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	3360      	adds	r3, #96	; 0x60
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3364      	adds	r3, #100	; 0x64
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	3368      	adds	r3, #104	; 0x68
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	3370      	adds	r3, #112	; 0x70
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	336c      	adds	r3, #108	; 0x6c
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80053a8:	6979      	ldr	r1, [r7, #20]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	440b      	add	r3, r1
 80053b6:	3374      	adds	r3, #116	; 0x74
 80053b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ba:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053bc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e002      	b.n	80053d2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80053d2:	69fb      	ldr	r3, [r7, #28]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	2001440c 	.word	0x2001440c

080053e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053f0:	e002      	b.n	80053f8 <_EncodeStr+0x18>
    Len++;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3301      	adds	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f6      	bne.n	80053f2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d901      	bls.n	8005410 <_EncodeStr+0x30>
    Len = Limit;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2bfe      	cmp	r3, #254	; 0xfe
 8005414:	d806      	bhi.n	8005424 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	60fa      	str	r2, [r7, #12]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e011      	b.n	8005448 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	60fa      	str	r2, [r7, #12]
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	0a19      	lsrs	r1, r3, #8
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	b2ca      	uxtb	r2, r1
 8005446:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800544c:	e00a      	b.n	8005464 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	1c53      	adds	r3, r2, #1
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	60f9      	str	r1, [r7, #12]
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	701a      	strb	r2, [r3, #0]
    n++;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	3301      	adds	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d3f0      	bcc.n	800544e <_EncodeStr+0x6e>
  }
  return pPayload;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <_HandleIncomingPacket+0xe0>)
 800549c:	7e1b      	ldrb	r3, [r3, #24]
 800549e:	4618      	mov	r0, r3
 80054a0:	1cfb      	adds	r3, r7, #3
 80054a2:	2201      	movs	r2, #1
 80054a4:	4619      	mov	r1, r3
 80054a6:	f7ff fe21 	bl	80050ec <SEGGER_RTT_ReadNoLock>
 80054aa:	4603      	mov	r3, r0
 80054ac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dd54      	ble.n	800555e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d032      	beq.n	8005520 <_HandleIncomingPacket+0x8c>
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	dc42      	bgt.n	8005544 <_HandleIncomingPacket+0xb0>
 80054be:	2b07      	cmp	r3, #7
 80054c0:	dc16      	bgt.n	80054f0 <_HandleIncomingPacket+0x5c>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dd3e      	ble.n	8005544 <_HandleIncomingPacket+0xb0>
 80054c6:	3b01      	subs	r3, #1
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d83b      	bhi.n	8005544 <_HandleIncomingPacket+0xb0>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <_HandleIncomingPacket+0x40>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054f7 	.word	0x080054f7
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005503 	.word	0x08005503
 80054e0:	08005509 	.word	0x08005509
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	2b7f      	cmp	r3, #127	; 0x7f
 80054f2:	d036      	beq.n	8005562 <_HandleIncomingPacket+0xce>
 80054f4:	e026      	b.n	8005544 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80054f6:	f000 ff41 	bl	800637c <SEGGER_SYSVIEW_Start>
      break;
 80054fa:	e037      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054fc:	f000 fff8 	bl	80064f0 <SEGGER_SYSVIEW_Stop>
      break;
 8005500:	e034      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005502:	f001 f9d1 	bl	80068a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005506:	e031      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005508:	f001 f996 	bl	8006838 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800550c:	e02e      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800550e:	f001 f815 	bl	800653c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005512:	e02b      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005514:	f001 fc64 	bl	8006de0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005518:	e028      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800551a:	f001 fc43 	bl	8006da4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800551e:	e025      	b.n	800556c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <_HandleIncomingPacket+0xe0>)
 8005522:	7e1b      	ldrb	r3, [r3, #24]
 8005524:	4618      	mov	r0, r3
 8005526:	1cfb      	adds	r3, r7, #3
 8005528:	2201      	movs	r2, #1
 800552a:	4619      	mov	r1, r3
 800552c:	f7ff fdde 	bl	80050ec <SEGGER_RTT_ReadNoLock>
 8005530:	4603      	mov	r3, r0
 8005532:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	dd15      	ble.n	8005566 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	4618      	mov	r0, r3
 800553e:	f001 fbb1 	bl	8006ca4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005542:	e010      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	b25b      	sxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	da0e      	bge.n	800556a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <_HandleIncomingPacket+0xe0>)
 800554e:	7e1b      	ldrb	r3, [r3, #24]
 8005550:	4618      	mov	r0, r3
 8005552:	1cfb      	adds	r3, r7, #3
 8005554:	2201      	movs	r2, #1
 8005556:	4619      	mov	r1, r3
 8005558:	f7ff fdc8 	bl	80050ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 800555c:	e005      	b.n	800556a <_HandleIncomingPacket+0xd6>
    }
  }
 800555e:	bf00      	nop
 8005560:	e004      	b.n	800556c <_HandleIncomingPacket+0xd8>
      break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <_HandleIncomingPacket+0xd8>
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <_HandleIncomingPacket+0xd8>
      break;
 800556a:	bf00      	nop
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20014258 	.word	0x20014258

08005578 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800557e:	2301      	movs	r3, #1
 8005580:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	3301      	adds	r3, #1
 8005586:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	4b31      	ldr	r3, [pc, #196]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	e00b      	b.n	80055ac <_TrySendOverflowPacket+0x34>
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	b2da      	uxtb	r2, r3
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800559e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b7f      	cmp	r3, #127	; 0x7f
 80055b0:	d8f0      	bhi.n	8005594 <_TrySendOverflowPacket+0x1c>
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <_TrySendOverflowPacket+0xe0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055c8:	4b22      	ldr	r3, [pc, #136]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	e00b      	b.n	80055f4 <_TrySendOverflowPacket+0x7c>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6279      	str	r1, [r7, #36]	; 0x24
 80055e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b7f      	cmp	r3, #127	; 0x7f
 80055f8:	d8f0      	bhi.n	80055dc <_TrySendOverflowPacket+0x64>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800560a:	4b12      	ldr	r3, [pc, #72]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	4618      	mov	r0, r3
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	461a      	mov	r2, r3
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	4619      	mov	r1, r3
 800561c:	f7fa fdd8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005620:	4603      	mov	r3, r0
 8005622:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	3b01      	subs	r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e004      	b.n	8005648 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <_TrySendOverflowPacket+0xdc>)
 8005646:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005648:	693b      	ldr	r3, [r7, #16]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20014258 	.word	0x20014258
 8005658:	e0001004 	.word	0xe0001004

0800565c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005668:	4b6c      	ldr	r3, [pc, #432]	; (800581c <_SendPacket+0x1c0>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d010      	beq.n	8005692 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005670:	4b6a      	ldr	r3, [pc, #424]	; (800581c <_SendPacket+0x1c0>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a3 	beq.w	80057c0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800567a:	4b68      	ldr	r3, [pc, #416]	; (800581c <_SendPacket+0x1c0>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d109      	bne.n	8005696 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005682:	f7ff ff79 	bl	8005578 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <_SendPacket+0x1c0>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f040 809a 	bne.w	80057c4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005690:	e001      	b.n	8005696 <_SendPacket+0x3a>
    goto Send;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <_SendPacket+0x3c>
Send:
 8005696:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b1f      	cmp	r3, #31
 800569c:	d809      	bhi.n	80056b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800569e:	4b5f      	ldr	r3, [pc, #380]	; (800581c <_SendPacket+0x1c0>)
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 808b 	bne.w	80057c8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b17      	cmp	r3, #23
 80056b6:	d807      	bhi.n	80056c8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e03d      	b.n	8005744 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d912      	bls.n	80056fc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	09da      	lsrs	r2, r3, #7
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3b01      	subs	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	3a01      	subs	r2, #1
 80056ee:	60fa      	str	r2, [r7, #12]
 80056f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e006      	b.n	800570a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d912      	bls.n	8005736 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	09da      	lsrs	r2, r3, #7
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3b01      	subs	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	3a01      	subs	r2, #1
 8005728:	60fa      	str	r2, [r7, #12]
 800572a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e006      	b.n	8005744 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b01      	subs	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <_SendPacket+0x1c4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800574a:	4b34      	ldr	r3, [pc, #208]	; (800581c <_SendPacket+0x1c0>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	e00b      	b.n	8005776 <_SendPacket+0x11a>
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1c59      	adds	r1, r3, #1
 8005766:	6279      	str	r1, [r7, #36]	; 0x24
 8005768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	09db      	lsrs	r3, r3, #7
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	2b7f      	cmp	r3, #127	; 0x7f
 800577a:	d8f0      	bhi.n	800575e <_SendPacket+0x102>
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	627a      	str	r2, [r7, #36]	; 0x24
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800578c:	4b23      	ldr	r3, [pc, #140]	; (800581c <_SendPacket+0x1c0>)
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	4618      	mov	r0, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	461a      	mov	r2, r3
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f7fa fd18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057a0:	4603      	mov	r3, r0
 80057a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057aa:	4a1c      	ldr	r2, [pc, #112]	; (800581c <_SendPacket+0x1c0>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	60d3      	str	r3, [r2, #12]
 80057b0:	e00b      	b.n	80057ca <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <_SendPacket+0x1c0>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <_SendPacket+0x1c0>)
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e004      	b.n	80057ca <_SendPacket+0x16e>
    goto SendDone;
 80057c0:	bf00      	nop
 80057c2:	e002      	b.n	80057ca <_SendPacket+0x16e>
      goto SendDone;
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <_SendPacket+0x16e>
      goto SendDone;
 80057c8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <_SendPacket+0x1c0>)
 80057cc:	7e1b      	ldrb	r3, [r3, #24]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4a14      	ldr	r2, [pc, #80]	; (8005824 <_SendPacket+0x1c8>)
 80057d2:	460b      	mov	r3, r1
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	440b      	add	r3, r1
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	336c      	adds	r3, #108	; 0x6c
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <_SendPacket+0x1c0>)
 80057e2:	7e1b      	ldrb	r3, [r3, #24]
 80057e4:	4618      	mov	r0, r3
 80057e6:	490f      	ldr	r1, [pc, #60]	; (8005824 <_SendPacket+0x1c8>)
 80057e8:	4603      	mov	r3, r0
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4403      	add	r3, r0
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	3370      	adds	r3, #112	; 0x70
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d00b      	beq.n	8005812 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <_SendPacket+0x1c0>)
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <_SendPacket+0x1c0>)
 8005804:	2201      	movs	r2, #1
 8005806:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005808:	f7ff fe44 	bl	8005494 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <_SendPacket+0x1c0>)
 800580e:	2200      	movs	r2, #0
 8005810:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005812:	bf00      	nop
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20014258 	.word	0x20014258
 8005820:	e0001004 	.word	0xe0001004
 8005824:	2001440c 	.word	0x2001440c

08005828 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3301      	adds	r3, #1
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d80a      	bhi.n	8005858 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6051      	str	r1, [r2, #4]
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d15a      	bne.n	8005916 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	e00b      	b.n	800589a <_StoreChar+0x72>
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	6279      	str	r1, [r7, #36]	; 0x24
 800588c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	09db      	lsrs	r3, r3, #7
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2b7f      	cmp	r3, #127	; 0x7f
 800589e:	d8f0      	bhi.n	8005882 <_StoreChar+0x5a>
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	627a      	str	r2, [r7, #36]	; 0x24
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	e00b      	b.n	80058d2 <_StoreChar+0xaa>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	61f9      	str	r1, [r7, #28]
 80058c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	09db      	lsrs	r3, r3, #7
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b7f      	cmp	r3, #127	; 0x7f
 80058d6:	d8f0      	bhi.n	80058ba <_StoreChar+0x92>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	221a      	movs	r2, #26
 80058ee:	6939      	ldr	r1, [r7, #16]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff feb3 	bl	800565c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fdbd 	bl	800547a <_PreparePacket>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	611a      	str	r2, [r3, #16]
  }
}
 8005916:	bf00      	nop
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005932:	2301      	movs	r3, #1
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005936:	2301      	movs	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800593a:	e007      	b.n	800594c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	623b      	str	r3, [r7, #32]
    Width++;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d2f3      	bcs.n	800593c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	429a      	cmp	r2, r3
 800595a:	d901      	bls.n	8005960 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11f      	bne.n	80059aa <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01c      	beq.n	80059aa <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <_PrintUnsigned+0x66>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <_PrintUnsigned+0x66>
        c = '0';
 8005980:	2330      	movs	r3, #48	; 0x30
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e001      	b.n	800598a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005986:	2320      	movs	r3, #32
 8005988:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800598a:	e007      	b.n	800599c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	3b01      	subs	r3, #1
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005992:	7efb      	ldrb	r3, [r7, #27]
 8005994:	4619      	mov	r1, r3
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff46 	bl	8005828 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <_PrintUnsigned+0x8a>
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3f0      	bcc.n	800598c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d903      	bls.n	80059b8 <_PrintUnsigned+0x98>
      NumDigits--;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	e009      	b.n	80059cc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d200      	bcs.n	80059cc <_PrintUnsigned+0xac>
        break;
 80059ca:	e005      	b.n	80059d8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059d6:	e7e8      	b.n	80059aa <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <_PrintUnsigned+0x128>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff ff14 	bl	8005828 <_StoreChar>
    Digit /= Base;
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e3      	bne.n	80059d8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a20:	e006      	b.n	8005a30 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	3b01      	subs	r3, #1
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a28:	2120      	movs	r1, #32
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fefc 	bl	8005828 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <_PrintUnsigned+0x11e>
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3f1      	bcc.n	8005a22 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3728      	adds	r7, #40	; 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	08007114 	.word	0x08007114

08005a4c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfb8      	it	lt
 8005a60:	425b      	neglt	r3, r3
 8005a62:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a68:	e007      	b.n	8005a7a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a72:	613b      	str	r3, [r7, #16]
    Width++;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	3301      	adds	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	daf3      	bge.n	8005a6a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d901      	bls.n	8005a8e <_PrintInt+0x42>
    Width = NumDigits;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <_PrintInt+0x5e>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	db04      	blt.n	8005aa4 <_PrintInt+0x58>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <_PrintInt+0x5e>
    FieldWidth--;
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <_PrintInt+0x6e>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <_PrintInt+0x9c>
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d111      	bne.n	8005ae8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aca:	e006      	b.n	8005ada <_PrintInt+0x8e>
        FieldWidth--;
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff fea7 	bl	8005828 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <_PrintInt+0x9c>
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3f1      	bcc.n	8005acc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da07      	bge.n	8005afe <_PrintInt+0xb2>
    v = -v;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	425b      	negs	r3, r3
 8005af2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005af4:	212d      	movs	r1, #45	; 0x2d
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fe96 	bl	8005828 <_StoreChar>
 8005afc:	e008      	b.n	8005b10 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b08:	212b      	movs	r1, #43	; 0x2b
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fe8c 	bl	8005828 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d019      	beq.n	8005b4e <_PrintInt+0x102>
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d114      	bne.n	8005b4e <_PrintInt+0x102>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d111      	bne.n	8005b4e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b30:	e006      	b.n	8005b40 <_PrintInt+0xf4>
        FieldWidth--;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b38:	2130      	movs	r1, #48	; 0x30
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fe74 	bl	8005828 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <_PrintInt+0x102>
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d3f1      	bcc.n	8005b32 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff fedf 	bl	8005920 <_PrintUnsigned>
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b098      	sub	sp, #96	; 0x60
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b78:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7c:	f04f 0120 	mov.w	r1, #32
 8005b80:	f381 8811 	msr	BASEPRI, r1
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
 8005b86:	48b7      	ldr	r0, [pc, #732]	; (8005e64 <_VPrintTarget+0x2f8>)
 8005b88:	f7ff fc77 	bl	800547a <_PreparePacket>
 8005b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b8e:	4bb5      	ldr	r3, [pc, #724]	; (8005e64 <_VPrintTarget+0x2f8>)
 8005b90:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8183 	beq.w	8005ec2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bc0:	2b25      	cmp	r3, #37	; 0x25
 8005bc2:	f040 8170 	bne.w	8005ea6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bda:	3b23      	subs	r3, #35	; 0x23
 8005bdc:	2b0d      	cmp	r3, #13
 8005bde:	d83f      	bhi.n	8005c60 <_VPrintTarget+0xf4>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <_VPrintTarget+0x7c>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005c61 	.word	0x08005c61
 8005bf0:	08005c61 	.word	0x08005c61
 8005bf4:	08005c61 	.word	0x08005c61
 8005bf8:	08005c61 	.word	0x08005c61
 8005bfc:	08005c61 	.word	0x08005c61
 8005c00:	08005c61 	.word	0x08005c61
 8005c04:	08005c61 	.word	0x08005c61
 8005c08:	08005c41 	.word	0x08005c41
 8005c0c:	08005c61 	.word	0x08005c61
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c61 	.word	0x08005c61
 8005c18:	08005c61 	.word	0x08005c61
 8005c1c:	08005c31 	.word	0x08005c31
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e01a      	b.n	8005c66 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	f043 0302 	orr.w	r3, r3, #2
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e012      	b.n	8005c66 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c42:	f043 0304 	orr.w	r3, r3, #4
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e00a      	b.n	8005c66 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c52:	f043 0308 	orr.w	r3, r3, #8
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e002      	b.n	8005c66 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c60:	2300      	movs	r3, #0
 8005c62:	653b      	str	r3, [r7, #80]	; 0x50
 8005c64:	bf00      	nop
        }
      } while (v);
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1b0      	bne.n	8005bce <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c7e:	d912      	bls.n	8005ca6 <_VPrintTarget+0x13a>
 8005c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c84:	2b39      	cmp	r3, #57	; 0x39
 8005c86:	d80e      	bhi.n	8005ca6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3b30      	subs	r3, #48	; 0x30
 8005ca2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005ca4:	e7e4      	b.n	8005c70 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb8:	d11d      	bne.n	8005cf6 <_VPrintTarget+0x18a>
        sFormat++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8005cce:	d912      	bls.n	8005cf6 <_VPrintTarget+0x18a>
 8005cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd4:	2b39      	cmp	r3, #57	; 0x39
 8005cd6:	d80e      	bhi.n	8005cf6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cee:	4413      	add	r3, r2
 8005cf0:	3b30      	subs	r3, #48	; 0x30
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005cf4:	e7e4      	b.n	8005cc0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d02:	2b6c      	cmp	r3, #108	; 0x6c
 8005d04:	d003      	beq.n	8005d0e <_VPrintTarget+0x1a2>
 8005d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0a:	2b68      	cmp	r3, #104	; 0x68
 8005d0c:	d107      	bne.n	8005d1e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d1c:	e7ef      	b.n	8005cfe <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d22:	2b25      	cmp	r3, #37	; 0x25
 8005d24:	f000 80b3 	beq.w	8005e8e <_VPrintTarget+0x322>
 8005d28:	2b25      	cmp	r3, #37	; 0x25
 8005d2a:	f2c0 80b7 	blt.w	8005e9c <_VPrintTarget+0x330>
 8005d2e:	2b78      	cmp	r3, #120	; 0x78
 8005d30:	f300 80b4 	bgt.w	8005e9c <_VPrintTarget+0x330>
 8005d34:	2b58      	cmp	r3, #88	; 0x58
 8005d36:	f2c0 80b1 	blt.w	8005e9c <_VPrintTarget+0x330>
 8005d3a:	3b58      	subs	r3, #88	; 0x58
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	f200 80ad 	bhi.w	8005e9c <_VPrintTarget+0x330>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <_VPrintTarget+0x1dc>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005e3f 	.word	0x08005e3f
 8005d4c:	08005e9d 	.word	0x08005e9d
 8005d50:	08005e9d 	.word	0x08005e9d
 8005d54:	08005e9d 	.word	0x08005e9d
 8005d58:	08005e9d 	.word	0x08005e9d
 8005d5c:	08005e9d 	.word	0x08005e9d
 8005d60:	08005e9d 	.word	0x08005e9d
 8005d64:	08005e9d 	.word	0x08005e9d
 8005d68:	08005e9d 	.word	0x08005e9d
 8005d6c:	08005e9d 	.word	0x08005e9d
 8005d70:	08005e9d 	.word	0x08005e9d
 8005d74:	08005dcd 	.word	0x08005dcd
 8005d78:	08005df3 	.word	0x08005df3
 8005d7c:	08005e9d 	.word	0x08005e9d
 8005d80:	08005e9d 	.word	0x08005e9d
 8005d84:	08005e9d 	.word	0x08005e9d
 8005d88:	08005e9d 	.word	0x08005e9d
 8005d8c:	08005e9d 	.word	0x08005e9d
 8005d90:	08005e9d 	.word	0x08005e9d
 8005d94:	08005e9d 	.word	0x08005e9d
 8005d98:	08005e9d 	.word	0x08005e9d
 8005d9c:	08005e9d 	.word	0x08005e9d
 8005da0:	08005e9d 	.word	0x08005e9d
 8005da4:	08005e9d 	.word	0x08005e9d
 8005da8:	08005e69 	.word	0x08005e69
 8005dac:	08005e9d 	.word	0x08005e9d
 8005db0:	08005e9d 	.word	0x08005e9d
 8005db4:	08005e9d 	.word	0x08005e9d
 8005db8:	08005e9d 	.word	0x08005e9d
 8005dbc:	08005e19 	.word	0x08005e19
 8005dc0:	08005e9d 	.word	0x08005e9d
 8005dc4:	08005e9d 	.word	0x08005e9d
 8005dc8:	08005e3f 	.word	0x08005e3f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1d19      	adds	r1, r3, #4
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005de0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005de4:	f107 0314 	add.w	r3, r7, #20
 8005de8:	4611      	mov	r1, r2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fd1c 	bl	8005828 <_StoreChar>
        break;
 8005df0:	e055      	b.n	8005e9e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	1d19      	adds	r1, r3, #4
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e00:	f107 0014 	add.w	r0, r7, #20
 8005e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0e:	220a      	movs	r2, #10
 8005e10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e12:	f7ff fe1b 	bl	8005a4c <_PrintInt>
        break;
 8005e16:	e042      	b.n	8005e9e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e28:	f107 0014 	add.w	r0, r7, #20
 8005e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e36:	220a      	movs	r2, #10
 8005e38:	f7ff fd72 	bl	8005920 <_PrintUnsigned>
        break;
 8005e3c:	e02f      	b.n	8005e9e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	1d19      	adds	r1, r3, #4
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6011      	str	r1, [r2, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e4e:	f107 0014 	add.w	r0, r7, #20
 8005e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	f7ff fd5f 	bl	8005920 <_PrintUnsigned>
        break;
 8005e62:	e01c      	b.n	8005e9e <_VPrintTarget+0x332>
 8005e64:	20014288 	.word	0x20014288
      case 'p':
        v = va_arg(*pParamList, int);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e78:	f107 0014 	add.w	r0, r7, #20
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	2308      	movs	r3, #8
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2308      	movs	r3, #8
 8005e86:	2210      	movs	r2, #16
 8005e88:	f7ff fd4a 	bl	8005920 <_PrintUnsigned>
        break;
 8005e8c:	e007      	b.n	8005e9e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e8e:	f107 0314 	add.w	r3, r7, #20
 8005e92:	2125      	movs	r1, #37	; 0x25
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fcc7 	bl	8005828 <_StoreChar>
        break;
 8005e9a:	e000      	b.n	8005e9e <_VPrintTarget+0x332>
      default:
        break;
 8005e9c:	bf00      	nop
      }
      sFormat++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e007      	b.n	8005eb6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ea6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005eaa:	f107 0314 	add.w	r3, r7, #20
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fcb9 	bl	8005828 <_StoreChar>
    }
  } while (*sFormat);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f ae72 	bne.w	8005ba4 <_VPrintTarget+0x38>
 8005ec0:	e000      	b.n	8005ec4 <_VPrintTarget+0x358>
      break;
 8005ec2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d041      	beq.n	8005f4e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eda:	e00b      	b.n	8005ef4 <_VPrintTarget+0x388>
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee2:	1c59      	adds	r1, r3, #1
 8005ee4:	6439      	str	r1, [r7, #64]	; 0x40
 8005ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef0:	09db      	lsrs	r3, r3, #7
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef8:	d8f0      	bhi.n	8005edc <_VPrintTarget+0x370>
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	643a      	str	r2, [r7, #64]	; 0x40
 8005f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f08:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f0e:	2300      	movs	r3, #0
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	e00b      	b.n	8005f2c <_VPrintTarget+0x3c0>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f30:	d8f0      	bhi.n	8005f14 <_VPrintTarget+0x3a8>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	221a      	movs	r2, #26
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fb87 	bl	800565c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f54:	bf00      	nop
 8005f56:	3758      	adds	r7, #88	; 0x58
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f70:	4917      	ldr	r1, [pc, #92]	; (8005fd0 <SEGGER_SYSVIEW_Init+0x74>)
 8005f72:	4818      	ldr	r0, [pc, #96]	; (8005fd4 <SEGGER_SYSVIEW_Init+0x78>)
 8005f74:	f7ff f940 	bl	80051f8 <SEGGER_RTT_AllocUpBuffer>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f7e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f82:	785a      	ldrb	r2, [r3, #1]
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f86:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8a:	7e1b      	ldrb	r3, [r3, #24]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	2308      	movs	r3, #8
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <SEGGER_SYSVIEW_Init+0x80>)
 8005f96:	490f      	ldr	r1, [pc, #60]	; (8005fd4 <SEGGER_SYSVIEW_Init+0x78>)
 8005f98:	f7ff f9b2 	bl	8005300 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f9c:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <SEGGER_SYSVIEW_Init+0x84>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005faa:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005fb0:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20013250 	.word	0x20013250
 8005fd4:	080070e0 	.word	0x080070e0
 8005fd8:	20014258 	.word	0x20014258
 8005fdc:	20014250 	.word	0x20014250
 8005fe0:	e0001004 	.word	0xe0001004

08005fe4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fec:	4a04      	ldr	r2, [pc, #16]	; (8006000 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6113      	str	r3, [r2, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20014258 	.word	0x20014258

08006004 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800600c:	f3ef 8311 	mrs	r3, BASEPRI
 8006010:	f04f 0120 	mov.w	r1, #32
 8006014:	f381 8811 	msr	BASEPRI, r1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	4808      	ldr	r0, [pc, #32]	; (800603c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800601c:	f7ff fa2d 	bl	800547a <_PreparePacket>
 8006020:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f7ff fb18 	bl	800565c <_SendPacket>
  RECORD_END();
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f383 8811 	msr	BASEPRI, r3
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20014288 	.word	0x20014288

08006040 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800604a:	f3ef 8311 	mrs	r3, BASEPRI
 800604e:	f04f 0120 	mov.w	r1, #32
 8006052:	f381 8811 	msr	BASEPRI, r1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	4816      	ldr	r0, [pc, #88]	; (80060b4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800605a:	f7ff fa0e 	bl	800547a <_PreparePacket>
 800605e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e00b      	b.n	8006086 <SEGGER_SYSVIEW_RecordU32+0x46>
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	61f9      	str	r1, [r7, #28]
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6938      	ldr	r0, [r7, #16]
 80060a2:	f7ff fadb 	bl	800565c <_SendPacket>
  RECORD_END();
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f383 8811 	msr	BASEPRI, r3
}
 80060ac:	bf00      	nop
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20014288 	.word	0x20014288

080060b8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060c4:	f3ef 8311 	mrs	r3, BASEPRI
 80060c8:	f04f 0120 	mov.w	r1, #32
 80060cc:	f381 8811 	msr	BASEPRI, r1
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	4825      	ldr	r0, [pc, #148]	; (8006168 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060d4:	f7ff f9d1 	bl	800547a <_PreparePacket>
 80060d8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	e00b      	b.n	8006100 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	09db      	lsrs	r3, r3, #7
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b7f      	cmp	r3, #127	; 0x7f
 8006104:	d8f0      	bhi.n	80060e8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	e00b      	b.n	8006138 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	6279      	str	r1, [r7, #36]	; 0x24
 800612a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b7f      	cmp	r3, #127	; 0x7f
 800613c:	d8f0      	bhi.n	8006120 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	627a      	str	r2, [r7, #36]	; 0x24
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	6979      	ldr	r1, [r7, #20]
 8006152:	69b8      	ldr	r0, [r7, #24]
 8006154:	f7ff fa82 	bl	800565c <_SendPacket>
  RECORD_END();
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
 8006160:	3730      	adds	r7, #48	; 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20014288 	.word	0x20014288

0800616c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	; 0x38
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	4832      	ldr	r0, [pc, #200]	; (8006254 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800618a:	f7ff f976 	bl	800547a <_PreparePacket>
 800618e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	6379      	str	r1, [r7, #52]	; 0x34
 80061a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	637a      	str	r2, [r7, #52]	; 0x34
 80061c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d4:	e00b      	b.n	80061ee <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	09db      	lsrs	r3, r3, #7
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d8f0      	bhi.n	80061d6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	e00b      	b.n	8006226 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1c59      	adds	r1, r3, #1
 8006216:	6279      	str	r1, [r7, #36]	; 0x24
 8006218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	09db      	lsrs	r3, r3, #7
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b7f      	cmp	r3, #127	; 0x7f
 800622a:	d8f0      	bhi.n	800620e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	627a      	str	r2, [r7, #36]	; 0x24
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	6979      	ldr	r1, [r7, #20]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f7ff fa0b 	bl	800565c <_SendPacket>
  RECORD_END();
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f383 8811 	msr	BASEPRI, r3
}
 800624c:	bf00      	nop
 800624e:	3738      	adds	r7, #56	; 0x38
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20014288 	.word	0x20014288

08006258 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b090      	sub	sp, #64	; 0x40
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	f04f 0120 	mov.w	r1, #32
 800626e:	f381 8811 	msr	BASEPRI, r1
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	4840      	ldr	r0, [pc, #256]	; (8006378 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006276:	f7ff f900 	bl	800547a <_PreparePacket>
 800627a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	63bb      	str	r3, [r7, #56]	; 0x38
 8006288:	e00b      	b.n	80062a2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006294:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	09db      	lsrs	r3, r3, #7
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b7f      	cmp	r3, #127	; 0x7f
 80062a6:	d8f0      	bhi.n	800628a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	633b      	str	r3, [r7, #48]	; 0x30
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	6379      	str	r1, [r7, #52]	; 0x34
 80062cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2b7f      	cmp	r3, #127	; 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	637a      	str	r2, [r7, #52]	; 0x34
 80062e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f8:	e00b      	b.n	8006312 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	2b7f      	cmp	r3, #127	; 0x7f
 8006316:	d8f0      	bhi.n	80062fa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	e00b      	b.n	800634a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	6279      	str	r1, [r7, #36]	; 0x24
 800633c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2b7f      	cmp	r3, #127	; 0x7f
 800634e:	d8f0      	bhi.n	8006332 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	627a      	str	r2, [r7, #36]	; 0x24
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6979      	ldr	r1, [r7, #20]
 8006364:	69b8      	ldr	r0, [r7, #24]
 8006366:	f7ff f979 	bl	800565c <_SendPacket>
  RECORD_END();
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f383 8811 	msr	BASEPRI, r3
}
 8006370:	bf00      	nop
 8006372:	3740      	adds	r7, #64	; 0x40
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20014288 	.word	0x20014288

0800637c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b08c      	sub	sp, #48	; 0x30
 8006380:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006382:	4b58      	ldr	r3, [pc, #352]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006388:	f3ef 8311 	mrs	r3, BASEPRI
 800638c:	f04f 0120 	mov.w	r1, #32
 8006390:	f381 8811 	msr	BASEPRI, r1
 8006394:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006396:	4b53      	ldr	r3, [pc, #332]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	220a      	movs	r2, #10
 800639c:	4952      	ldr	r1, [pc, #328]	; (80064e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f7f9 ff16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80063aa:	200a      	movs	r0, #10
 80063ac:	f7ff fe2a 	bl	8006004 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063b0:	f3ef 8311 	mrs	r3, BASEPRI
 80063b4:	f04f 0120 	mov.w	r1, #32
 80063b8:	f381 8811 	msr	BASEPRI, r1
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	484b      	ldr	r0, [pc, #300]	; (80064ec <SEGGER_SYSVIEW_Start+0x170>)
 80063c0:	f7ff f85b 	bl	800547a <_PreparePacket>
 80063c4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ce:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_Start+0x72>
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_Start+0x5a>
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	e00b      	b.n	8006428 <SEGGER_SYSVIEW_Start+0xac>
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	6279      	str	r1, [r7, #36]	; 0x24
 800641a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	09db      	lsrs	r3, r3, #7
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	2b7f      	cmp	r3, #127	; 0x7f
 800642c:	d8f0      	bhi.n	8006410 <SEGGER_SYSVIEW_Start+0x94>
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	627a      	str	r2, [r7, #36]	; 0x24
 8006434:	6a3a      	ldr	r2, [r7, #32]
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	4b28      	ldr	r3, [pc, #160]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e00b      	b.n	8006462 <SEGGER_SYSVIEW_Start+0xe6>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	1c59      	adds	r1, r3, #1
 8006452:	61f9      	str	r1, [r7, #28]
 8006454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	09db      	lsrs	r3, r3, #7
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b7f      	cmp	r3, #127	; 0x7f
 8006466:	d8f0      	bhi.n	800644a <SEGGER_SYSVIEW_Start+0xce>
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	61fa      	str	r2, [r7, #28]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_Start+0x11e>
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	6179      	str	r1, [r7, #20]
 800648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b7f      	cmp	r3, #127	; 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_Start+0x106>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	617a      	str	r2, [r7, #20]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064b0:	2218      	movs	r2, #24
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff f8d1 	bl	800565c <_SendPacket>
      RECORD_END();
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <SEGGER_SYSVIEW_Start+0x168>)
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064ce:	f000 f9eb 	bl	80068a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064d2:	f000 f9b1 	bl	8006838 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064d6:	f000 fc83 	bl	8006de0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064da:	bf00      	nop
 80064dc:	3730      	adds	r7, #48	; 0x30
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20014258 	.word	0x20014258
 80064e8:	08007108 	.word	0x08007108
 80064ec:	20014288 	.word	0x20014288

080064f0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064f6:	f3ef 8311 	mrs	r3, BASEPRI
 80064fa:	f04f 0120 	mov.w	r1, #32
 80064fe:	f381 8811 	msr	BASEPRI, r1
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	480b      	ldr	r0, [pc, #44]	; (8006534 <SEGGER_SYSVIEW_Stop+0x44>)
 8006506:	f7fe ffb8 	bl	800547a <_PreparePacket>
 800650a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <SEGGER_SYSVIEW_Stop+0x48>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006514:	220b      	movs	r2, #11
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6838      	ldr	r0, [r7, #0]
 800651a:	f7ff f89f 	bl	800565c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <SEGGER_SYSVIEW_Stop+0x48>)
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f383 8811 	msr	BASEPRI, r3
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20014288 	.word	0x20014288
 8006538:	20014258 	.word	0x20014258

0800653c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006542:	f3ef 8311 	mrs	r3, BASEPRI
 8006546:	f04f 0120 	mov.w	r1, #32
 800654a:	f381 8811 	msr	BASEPRI, r1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4845      	ldr	r0, [pc, #276]	; (8006668 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006552:	f7fe ff92 	bl	800547a <_PreparePacket>
 8006556:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006560:	4b42      	ldr	r3, [pc, #264]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	e00b      	b.n	8006580 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	b2da      	uxtb	r2, r3
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	09db      	lsrs	r3, r3, #7
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b7f      	cmp	r3, #127	; 0x7f
 8006584:	d8f0      	bhi.n	8006568 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	4b34      	ldr	r3, [pc, #208]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	e00b      	b.n	80065ba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1c59      	adds	r1, r3, #1
 80065aa:	6279      	str	r1, [r7, #36]	; 0x24
 80065ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	09db      	lsrs	r3, r3, #7
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	2b7f      	cmp	r3, #127	; 0x7f
 80065be:	d8f0      	bhi.n	80065a2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	627a      	str	r2, [r7, #36]	; 0x24
 80065c6:	6a3a      	ldr	r2, [r7, #32]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	e00b      	b.n	80065f4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	61f9      	str	r1, [r7, #28]
 80065e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	09db      	lsrs	r3, r3, #7
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b7f      	cmp	r3, #127	; 0x7f
 80065f8:	d8f0      	bhi.n	80065dc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	61fa      	str	r2, [r7, #28]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e00b      	b.n	800662c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	1c59      	adds	r1, r3, #1
 800661c:	6179      	str	r1, [r7, #20]
 800661e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	09db      	lsrs	r3, r3, #7
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b7f      	cmp	r3, #127	; 0x7f
 8006630:	d8f0      	bhi.n	8006614 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	617a      	str	r2, [r7, #20]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006642:	2218      	movs	r2, #24
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	68b8      	ldr	r0, [r7, #8]
 8006648:	f7ff f808 	bl	800565c <_SendPacket>
  RECORD_END();
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800665a:	4b04      	ldr	r3, [pc, #16]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	4798      	blx	r3
  }
}
 8006660:	bf00      	nop
 8006662:	3730      	adds	r7, #48	; 0x30
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20014288 	.word	0x20014288
 800666c:	20014258 	.word	0x20014258

08006670 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b092      	sub	sp, #72	; 0x48
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006678:	f3ef 8311 	mrs	r3, BASEPRI
 800667c:	f04f 0120 	mov.w	r1, #32
 8006680:	f381 8811 	msr	BASEPRI, r1
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	486a      	ldr	r0, [pc, #424]	; (8006830 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006688:	f7fe fef7 	bl	800547a <_PreparePacket>
 800668c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	647b      	str	r3, [r7, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b66      	ldr	r3, [pc, #408]	; (8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	643b      	str	r3, [r7, #64]	; 0x40
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6479      	str	r1, [r7, #68]	; 0x44
 80066ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066be:	2b7f      	cmp	r3, #127	; 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80066c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	647a      	str	r2, [r7, #68]	; 0x44
 80066c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
 80066dc:	e00b      	b.n	80066f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	1c59      	adds	r1, r3, #1
 80066e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	09db      	lsrs	r3, r3, #7
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	2b7f      	cmp	r3, #127	; 0x7f
 80066fa:	d8f0      	bhi.n	80066de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	4619      	mov	r1, r3
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7fe fe63 	bl	80053e0 <_EncodeStr>
 800671a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800671c:	2209      	movs	r2, #9
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f7fe ff9b 	bl	800565c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	633b      	str	r3, [r7, #48]	; 0x30
 800673a:	e00b      	b.n	8006754 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	b2da      	uxtb	r2, r3
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	1c59      	adds	r1, r3, #1
 8006744:	6379      	str	r1, [r7, #52]	; 0x34
 8006746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	09db      	lsrs	r3, r3, #7
 8006752:	633b      	str	r3, [r7, #48]	; 0x30
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2b7f      	cmp	r3, #127	; 0x7f
 8006758:	d8f0      	bhi.n	800673c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	637a      	str	r2, [r7, #52]	; 0x34
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
 8006774:	e00b      	b.n	800678e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	1c59      	adds	r1, r3, #1
 800677e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006780:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	09db      	lsrs	r3, r3, #7
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	2b7f      	cmp	r3, #127	; 0x7f
 8006792:	d8f0      	bhi.n	8006776 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	62fa      	str	r2, [r7, #44]	; 0x2c
 800679a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e00b      	b.n	80067c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	6279      	str	r1, [r7, #36]	; 0x24
 80067ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	d8f0      	bhi.n	80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	627a      	str	r2, [r7, #36]	; 0x24
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e00b      	b.n	8006800 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	1c59      	adds	r1, r3, #1
 80067f0:	61f9      	str	r1, [r7, #28]
 80067f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	09db      	lsrs	r3, r3, #7
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b7f      	cmp	r3, #127	; 0x7f
 8006804:	d8f0      	bhi.n	80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	61fa      	str	r2, [r7, #28]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006816:	2215      	movs	r2, #21
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	6938      	ldr	r0, [r7, #16]
 800681c:	f7fe ff1e 	bl	800565c <_SendPacket>
  RECORD_END();
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f383 8811 	msr	BASEPRI, r3
}
 8006826:	bf00      	nop
 8006828:	3748      	adds	r7, #72	; 0x48
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20014288 	.word	0x20014288
 8006834:	20014258 	.word	0x20014258

08006838 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800683c:	4b07      	ldr	r3, [pc, #28]	; (800685c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4798      	blx	r3
  }
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20014258 	.word	0x20014258

08006860 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006868:	f3ef 8311 	mrs	r3, BASEPRI
 800686c:	f04f 0120 	mov.w	r1, #32
 8006870:	f381 8811 	msr	BASEPRI, r1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	480b      	ldr	r0, [pc, #44]	; (80068a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006878:	f7fe fdff 	bl	800547a <_PreparePacket>
 800687c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800687e:	2280      	movs	r2, #128	; 0x80
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	6938      	ldr	r0, [r7, #16]
 8006884:	f7fe fdac 	bl	80053e0 <_EncodeStr>
 8006888:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800688a:	220e      	movs	r2, #14
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	6938      	ldr	r0, [r7, #16]
 8006890:	f7fe fee4 	bl	800565c <_SendPacket>
  RECORD_END();
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f383 8811 	msr	BASEPRI, r3
}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20014288 	.word	0x20014288

080068a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d015      	beq.n	80068ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068c0:	4b10      	ldr	r3, [pc, #64]	; (8006904 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4798      	blx	r3
 80068c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	000a      	movs	r2, r1
 80068dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068de:	4613      	mov	r3, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4621      	mov	r1, r4
 80068e4:	200d      	movs	r0, #13
 80068e6:	f7ff fbe7 	bl	80060b8 <SEGGER_SYSVIEW_RecordU32x2>
 80068ea:	e006      	b.n	80068fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	200c      	movs	r0, #12
 80068f4:	f7ff fba4 	bl	8006040 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	20014258 	.word	0x20014258
 8006908:	e0001004 	.word	0xe0001004

0800690c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006912:	f3ef 8311 	mrs	r3, BASEPRI
 8006916:	f04f 0120 	mov.w	r1, #32
 800691a:	f381 8811 	msr	BASEPRI, r1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	4819      	ldr	r0, [pc, #100]	; (8006988 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006922:	f7fe fdaa 	bl	800547a <_PreparePacket>
 8006926:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800692c:	4b17      	ldr	r3, [pc, #92]	; (800698c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006934:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	e00b      	b.n	8006958 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	6179      	str	r1, [r7, #20]
 800694a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	09db      	lsrs	r3, r3, #7
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b7f      	cmp	r3, #127	; 0x7f
 800695c:	d8f0      	bhi.n	8006940 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	617a      	str	r2, [r7, #20]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800696e:	2202      	movs	r2, #2
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	f7fe fe72 	bl	800565c <_SendPacket>
  RECORD_END();
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20014288 	.word	0x20014288
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006996:	f3ef 8311 	mrs	r3, BASEPRI
 800699a:	f04f 0120 	mov.w	r1, #32
 800699e:	f381 8811 	msr	BASEPRI, r1
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	4807      	ldr	r0, [pc, #28]	; (80069c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80069a6:	f7fe fd68 	bl	800547a <_PreparePacket>
 80069aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80069ac:	2203      	movs	r2, #3
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f7fe fe53 	bl	800565c <_SendPacket>
  RECORD_END();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f383 8811 	msr	BASEPRI, r3
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20014288 	.word	0x20014288

080069c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ce:	f3ef 8311 	mrs	r3, BASEPRI
 80069d2:	f04f 0120 	mov.w	r1, #32
 80069d6:	f381 8811 	msr	BASEPRI, r1
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	4807      	ldr	r0, [pc, #28]	; (80069fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069de:	f7fe fd4c 	bl	800547a <_PreparePacket>
 80069e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069e4:	2212      	movs	r2, #18
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	f7fe fe37 	bl	800565c <_SendPacket>
  RECORD_END();
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f383 8811 	msr	BASEPRI, r3
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20014288 	.word	0x20014288

08006a00 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a06:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0a:	f04f 0120 	mov.w	r1, #32
 8006a0e:	f381 8811 	msr	BASEPRI, r1
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	4807      	ldr	r0, [pc, #28]	; (8006a34 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a16:	f7fe fd30 	bl	800547a <_PreparePacket>
 8006a1a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a1c:	2211      	movs	r2, #17
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6838      	ldr	r0, [r7, #0]
 8006a22:	f7fe fe1b 	bl	800565c <_SendPacket>
  RECORD_END();
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f383 8811 	msr	BASEPRI, r3
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20014288 	.word	0x20014288

08006a38 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a40:	f3ef 8311 	mrs	r3, BASEPRI
 8006a44:	f04f 0120 	mov.w	r1, #32
 8006a48:	f381 8811 	msr	BASEPRI, r1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4819      	ldr	r0, [pc, #100]	; (8006ab4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a50:	f7fe fd13 	bl	800547a <_PreparePacket>
 8006a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5a:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61bb      	str	r3, [r7, #24]
 8006a6c:	e00b      	b.n	8006a86 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	1c59      	adds	r1, r3, #1
 8006a76:	61f9      	str	r1, [r7, #28]
 8006a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8a:	d8f0      	bhi.n	8006a6e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	61fa      	str	r2, [r7, #28]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6938      	ldr	r0, [r7, #16]
 8006aa2:	f7fe fddb 	bl	800565c <_SendPacket>
  RECORD_END();
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
}
 8006aac:	bf00      	nop
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20014288 	.word	0x20014288
 8006ab8:	20014258 	.word	0x20014258

08006abc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac8:	f04f 0120 	mov.w	r1, #32
 8006acc:	f381 8811 	msr	BASEPRI, r1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4819      	ldr	r0, [pc, #100]	; (8006b38 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ad4:	f7fe fcd1 	bl	800547a <_PreparePacket>
 8006ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ade:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	61f9      	str	r1, [r7, #28]
 8006afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b20:	2204      	movs	r2, #4
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7fe fd99 	bl	800565c <_SendPacket>
  RECORD_END();
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f383 8811 	msr	BASEPRI, r3
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20014288 	.word	0x20014288
 8006b3c:	20014258 	.word	0x20014258

08006b40 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b48:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4c:	f04f 0120 	mov.w	r1, #32
 8006b50:	f381 8811 	msr	BASEPRI, r1
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	4819      	ldr	r0, [pc, #100]	; (8006bbc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b58:	f7fe fc8f 	bl	800547a <_PreparePacket>
 8006b5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	61f9      	str	r1, [r7, #28]
 8006b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b7f      	cmp	r3, #127	; 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7fe fd57 	bl	800565c <_SendPacket>
  RECORD_END();
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
}
 8006bb4:	bf00      	nop
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20014288 	.word	0x20014288
 8006bc0:	20014258 	.word	0x20014258

08006bc4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	f04f 0120 	mov.w	r1, #32
 8006bd6:	f381 8811 	msr	BASEPRI, r1
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	4827      	ldr	r0, [pc, #156]	; (8006c7c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006bde:	f7fe fc4c 	bl	800547a <_PreparePacket>
 8006be2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	623b      	str	r3, [r7, #32]
 8006bfa:	e00b      	b.n	8006c14 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	6279      	str	r1, [r7, #36]	; 0x24
 8006c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	09db      	lsrs	r3, r3, #7
 8006c12:	623b      	str	r3, [r7, #32]
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b7f      	cmp	r3, #127	; 0x7f
 8006c18:	d8f0      	bhi.n	8006bfc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	627a      	str	r2, [r7, #36]	; 0x24
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e00b      	b.n	8006c4c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	61f9      	str	r1, [r7, #28]
 8006c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c50:	d8f0      	bhi.n	8006c34 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	61fa      	str	r2, [r7, #28]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c62:	2207      	movs	r2, #7
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f7fe fcf8 	bl	800565c <_SendPacket>
  RECORD_END();
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f383 8811 	msr	BASEPRI, r3
}
 8006c72:	bf00      	nop
 8006c74:	3728      	adds	r7, #40	; 0x28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20014288 	.word	0x20014288
 8006c80:	20014258 	.word	0x20014258

08006c84 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c8c:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	1ad3      	subs	r3, r2, r3
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20014258 	.word	0x20014258

08006ca4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08c      	sub	sp, #48	; 0x30
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006cae:	4b3b      	ldr	r3, [pc, #236]	; (8006d9c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d06d      	beq.n	8006d92 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc0:	e008      	b.n	8006cd4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3f2      	bcc.n	8006cc2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cdc:	e000      	b.n	8006ce0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cde:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d055      	beq.n	8006d92 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cea:	f04f 0120 	mov.w	r1, #32
 8006cee:	f381 8811 	msr	BASEPRI, r1
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	482a      	ldr	r0, [pc, #168]	; (8006da0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006cf6:	f7fe fbc0 	bl	800547a <_PreparePacket>
 8006cfa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	e00b      	b.n	8006d22 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	1c59      	adds	r1, r3, #1
 8006d12:	6279      	str	r1, [r7, #36]	; 0x24
 8006d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	09db      	lsrs	r3, r3, #7
 8006d20:	623b      	str	r3, [r7, #32]
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	2b7f      	cmp	r3, #127	; 0x7f
 8006d26:	d8f0      	bhi.n	8006d0a <SEGGER_SYSVIEW_SendModule+0x66>
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	61fb      	str	r3, [r7, #28]
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e00b      	b.n	8006d5c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	61f9      	str	r1, [r7, #28]
 8006d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d60:	d8f0      	bhi.n	8006d44 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	4619      	mov	r1, r3
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7fe fb30 	bl	80053e0 <_EncodeStr>
 8006d80:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d82:	2216      	movs	r2, #22
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f7fe fc68 	bl	800565c <_SendPacket>
      RECORD_END();
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d92:	bf00      	nop
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20014280 	.word	0x20014280
 8006da0:	20014288 	.word	0x20014288

08006da4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00f      	beq.n	8006dd2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f2      	bne.n	8006db8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20014280 	.word	0x20014280

08006de0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006de6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dea:	f04f 0120 	mov.w	r1, #32
 8006dee:	f381 8811 	msr	BASEPRI, r1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	4817      	ldr	r0, [pc, #92]	; (8006e54 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006df6:	f7fe fb40 	bl	800547a <_PreparePacket>
 8006dfa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	e00b      	b.n	8006e24 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	6179      	str	r1, [r7, #20]
 8006e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	09db      	lsrs	r3, r3, #7
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b7f      	cmp	r3, #127	; 0x7f
 8006e28:	d8f0      	bhi.n	8006e0c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	617a      	str	r2, [r7, #20]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e3a:	221b      	movs	r2, #27
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	68b8      	ldr	r0, [r7, #8]
 8006e40:	f7fe fc0c 	bl	800565c <_SendPacket>
  RECORD_END();
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f383 8811 	msr	BASEPRI, r3
}
 8006e4a:	bf00      	nop
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20014288 	.word	0x20014288
 8006e58:	20014284 	.word	0x20014284

08006e5c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e5c:	b40f      	push	{r0, r1, r2, r3}
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e6a:	1d3b      	adds	r3, r7, #4
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f7fe fe7b 	bl	8005b6c <_VPrintTarget>
  va_end(ParamList);
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e80:	b004      	add	sp, #16
 8006e82:	4770      	bx	lr

08006e84 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e90:	f04f 0120 	mov.w	r1, #32
 8006e94:	f381 8811 	msr	BASEPRI, r1
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	4827      	ldr	r0, [pc, #156]	; (8006f38 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e9c:	f7fe faed 	bl	800547a <_PreparePacket>
 8006ea0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea2:	2280      	movs	r2, #128	; 0x80
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f7fe fa9a 	bl	80053e0 <_EncodeStr>
 8006eac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	e00b      	b.n	8006ed0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	1c59      	adds	r1, r3, #1
 8006ec0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	09db      	lsrs	r3, r3, #7
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed4:	d8f0      	bhi.n	8006eb8 <SEGGER_SYSVIEW_Warn+0x34>
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	627a      	str	r2, [r7, #36]	; 0x24
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e00b      	b.n	8006f08 <SEGGER_SYSVIEW_Warn+0x84>
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	61f9      	str	r1, [r7, #28]
 8006efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f0c:	d8f0      	bhi.n	8006ef0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	61fa      	str	r2, [r7, #28]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f1e:	221a      	movs	r2, #26
 8006f20:	68f9      	ldr	r1, [r7, #12]
 8006f22:	6938      	ldr	r0, [r7, #16]
 8006f24:	f7fe fb9a 	bl	800565c <_SendPacket>
  RECORD_END();
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
}
 8006f2e:	bf00      	nop
 8006f30:	3728      	adds	r7, #40	; 0x28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20014288 	.word	0x20014288

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	; (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	; (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	; (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	; (8006f80 <__libc_init_array+0x44>)
 8006f50:	f000 f83c 	bl	8006fcc <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	0800712c 	.word	0x0800712c
 8006f78:	0800712c 	.word	0x0800712c
 8006f7c:	0800712c 	.word	0x0800712c
 8006f80:	08007130 	.word	0x08007130

08006f84 <memcmp>:
 8006f84:	b530      	push	{r4, r5, lr}
 8006f86:	3901      	subs	r1, #1
 8006f88:	2400      	movs	r4, #0
 8006f8a:	42a2      	cmp	r2, r4
 8006f8c:	d101      	bne.n	8006f92 <memcmp+0xe>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e005      	b.n	8006f9e <memcmp+0x1a>
 8006f92:	5d03      	ldrb	r3, [r0, r4]
 8006f94:	3401      	adds	r4, #1
 8006f96:	5d0d      	ldrb	r5, [r1, r4]
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	d0f6      	beq.n	8006f8a <memcmp+0x6>
 8006f9c:	1b58      	subs	r0, r3, r5
 8006f9e:	bd30      	pop	{r4, r5, pc}

08006fa0 <memcpy>:
 8006fa0:	440a      	add	r2, r1
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fa8:	d100      	bne.n	8006fac <memcpy+0xc>
 8006faa:	4770      	bx	lr
 8006fac:	b510      	push	{r4, lr}
 8006fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	d1f9      	bne.n	8006fae <memcpy+0xe>
 8006fba:	bd10      	pop	{r4, pc}

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
