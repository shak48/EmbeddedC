
003TasksLeds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eac  08006eac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb4  08006eb4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014488  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001449c  2001449c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b0b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311c  00000000  00000000  00038b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  0003cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bf5  00000000  00000000  0003e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dc5  00000000  00000000  00061cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c75  00000000  00000000  00076a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014e6f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f18  00000000  00000000  0014e74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cec 	.word	0x08006cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006cec 	.word	0x08006cec

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200143f4 	.word	0x200143f4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fba1 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f889 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8f1 	bl	8000750 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <main+0xfc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a39      	ldr	r2, [pc, #228]	; (8000658 <main+0xfc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 facb 	bl	8004b14 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057e:	f005 fd8d 	bl	800609c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "Led Green Task", 200, NULL, 2, &task1_handle);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4932      	ldr	r1, [pc, #200]	; (800065c <main+0x100>)
 8000592:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0x104>)
 8000594:	f002 fbca 	bl	8002d2c <xTaskCreate>
 8000598:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  status = xTaskCreate(led_orange_handler, "Led Orange Task", 200, NULL, 2, &task2_handle);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	4927      	ldr	r1, [pc, #156]	; (8000664 <main+0x108>)
 80005c6:	4828      	ldr	r0, [pc, #160]	; (8000668 <main+0x10c>)
 80005c8:	f002 fbb0 	bl	8002d2c <xTaskCreate>
 80005cc:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x8e>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	61fb      	str	r3, [r7, #28]
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x8c>

  status = xTaskCreate(led_red_handler, "Led Red Task", 200, NULL, 2, &task3_handle);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	491c      	ldr	r1, [pc, #112]	; (800066c <main+0x110>)
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0x114>)
 80005fc:	f002 fb96 	bl	8002d2c <xTaskCreate>
 8000600:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	61bb      	str	r3, [r7, #24]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  status = xTaskCreate(led_blue_handler, "Led Blue Task", 200, NULL, 2, &task4_handle);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	4912      	ldr	r1, [pc, #72]	; (8000674 <main+0x118>)
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <main+0x11c>)
 800062e:	f002 fb7d 	bl	8002d2c <xTaskCreate>
 8000632:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status==pdPASS);
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d00a      	beq.n	8000650 <main+0xf4>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	617b      	str	r3, [r7, #20]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0xf2>

  vTaskStartScheduler();
 8000650:	f002 fd08 	bl	8003064 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0xf8>
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	08006d04 	.word	0x08006d04
 8000660:	08000a0d 	.word	0x08000a0d
 8000664:	08006d14 	.word	0x08006d14
 8000668:	08000a39 	.word	0x08000a39
 800066c:	08006d24 	.word	0x08006d24
 8000670:	08000a65 	.word	0x08000a65
 8000674:	08006d34 	.word	0x08006d34
 8000678:	08000a91 	.word	0x08000a91

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fb26 	bl	8006cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fdc5 	bl	8001290 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f9e8 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f826 	bl	8001780 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 f9d1 	bl	8000ae0 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4aa1      	ldr	r2, [pc, #644]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b9f      	ldr	r3, [pc, #636]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b9b      	ldr	r3, [pc, #620]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a9a      	ldr	r2, [pc, #616]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b94      	ldr	r3, [pc, #592]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a93      	ldr	r2, [pc, #588]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b91      	ldr	r3, [pc, #580]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a8c      	ldr	r2, [pc, #560]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b8a      	ldr	r3, [pc, #552]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b86      	ldr	r3, [pc, #536]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a85      	ldr	r2, [pc, #532]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b7f      	ldr	r3, [pc, #508]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a7e      	ldr	r2, [pc, #504]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000814:	f000 fd08 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fd03 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 800082a:	f000 fcfd 	bl	8001228 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	486c      	ldr	r0, [pc, #432]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000846:	f000 fb53 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4866      	ldr	r0, [pc, #408]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fb45 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	485e      	ldr	r0, [pc, #376]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000882:	f000 fb35 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb28 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b0:	2306      	movs	r3, #6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4852      	ldr	r0, [pc, #328]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008bc:	f000 fb18 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c0:	23e0      	movs	r3, #224	; 0xe0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d0:	2305      	movs	r3, #5
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb08 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4845      	ldr	r0, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80008f4:	f000 fafc 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 8000916:	f000 faeb 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4833      	ldr	r0, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 8000934:	f000 fadc 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000938:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094a:	2306      	movs	r3, #6
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000956:	f000 facb 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000970:	f000 fabe 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000974:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000986:	230a      	movs	r3, #10
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000992:	f000 faad 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4815      	ldr	r0, [pc, #84]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 80009aa:	f000 faa1 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80009cc:	f000 fa90 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 80009e6:	f000 fa83 	bl	8000ef0 <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <led_green_handler>:

/* USER CODE BEGIN 4 */
void led_green_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <led_green_handler+0x24>)
 8000a1a:	f000 fc1e 	bl	800125a <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		vTaskDelay(1000);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a22:	f002 fae7 	bl	8002ff4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <led_green_handler+0x28>)
 8000a28:	f006 f8a8 	bl	8006b7c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a2c:	e7f2      	b.n	8000a14 <led_green_handler+0x8>
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	08006d44 	.word	0x08006d44

08000a38 <led_orange_handler>:

	}
}
void led_orange_handler(void* parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <led_orange_handler+0x24>)
 8000a46:	f000 fc08 	bl	800125a <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 8000a4a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a4e:	f002 fad1 	bl	8002ff4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Orange Led toggled");
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <led_orange_handler+0x28>)
 8000a54:	f006 f892 	bl	8006b7c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a58:	e7f2      	b.n	8000a40 <led_orange_handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	08006d58 	.word	0x08006d58

08000a64 <led_red_handler>:
	}
}
void led_red_handler(void* parameters)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <led_red_handler+0x24>)
 8000a72:	f000 fbf2 	bl	800125a <HAL_GPIO_TogglePin>
		vTaskDelay(600);
 8000a76:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a7a:	f002 fabb 	bl	8002ff4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Red Led toggled");
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <led_red_handler+0x28>)
 8000a80:	f006 f87c 	bl	8006b7c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a84:	e7f2      	b.n	8000a6c <led_red_handler+0x8>
 8000a86:	bf00      	nop
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	08006d6c 	.word	0x08006d6c

08000a90 <led_blue_handler>:
	}
}
void led_blue_handler(void* parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <led_blue_handler+0x24>)
 8000a9e:	f000 fbdc 	bl	800125a <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 8000aa2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aa6:	f002 faa5 	bl	8002ff4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Blue Led toggled");
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <led_blue_handler+0x28>)
 8000aac:	f006 f866 	bl	8006b7c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000ab0:	e7f2      	b.n	8000a98 <led_blue_handler+0x8>
 8000ab2:	bf00      	nop
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	08006d7c 	.word	0x08006d7c

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f90d 	bl	8000cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001000 	.word	0x40001000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b2a:	f003 fc3d 	bl	80043a8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2036      	movs	r0, #54	; 0x36
 8000b52:	f000 f9a3 	bl	8000e9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b56:	2036      	movs	r0, #54	; 0x36
 8000b58:	f000 f9bc 	bl	8000ed4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b78:	f107 0210 	add.w	r2, r7, #16
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 ffe4 	bl	8001b50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b88:	f000 ffce 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_InitTick+0xa8>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	0c9b      	lsrs	r3, r3, #18
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_InitTick+0xac>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <HAL_InitTick+0xb0>)
 8000ba4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_InitTick+0xac>)
 8000ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_InitTick+0xac>)
 8000bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_InitTick+0xac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_InitTick+0xac>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <HAL_InitTick+0xac>)
 8000bc2:	f000 fff7 	bl	8001bb4 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <HAL_InitTick+0xac>)
 8000bce:	f001 f84b 	bl	8001c68 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	20014368 	.word	0x20014368
 8000bec:	40001000 	.word	0x40001000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM6_DAC_IRQHandler+0x10>)
 8000c22:	f001 f891 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20014368 	.word	0x20014368

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f005 ffeb 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc69 	bl	800055c <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c98:	08006ebc 	.word	0x08006ebc
  ldr r2, =_sbss
 8000c9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ca0:	2001449c 	.word	0x2001449c

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f8d8 	bl	8000e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff30 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff ff06 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200143b0 	.word	0x200143b0

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200143b0 	.word	0x200143b0

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff61 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ffb1 	bl	8000e20 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff54 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b60      	ldr	r3, [pc, #384]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5b      	ldr	r2, [pc, #364]	; (8001200 <HAL_GPIO_Init+0x310>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_GPIO_Init+0x330>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x310>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_GPIO_Init+0x334>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126c:	887a      	ldrh	r2, [r7, #2]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43d9      	mvns	r1, r3
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	400b      	ands	r3, r1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e264      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d075      	beq.n	800139a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	4ba3      	ldr	r3, [pc, #652]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4ba0      	ldr	r3, [pc, #640]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b9d      	ldr	r3, [pc, #628]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4b99      	ldr	r3, [pc, #612]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d05b      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e23f      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x74>
 80012f6:	4b91      	ldr	r3, [pc, #580]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a90      	ldr	r2, [pc, #576]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a8a      	ldr	r2, [pc, #552]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a83      	ldr	r2, [pc, #524]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a80      	ldr	r2, [pc, #512]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fce4 	bl	8000d14 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fce0 	bl	8000d14 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e204      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xc0>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcd0 	bl	8000d14 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fccc 	bl	8000d14 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1f0      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b62      	ldr	r3, [pc, #392]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1c4      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4952      	ldr	r1, [pc, #328]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <HAL_RCC_OscConfig+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fc85 	bl	8000d14 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc81 	bl	8000d14 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a5      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4940      	ldr	r1, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x2b0>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc64 	bl	8000d14 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fc60 	bl	8000d14 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e184      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d030      	beq.n	80014dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_RCC_OscConfig+0x2b4>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fc44 	bl	8000d14 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fc40 	bl	8000d14 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e164      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x200>
 80014ae:	e015      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x2b4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fc2d 	bl	8000d14 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff fc29 	bl	8000d14 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e14d      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a0 	beq.w	800162a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d121      	bne.n	800156a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fbef 	bl	8000d14 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e011      	b.n	800155e <HAL_RCC_OscConfig+0x2ce>
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	42470000 	.word	0x42470000
 8001544:	42470e80 	.word	0x42470e80
 8001548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7ff fbe2 	bl	8000d14 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e106      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b85      	ldr	r3, [pc, #532]	; (8001774 <HAL_RCC_OscConfig+0x4e4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x2f0>
 8001572:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a80      	ldr	r2, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	e01c      	b.n	80015ba <HAL_RCC_OscConfig+0x32a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d10c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x312>
 8001588:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	4b78      	ldr	r3, [pc, #480]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a77      	ldr	r2, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	e00b      	b.n	80015ba <HAL_RCC_OscConfig+0x32a>
 80015a2:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a74      	ldr	r2, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a71      	ldr	r2, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d015      	beq.n	80015ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff fba7 	bl	8000d14 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fba3 	bl	8000d14 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e0c5      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ee      	beq.n	80015ca <HAL_RCC_OscConfig+0x33a>
 80015ec:	e014      	b.n	8001618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb91 	bl	8000d14 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fb8d 	bl	8000d14 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0af      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ee      	bne.n	80015f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 809b 	beq.w	800176a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d05c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d141      	bne.n	80016cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <HAL_RCC_OscConfig+0x4ec>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb61 	bl	8000d14 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb5d 	bl	8000d14 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e081      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69da      	ldr	r2, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	3b01      	subs	r3, #1
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	061b      	lsls	r3, r3, #24
 8001698:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x4ec>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb36 	bl	8000d14 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fb32 	bl	8000d14 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e056      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x41c>
 80016ca:	e04e      	b.n	800176a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb1f 	bl	8000d14 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb1b 	bl	8000d14 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e03f      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x44a>
 80016f8:	e037      	b.n	800176a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e032      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_RCC_OscConfig+0x4e8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d028      	beq.n	8001766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d121      	bne.n	8001766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d11a      	bne.n	8001766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800173c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173e:	4293      	cmp	r3, r2
 8001740:	d111      	bne.n	8001766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40007000 	.word	0x40007000
 8001778:	40023800 	.word	0x40023800
 800177c:	42470060 	.word	0x42470060

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa50 	bl	8000d14 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff fa4c 	bl	8000d14 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f908 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	08006e70 	.word	0x08006e70
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d00d      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001970:	2b08      	cmp	r3, #8
 8001972:	f200 80bd 	bhi.w	8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 800197e:	e0b7      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001982:	60bb      	str	r3, [r7, #8]
       break;
 8001984:	e0b7      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001988:	60bb      	str	r3, [r7, #8]
      break;
 800198a:	e0b4      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04d      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	461a      	mov	r2, r3
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	ea02 0800 	and.w	r8, r2, r0
 80019ba:	ea03 0901 	and.w	r9, r3, r1
 80019be:	4640      	mov	r0, r8
 80019c0:	4649      	mov	r1, r9
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	014b      	lsls	r3, r1, #5
 80019cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019d0:	0142      	lsls	r2, r0, #5
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	ebb0 0008 	subs.w	r0, r0, r8
 80019da:	eb61 0109 	sbc.w	r1, r1, r9
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	018b      	lsls	r3, r1, #6
 80019e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ec:	0182      	lsls	r2, r0, #6
 80019ee:	1a12      	subs	r2, r2, r0
 80019f0:	eb63 0301 	sbc.w	r3, r3, r1
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	00d9      	lsls	r1, r3, #3
 80019fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a02:	00d0      	lsls	r0, r2, #3
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	eb12 0208 	adds.w	r2, r2, r8
 8001a0c:	eb43 0309 	adc.w	r3, r3, r9
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	0259      	lsls	r1, r3, #9
 8001a1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a1e:	0250      	lsls	r0, r2, #9
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f7fe fc18 	bl	8000264 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e04a      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	461a      	mov	r2, r3
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	ea02 0400 	and.w	r4, r2, r0
 8001a56:	ea03 0501 	and.w	r5, r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	014b      	lsls	r3, r1, #5
 8001a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a6c:	0142      	lsls	r2, r0, #5
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	1b00      	subs	r0, r0, r4
 8001a74:	eb61 0105 	sbc.w	r1, r1, r5
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	018b      	lsls	r3, r1, #6
 8001a82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a86:	0182      	lsls	r2, r0, #6
 8001a88:	1a12      	subs	r2, r2, r0
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	00d9      	lsls	r1, r3, #3
 8001a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9c:	00d0      	lsls	r0, r2, #3
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	1912      	adds	r2, r2, r4
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0299      	lsls	r1, r3, #10
 8001ab2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ab6:	0290      	lsls	r0, r2, #10
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f7fe fbcc 	bl	8000264 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	60bb      	str	r3, [r7, #8]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001af2:	60bb      	str	r3, [r7, #8]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	68bb      	ldr	r3, [r7, #8]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08006e80 	.word	0x08006e80

08001b50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_RCC_GetClockConfig+0x60>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0207 	and.w	r2, r3, #7
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	601a      	str	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e041      	b.n	8001c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f839 	bl	8001c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f000 f9d8 	bl	8001fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d001      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e04e      	b.n	8001d1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d022      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d01d      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d018      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d010      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	e007      	b.n	8001d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40010400 	.word	0x40010400
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40001800 	.word	0x40001800

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0202 	mvn.w	r2, #2
 8001d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8ee 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8e0 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8f1 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8c4 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8b6 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8c7 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0208 	mvn.w	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f89a 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f88c 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f89d 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f870 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f862 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f873 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fdf8 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f902 	bl	80020fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f838 	bl	8001f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0220 	mvn.w	r2, #32
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8cc 	bl	80020e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a40      	ldr	r2, [pc, #256]	; (80020bc <TIM_Base_SetConfig+0x114>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d00f      	beq.n	8001fe8 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3d      	ldr	r2, [pc, #244]	; (80020c0 <TIM_Base_SetConfig+0x118>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00b      	beq.n	8001fe8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <TIM_Base_SetConfig+0x11c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <TIM_Base_SetConfig+0x120>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <TIM_Base_SetConfig+0x124>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d108      	bne.n	8001ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <TIM_Base_SetConfig+0x114>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02b      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d027      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <TIM_Base_SetConfig+0x118>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d023      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <TIM_Base_SetConfig+0x11c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01f      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <TIM_Base_SetConfig+0x120>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01b      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <TIM_Base_SetConfig+0x124>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d017      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <TIM_Base_SetConfig+0x128>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <TIM_Base_SetConfig+0x12c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00f      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <TIM_Base_SetConfig+0x130>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00b      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a25      	ldr	r2, [pc, #148]	; (80020dc <TIM_Base_SetConfig+0x134>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <TIM_Base_SetConfig+0x138>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <TIM_Base_SetConfig+0x13c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d108      	bne.n	800206c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <TIM_Base_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0xf8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <TIM_Base_SetConfig+0x124>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d103      	bne.n	80020a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	615a      	str	r2, [r3, #20]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000800 	.word	0x40000800
 80020c8:	40000c00 	.word	0x40000c00
 80020cc:	40010400 	.word	0x40010400
 80020d0:	40014000 	.word	0x40014000
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800
 80020dc:	40001800 	.word	0x40001800
 80020e0:	40001c00 	.word	0x40001c00
 80020e4:	40002000 	.word	0x40002000

080020e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0208 	add.w	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002128:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 0208 	add.w	r2, r3, #8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 0208 	add.w	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c8:	d103      	bne.n	80021d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e00c      	b.n	80021ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3308      	adds	r3, #8
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e002      	b.n	80021e0 <vListInsert+0x2e>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d2f6      	bcs.n	80021da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6892      	ldr	r2, [r2, #8]
 800223a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6852      	ldr	r2, [r2, #4]
 8002244:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d103      	bne.n	8002258 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <xQueueGenericReset+0x2a>
        __asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	60bb      	str	r3, [r7, #8]
    }
 800229e:	bf00      	nop
 80022a0:	e7fe      	b.n	80022a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022a2:	f002 f8ff 	bl	80044a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	441a      	add	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	3b01      	subs	r3, #1
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	441a      	add	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	22ff      	movs	r2, #255	; 0xff
 80022e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d114      	bne.n	8002322 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01a      	beq.n	8002336 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3310      	adds	r3, #16
 8002304:	4618      	mov	r0, r3
 8002306:	f001 f957 	bl	80035b8 <xTaskRemoveFromEventList>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <xQueueGenericReset+0xcc>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	e009      	b.n	8002336 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3310      	adds	r3, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fef2 	bl	8002110 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3324      	adds	r3, #36	; 0x24
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff feed 	bl	8002110 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002336:	f002 f8e5 	bl	8004504 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	e000ed04 	.word	0xe000ed04

08002348 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <xQueueGenericCreate+0x2a>
        __asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	61bb      	str	r3, [r7, #24]
    }
 800236e:	bf00      	nop
 8002370:	e7fe      	b.n	8002370 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <xQueueGenericCreate+0x48>
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d101      	bne.n	8002394 <xQueueGenericCreate+0x4c>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <xQueueGenericCreate+0x4e>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <xQueueGenericCreate+0x68>
        __asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	617b      	str	r3, [r7, #20]
    }
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023b6:	d90a      	bls.n	80023ce <xQueueGenericCreate+0x86>
        __asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	613b      	str	r3, [r7, #16]
    }
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3350      	adds	r3, #80	; 0x50
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 f992 	bl	80046fc <pvPortMalloc>
 80023d8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3350      	adds	r3, #80	; 0x50
 80023e8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f805 	bl	8002406 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
    }
 80023fe:	4618      	mov	r0, r3
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e002      	b.n	8002428 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002434:	2101      	movs	r1, #1
 8002436:	69b8      	ldr	r0, [r7, #24]
 8002438:	f7ff ff1e 	bl	8002278 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	2073      	movs	r0, #115	; 0x73
 800244c:	f003 fd1e 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b090      	sub	sp, #64	; 0x40
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <xQueueGenericSend+0x32>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <xQueueGenericSend+0x40>
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <xQueueGenericSend+0x44>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <xQueueGenericSend+0x46>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <xQueueGenericSend+0x60>
        __asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d103      	bne.n	80024c6 <xQueueGenericSend+0x6e>
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <xQueueGenericSend+0x72>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueGenericSend+0x74>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	623b      	str	r3, [r7, #32]
    }
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e6:	f001 fa07 	bl	80038f8 <xTaskGetSchedulerState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <xQueueGenericSend+0x9e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0xa2>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0xa4>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericSend+0xbe>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61fb      	str	r3, [r7, #28]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002516:	f001 ffc5 	bl	80044a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <xQueueGenericSend+0xd4>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d136      	bne.n	800259a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fa38 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	460b      	mov	r3, r1
 800253e:	4601      	mov	r1, r0
 8002540:	205a      	movs	r0, #90	; 0x5a
 8002542:	f003 fd19 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254c:	f000 fa78 	bl	8002a40 <prvCopyDataToQueue>
 8002550:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	3324      	adds	r3, #36	; 0x24
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f82a 	bl	80035b8 <xTaskRemoveFromEventList>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <xQueueGenericSend+0x248>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	e00a      	b.n	8002592 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <xQueueGenericSend+0x248>)
 8002584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002592:	f001 ffb7 	bl	8004504 <vPortExitCritical>
                return pdPASS;
 8002596:	2301      	movs	r3, #1
 8002598:	e07d      	b.n	8002696 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d110      	bne.n	80025c2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025a0:	f001 ffb0 	bl	8004504 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 f9fc 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	4601      	mov	r1, r0
 80025b8:	205a      	movs	r0, #90	; 0x5a
 80025ba:	f003 fcdd 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	e069      	b.n	8002696 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f859 	bl	8003684 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025d6:	f001 ff95 	bl	8004504 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025da:	f000 fda5 	bl	8003128 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025de:	f001 ff61 	bl	80044a4 <vPortEnterCritical>
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ee:	d103      	bne.n	80025f8 <xQueueGenericSend+0x1a0>
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002604:	d103      	bne.n	800260e <xQueueGenericSend+0x1b6>
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260e:	f001 ff79 	bl	8004504 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002612:	1d3a      	adds	r2, r7, #4
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 f848 	bl	80036b0 <xTaskCheckForTimeOut>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d124      	bne.n	8002670 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002628:	f000 fb02 	bl	8002c30 <prvIsQueueFull>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d018      	beq.n	8002664 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	3310      	adds	r3, #16
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 ff6a 	bl	8003514 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002642:	f000 fa8d 	bl	8002b60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002646:	f000 fd7d 	bl	8003144 <xTaskResumeAll>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f af62 	bne.w	8002516 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <xQueueGenericSend+0x248>)
 8002654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	e758      	b.n	8002516 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 fa7b 	bl	8002b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800266a:	f000 fd6b 	bl	8003144 <xTaskResumeAll>
 800266e:	e752      	b.n	8002516 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002672:	f000 fa75 	bl	8002b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002676:	f000 fd65 	bl	8003144 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	4618      	mov	r0, r3
 800267e:	f004 f991 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	460b      	mov	r3, r1
 800268c:	4601      	mov	r1, r0
 800268e:	205a      	movs	r0, #90	; 0x5a
 8002690:	f003 fc72 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002694:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002696:	4618      	mov	r0, r3
 8002698:	3738      	adds	r7, #56	; 0x38
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b090      	sub	sp, #64	; 0x40
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <xQueueGenericSendFromISR+0x3c>
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <xQueueGenericSendFromISR+0x40>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <xQueueGenericSendFromISR+0x42>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d103      	bne.n	800270e <xQueueGenericSendFromISR+0x6a>
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <xQueueGenericSendFromISR+0x6e>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericSendFromISR+0x70>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800272e:	f001 ffa5 	bl	800467c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002732:	f3ef 8211 	mrs	r2, BASEPRI
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	61fa      	str	r2, [r7, #28]
 8002748:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800274a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <xQueueGenericSendFromISR+0xbc>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d148      	bne.n	80027f2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f916 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002778:	4601      	mov	r1, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	2060      	movs	r0, #96	; 0x60
 8002780:	f003 fb2a 	bl	8005dd8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800278a:	f000 f959 	bl	8002a40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800278e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002796:	d112      	bne.n	80027be <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d025      	beq.n	80027ec <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	3324      	adds	r3, #36	; 0x24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ff07 	bl	80035b8 <xTaskRemoveFromEventList>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01d      	beq.n	80027ec <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e016      	b.n	80027ec <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027c2:	2b7f      	cmp	r3, #127	; 0x7f
 80027c4:	d10a      	bne.n	80027dc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	617b      	str	r3, [r7, #20]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027e0:	3301      	adds	r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	b25a      	sxtb	r2, r3
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027ec:	2301      	movs	r3, #1
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027f0:	e00b      	b.n	800280a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	4618      	mov	r0, r3
 80027f6:	f004 f8d5 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4601      	mov	r1, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	2060      	movs	r0, #96	; 0x60
 8002802:	f003 fae9 	bl	8005dd8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002806:	2300      	movs	r3, #0
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002814:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002818:	4618      	mov	r0, r3
 800281a:	3740      	adds	r7, #64	; 0x40
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08f      	sub	sp, #60	; 0x3c
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueReceive+0x30>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	623b      	str	r3, [r7, #32]
    }
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <xQueueReceive+0x3e>
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueReceive+0x42>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueReceive+0x44>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueReceive+0x5e>
        __asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fb      	str	r3, [r7, #28]
    }
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287e:	f001 f83b 	bl	80038f8 <xTaskGetSchedulerState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xQueueReceive+0x6e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueReceive+0x72>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueReceive+0x74>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueReceive+0x8e>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61bb      	str	r3, [r7, #24]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028ae:	f001 fdf9 	bl	80044a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02f      	beq.n	800291e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c2:	f000 f927 	bl	8002b14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 f86b 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 80028ce:	4604      	mov	r4, r0
 80028d0:	2000      	movs	r0, #0
 80028d2:	f004 f867 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 80028d6:	4602      	mov	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2101      	movs	r1, #1
 80028dc:	9100      	str	r1, [sp, #0]
 80028de:	4621      	mov	r1, r4
 80028e0:	205c      	movs	r0, #92	; 0x5c
 80028e2:	f003 fb49 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00f      	beq.n	8002916 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	3310      	adds	r3, #16
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fe5c 	bl	80035b8 <xTaskRemoveFromEventList>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002906:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <xQueueReceive+0x21c>)
 8002908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002916:	f001 fdf5 	bl	8004504 <vPortExitCritical>
                return pdPASS;
 800291a:	2301      	movs	r3, #1
 800291c:	e08a      	b.n	8002a34 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d113      	bne.n	800294c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002924:	f001 fdee 	bl	8004504 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	4618      	mov	r0, r3
 800292c:	f004 f83a 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002930:	4604      	mov	r4, r0
 8002932:	2000      	movs	r0, #0
 8002934:	f004 f836 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2101      	movs	r1, #1
 800293e:	9100      	str	r1, [sp, #0]
 8002940:	4621      	mov	r1, r4
 8002942:	205c      	movs	r0, #92	; 0x5c
 8002944:	f003 fb18 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002948:	2300      	movs	r3, #0
 800294a:	e073      	b.n	8002a34 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fe94 	bl	8003684 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002960:	f001 fdd0 	bl	8004504 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002964:	f000 fbe0 	bl	8003128 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002968:	f001 fd9c 	bl	80044a4 <vPortEnterCritical>
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002978:	d103      	bne.n	8002982 <xQueueReceive+0x162>
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002988:	b25b      	sxtb	r3, r3
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298e:	d103      	bne.n	8002998 <xQueueReceive+0x178>
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002998:	f001 fdb4 	bl	8004504 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fe83 	bl	80036b0 <xTaskCheckForTimeOut>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d124      	bne.n	80029fa <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f927 	bl	8002c04 <prvIsQueueEmpty>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d018      	beq.n	80029ee <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fda5 	bl	8003514 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029cc:	f000 f8c8 	bl	8002b60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029d0:	f000 fbb8 	bl	8003144 <xTaskResumeAll>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f af69 	bne.w	80028ae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <xQueueReceive+0x21c>)
 80029de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	e75f      	b.n	80028ae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f0:	f000 f8b6 	bl	8002b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029f4:	f000 fba6 	bl	8003144 <xTaskResumeAll>
 80029f8:	e759      	b.n	80028ae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fc:	f000 f8b0 	bl	8002b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a00:	f000 fba0 	bl	8003144 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a06:	f000 f8fd 	bl	8002c04 <prvIsQueueEmpty>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f43f af4e 	beq.w	80028ae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 ffc5 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f003 ffc1 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2101      	movs	r1, #1
 8002a28:	9100      	str	r1, [sp, #0]
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	205c      	movs	r0, #92	; 0x5c
 8002a2e:	f003 faa3 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3734      	adds	r7, #52	; 0x34
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d14d      	bne.n	8002b02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 ff62 	bl	8003934 <xTaskPriorityDisinherit>
 8002a70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e043      	b.n	8002b02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d119      	bne.n	8002ab4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	f004 f918 	bl	8006cc0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	441a      	add	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d32b      	bcc.n	8002b02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e026      	b.n	8002b02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68d8      	ldr	r0, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	461a      	mov	r2, r3
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	f004 f8fe 	bl	8006cc0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	425b      	negs	r3, r3
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d207      	bcs.n	8002af0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	425b      	negs	r3, r3
 8002aea:	441a      	add	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d105      	bne.n	8002b02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d303      	bcc.n	8002b48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	461a      	mov	r2, r3
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f004 f8b4 	bl	8006cc0 <memcpy>
    }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b68:	f001 fc9c 	bl	80044a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b74:	e011      	b.n	8002b9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd18 	bl	80035b8 <xTaskRemoveFromEventList>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b8e:	f000 fdf5 	bl	800377c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dce9      	bgt.n	8002b76 <prvUnlockQueue+0x16>
 8002ba2:	e000      	b.n	8002ba6 <prvUnlockQueue+0x46>
                        break;
 8002ba4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002bae:	f001 fca9 	bl	8004504 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bb2:	f001 fc77 	bl	80044a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bbe:	e011      	b.n	8002be4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3310      	adds	r3, #16
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fcf3 	bl	80035b8 <xTaskRemoveFromEventList>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bd8:	f000 fdd0 	bl	800377c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dce9      	bgt.n	8002bc0 <prvUnlockQueue+0x60>
 8002bec:	e000      	b.n	8002bf0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bf8:	f001 fc84 	bl	8004504 <vPortExitCritical>
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c0c:	f001 fc4a 	bl	80044a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c22:	f001 fc6f 	bl	8004504 <vPortExitCritical>

    return xReturn;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c38:	f001 fc34 	bl	80044a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d102      	bne.n	8002c4e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e001      	b.n	8002c52 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c52:	f001 fc57 	bl	8004504 <vPortExitCritical>

    return xReturn;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e01e      	b.n	8002cae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <vQueueAddToRegistry+0x60>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d115      	bne.n	8002ca8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c7c:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <vQueueAddToRegistry+0x60>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <vQueueAddToRegistry+0x60>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fe85 	bl	80069a4 <SEGGER_SYSVIEW_ShrinkId>
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2071      	movs	r0, #113	; 0x71
 8002ca2:	f003 f899 	bl	8005dd8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002ca6:	e006      	b.n	8002cb6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d9dd      	bls.n	8002c70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200143b4 	.word	0x200143b4

08002cc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cd4:	f001 fbe6 	bl	80044a4 <vPortEnterCritical>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce4:	d103      	bne.n	8002cee <vQueueWaitForMessageRestricted+0x2a>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d103      	bne.n	8002d04 <vQueueWaitForMessageRestricted+0x40>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d04:	f001 fbfe 	bl	8004504 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3324      	adds	r3, #36	; 0x24
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fc1f 	bl	800355c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff1e 	bl	8002b60 <prvUnlockQueue>
    }
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 fcdb 	bl	80046fc <pvPortMalloc>
 8002d46:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d4e:	2058      	movs	r0, #88	; 0x58
 8002d50:	f001 fcd4 	bl	80046fc <pvPortMalloc>
 8002d54:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
 8002d62:	e005      	b.n	8002d70 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f001 fda9 	bl	80048bc <vPortFree>
 8002d6a:	e001      	b.n	8002d70 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d013      	beq.n	8002d9e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f80e 	bl	8002dae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d92:	69f8      	ldr	r0, [r7, #28]
 8002d94:	f000 f8a2 	bl	8002edc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e002      	b.n	8002da4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002da4:	69bb      	ldr	r3, [r7, #24]
    }
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	21a5      	movs	r1, #165	; 0xa5
 8002dc8:	f003 ff88 	bl	8006cdc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f023 0307 	bic.w	r3, r3, #7
 8002de4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	617b      	str	r3, [r7, #20]
    }
 8002e02:	bf00      	nop
 8002e04:	e7fe      	b.n	8002e04 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01f      	beq.n	8002e4c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e012      	b.n	8002e38 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4413      	add	r3, r2
 8002e18:	7819      	ldrb	r1, [r3, #0]
 8002e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3334      	adds	r3, #52	; 0x34
 8002e22:	460a      	mov	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b09      	cmp	r3, #9
 8002e3c:	d9e9      	bls.n	8002e12 <prvInitialiseNewTask+0x64>
 8002e3e:	e000      	b.n	8002e42 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e4a:	e003      	b.n	8002e54 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d901      	bls.n	8002e5e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e68:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	3304      	adds	r3, #4
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f96b 	bl	8002150 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f966 	bl	8002150 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	f1c3 0205 	rsb	r2, r3, #5
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	3350      	adds	r3, #80	; 0x50
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 ff1a 	bl	8006cdc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	3354      	adds	r3, #84	; 0x54
 8002eac:	2201      	movs	r2, #1
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 ff13 	bl	8006cdc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	69b8      	ldr	r0, [r7, #24]
 8002ebc:	f001 f944 	bl	8004148 <pxPortInitialiseStack>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ee4:	f001 fade 	bl	80044a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <prvAddNewTaskToReadyList+0xfc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a3a      	ldr	r2, [pc, #232]	; (8002fd8 <prvAddNewTaskToReadyList+0xfc>)
 8002ef0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <prvAddNewTaskToReadyList+0x100>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002efa:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <prvAddNewTaskToReadyList+0x100>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <prvAddNewTaskToReadyList+0xfc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d110      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f08:	f000 fc5c 	bl	80037c4 <prvInitialiseTaskLists>
 8002f0c:	e00d      	b.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <prvAddNewTaskToReadyList+0x104>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <prvAddNewTaskToReadyList+0x100>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d802      	bhi.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <prvAddNewTaskToReadyList+0x100>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <prvAddNewTaskToReadyList+0x108>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <prvAddNewTaskToReadyList+0x108>)
 8002f32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <prvAddNewTaskToReadyList+0x108>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <prvAddNewTaskToReadyList+0x94>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fc07 	bl	8006758 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461c      	mov	r4, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	1ae3      	subs	r3, r4, r3
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	f001 fe6c 	bl	8004c48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 fc74 	bl	8006860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <prvAddNewTaskToReadyList+0x10c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <prvAddNewTaskToReadyList+0x10c>)
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <prvAddNewTaskToReadyList+0x110>)
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7ff f8e2 	bl	800216a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fa6:	f001 faad 	bl	8004504 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <prvAddNewTaskToReadyList+0x104>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00e      	beq.n	8002fd0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <prvAddNewTaskToReadyList+0x100>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <prvAddNewTaskToReadyList+0x114>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd8:	20000108 	.word	0x20000108
 8002fdc:	20000030 	.word	0x20000030
 8002fe0:	20000114 	.word	0x20000114
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	20000110 	.word	0x20000110
 8002fec:	20000034 	.word	0x20000034
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01b      	beq.n	800303e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <vTaskDelay+0x68>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <vTaskDelay+0x30>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60bb      	str	r3, [r7, #8]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003024:	f000 f880 	bl	8003128 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	2023      	movs	r0, #35	; 0x23
 800302c:	f002 fe98 	bl	8005d60 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003030:	2100      	movs	r1, #0
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fcfe 	bl	8003a34 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003038:	f000 f884 	bl	8003144 <xTaskResumeAll>
 800303c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <vTaskDelay+0x6c>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000130 	.word	0x20000130
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <vTaskStartScheduler+0xa4>)
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	2300      	movs	r3, #0
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2300      	movs	r3, #0
 8003074:	2282      	movs	r2, #130	; 0x82
 8003076:	4925      	ldr	r1, [pc, #148]	; (800310c <vTaskStartScheduler+0xa8>)
 8003078:	4825      	ldr	r0, [pc, #148]	; (8003110 <vTaskStartScheduler+0xac>)
 800307a:	f7ff fe57 	bl	8002d2c <xTaskCreate>
 800307e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003086:	f000 fd4d 	bl	8003b24 <xTimerCreateTimerTask>
 800308a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d124      	bne.n	80030dc <vTaskStartScheduler+0x78>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
    }
 80030a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <vTaskStartScheduler+0xb0>)
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <vTaskStartScheduler+0xb4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <vTaskStartScheduler+0xb8>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <vTaskStartScheduler+0xbc>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <vTaskStartScheduler+0xa4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d102      	bne.n	80030cc <vTaskStartScheduler+0x68>
 80030c6:	f003 fb2b 	bl	8006720 <SEGGER_SYSVIEW_OnIdle>
 80030ca:	e004      	b.n	80030d6 <vTaskStartScheduler+0x72>
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <vTaskStartScheduler+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fb83 	bl	80067dc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80030d6:	f001 f8c5 	bl	8004264 <xPortStartScheduler>
 80030da:	e00e      	b.n	80030fa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e2:	d10a      	bne.n	80030fa <vTaskStartScheduler+0x96>
        __asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	607b      	str	r3, [r7, #4]
    }
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <vTaskStartScheduler+0xc0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000012c 	.word	0x2000012c
 800310c:	08006d90 	.word	0x08006d90
 8003110:	08003795 	.word	0x08003795
 8003114:	20000128 	.word	0x20000128
 8003118:	20000114 	.word	0x20000114
 800311c:	2000010c 	.word	0x2000010c
 8003120:	20000030 	.word	0x20000030
 8003124:	2000000c 	.word	0x2000000c

08003128 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <vTaskSuspendAll+0x18>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	4a03      	ldr	r2, [pc, #12]	; (8003140 <vTaskSuspendAll+0x18>)
 8003134:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	20000130 	.word	0x20000130

08003144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003152:	4b43      	ldr	r3, [pc, #268]	; (8003260 <xTaskResumeAll+0x11c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <xTaskResumeAll+0x2c>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	603b      	str	r3, [r7, #0]
    }
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003170:	f001 f998 	bl	80044a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003174:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <xTaskResumeAll+0x11c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	4a39      	ldr	r2, [pc, #228]	; (8003260 <xTaskResumeAll+0x11c>)
 800317c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <xTaskResumeAll+0x11c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d165      	bne.n	8003252 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <xTaskResumeAll+0x120>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d061      	beq.n	8003252 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318e:	e032      	b.n	80031f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <xTaskResumeAll+0x124>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3318      	adds	r3, #24
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff f841 	bl	8002224 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f83c 	bl	8002224 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fb56 	bl	8006860 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <xTaskResumeAll+0x128>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4a2a      	ldr	r2, [pc, #168]	; (800326c <xTaskResumeAll+0x128>)
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4a27      	ldr	r2, [pc, #156]	; (8003270 <xTaskResumeAll+0x12c>)
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f7fe ffc4 	bl	800216a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <xTaskResumeAll+0x130>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <xTaskResumeAll+0x134>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <xTaskResumeAll+0x124>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1c8      	bne.n	8003190 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003204:	f000 fb5c 	bl	80038c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <xTaskResumeAll+0x138>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003214:	f000 f858 	bl	80032c8 <xTaskIncrementTick>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <xTaskResumeAll+0x134>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f1      	bne.n	8003214 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <xTaskResumeAll+0x138>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <xTaskResumeAll+0x134>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800323e:	2301      	movs	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <xTaskResumeAll+0x13c>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003252:	f001 f957 	bl	8004504 <vPortExitCritical>

    return xAlreadyYielded;
 8003256:	68bb      	ldr	r3, [r7, #8]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000130 	.word	0x20000130
 8003264:	20000108 	.word	0x20000108
 8003268:	200000c8 	.word	0x200000c8
 800326c:	20000110 	.word	0x20000110
 8003270:	20000034 	.word	0x20000034
 8003274:	20000030 	.word	0x20000030
 8003278:	2000011c 	.word	0x2000011c
 800327c:	20000118 	.word	0x20000118
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <xTaskGetTickCount+0x1c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	2000010c 	.word	0x2000010c

080032a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032aa:	f001 f9e7 	bl	800467c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <xTaskGetTickCountFromISR+0x20>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032b8:	683b      	ldr	r3, [r7, #0]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000010c 	.word	0x2000010c

080032c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <xTaskIncrementTick+0x14c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 8092 	bne.w	8003400 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032dc:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <xTaskIncrementTick+0x150>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <xTaskIncrementTick+0x150>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d120      	bne.n	8003332 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032f0:	4b4a      	ldr	r3, [pc, #296]	; (800341c <xTaskIncrementTick+0x154>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <xTaskIncrementTick+0x48>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	603b      	str	r3, [r7, #0]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xTaskIncrementTick+0x46>
 8003310:	4b42      	ldr	r3, [pc, #264]	; (800341c <xTaskIncrementTick+0x154>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b42      	ldr	r3, [pc, #264]	; (8003420 <xTaskIncrementTick+0x158>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a40      	ldr	r2, [pc, #256]	; (800341c <xTaskIncrementTick+0x154>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4a40      	ldr	r2, [pc, #256]	; (8003420 <xTaskIncrementTick+0x158>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <xTaskIncrementTick+0x15c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a3e      	ldr	r2, [pc, #248]	; (8003424 <xTaskIncrementTick+0x15c>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f000 fac7 	bl	80038c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <xTaskIncrementTick+0x160>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d34c      	bcc.n	80033d6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333c:	4b37      	ldr	r3, [pc, #220]	; (800341c <xTaskIncrementTick+0x154>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <xTaskIncrementTick+0x160>)
 8003348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800334c:	601a      	str	r2, [r3, #0]
                    break;
 800334e:	e042      	b.n	80033d6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <xTaskIncrementTick+0x154>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	d203      	bcs.n	8003370 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003368:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <xTaskIncrementTick+0x160>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800336e:	e032      	b.n	80033d6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3304      	adds	r3, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe ff55 	bl	8002224 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3318      	adds	r3, #24
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe ff4c 	bl	8002224 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fa66 	bl	8006860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	4b23      	ldr	r3, [pc, #140]	; (800342c <xTaskIncrementTick+0x164>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <xTaskIncrementTick+0x164>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <xTaskIncrementTick+0x168>)
 80033b4:	441a      	add	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	4610      	mov	r0, r2
 80033be:	f7fe fed4 	bl	800216a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <xTaskIncrementTick+0x16c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3b5      	bcc.n	800333c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d4:	e7b2      	b.n	800333c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <xTaskIncrementTick+0x16c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4914      	ldr	r1, [pc, #80]	; (8003430 <xTaskIncrementTick+0x168>)
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d901      	bls.n	80033f2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80033ee:	2301      	movs	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <xTaskIncrementTick+0x170>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80033fa:	2301      	movs	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e004      	b.n	800340a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <xTaskIncrementTick+0x174>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <xTaskIncrementTick+0x174>)
 8003408:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800340a:	697b      	ldr	r3, [r7, #20]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000130 	.word	0x20000130
 8003418:	2000010c 	.word	0x2000010c
 800341c:	200000c0 	.word	0x200000c0
 8003420:	200000c4 	.word	0x200000c4
 8003424:	20000120 	.word	0x20000120
 8003428:	20000128 	.word	0x20000128
 800342c:	20000110 	.word	0x20000110
 8003430:	20000034 	.word	0x20000034
 8003434:	20000030 	.word	0x20000030
 8003438:	2000011c 	.word	0x2000011c
 800343c:	20000118 	.word	0x20000118

08003440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <vTaskSwitchContext+0xbc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <vTaskSwitchContext+0xc0>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003454:	e04d      	b.n	80034f2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <vTaskSwitchContext+0xc0>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <vTaskSwitchContext+0xc4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	f1c3 031f 	rsb	r3, r3, #31
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	4925      	ldr	r1, [pc, #148]	; (8003508 <vTaskSwitchContext+0xc8>)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <vTaskSwitchContext+0x5a>
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <vTaskSwitchContext+0xc8>)
 80034a8:	4413      	add	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	3308      	adds	r3, #8
 80034be:	429a      	cmp	r2, r3
 80034c0:	d104      	bne.n	80034cc <vTaskSwitchContext+0x8c>
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <vTaskSwitchContext+0xcc>)
 80034d4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <vTaskSwitchContext+0xcc>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <vTaskSwitchContext+0xd0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d102      	bne.n	80034e8 <vTaskSwitchContext+0xa8>
 80034e2:	f003 f91d 	bl	8006720 <SEGGER_SYSVIEW_OnIdle>
}
 80034e6:	e004      	b.n	80034f2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <vTaskSwitchContext+0xcc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f003 f975 	bl	80067dc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000130 	.word	0x20000130
 8003500:	2000011c 	.word	0x2000011c
 8003504:	20000110 	.word	0x20000110
 8003508:	20000034 	.word	0x20000034
 800350c:	20000030 	.word	0x20000030
 8003510:	2000012c 	.word	0x2000012c

08003514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
    }
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <vTaskPlaceOnEventList+0x44>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3318      	adds	r3, #24
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fe35 	bl	80021b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003548:	2101      	movs	r1, #1
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f000 fa72 	bl	8003a34 <prvAddCurrentTaskToDelayedList>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000030 	.word	0x20000030

0800355c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	617b      	str	r3, [r7, #20]
    }
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <vTaskPlaceOnEventListRestricted+0x58>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3318      	adds	r3, #24
 800358a:	4619      	mov	r1, r3
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fe fdec 	bl	800216a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800359e:	2024      	movs	r0, #36	; 0x24
 80035a0:	f002 fbc0 	bl	8005d24 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f000 fa44 	bl	8003a34 <prvAddCurrentTaskToDelayedList>
    }
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000030 	.word	0x20000030

080035b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60fb      	str	r3, [r7, #12]
    }
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3318      	adds	r3, #24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fe1b 	bl	8002224 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <xTaskRemoveFromEventList+0xb4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d120      	bne.n	8003638 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fe12 	bl	8002224 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4618      	mov	r0, r3
 8003604:	f003 f92c 	bl	8006860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2201      	movs	r2, #1
 800360e:	409a      	lsls	r2, r3
 8003610:	4b17      	ldr	r3, [pc, #92]	; (8003670 <xTaskRemoveFromEventList+0xb8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <xTaskRemoveFromEventList+0xb8>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <xTaskRemoveFromEventList+0xbc>)
 8003628:	441a      	add	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3304      	adds	r3, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7fe fd9a 	bl	800216a <vListInsertEnd>
 8003636:	e005      	b.n	8003644 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3318      	adds	r3, #24
 800363c:	4619      	mov	r1, r3
 800363e:	480e      	ldr	r0, [pc, #56]	; (8003678 <xTaskRemoveFromEventList+0xc0>)
 8003640:	f7fe fd93 	bl	800216a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <xTaskRemoveFromEventList+0xc4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d905      	bls.n	800365e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <xTaskRemoveFromEventList+0xc8>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e001      	b.n	8003662 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003662:	697b      	ldr	r3, [r7, #20]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000130 	.word	0x20000130
 8003670:	20000110 	.word	0x20000110
 8003674:	20000034 	.word	0x20000034
 8003678:	200000c8 	.word	0x200000c8
 800367c:	20000030 	.word	0x20000030
 8003680:	2000011c 	.word	0x2000011c

08003684 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <vTaskInternalSetTimeOutState+0x24>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <vTaskInternalSetTimeOutState+0x28>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000120 	.word	0x20000120
 80036ac:	2000010c 	.word	0x2000010c

080036b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	613b      	str	r3, [r7, #16]
    }
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60fb      	str	r3, [r7, #12]
    }
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80036f2:	f000 fed7 	bl	80044a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <xTaskCheckForTimeOut+0xc4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370e:	d102      	bne.n	8003716 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e026      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <xTaskCheckForTimeOut+0xc8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d00a      	beq.n	8003738 <xTaskCheckForTimeOut+0x88>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	d305      	bcc.n	8003738 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e015      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20b      	bcs.n	800375a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff98 	bl	8003684 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e004      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003764:	f000 fece 	bl	8004504 <vPortExitCritical>

    return xReturn;
 8003768:	69fb      	ldr	r3, [r7, #28]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000010c 	.word	0x2000010c
 8003778:	20000120 	.word	0x20000120

0800377c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <vTaskMissedYield+0x14>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	2000011c 	.word	0x2000011c

08003794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800379c:	f000 f852 	bl	8003844 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <prvIdleTask+0x28>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9f9      	bls.n	800379c <prvIdleTask+0x8>
                {
                    taskYIELD();
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <prvIdleTask+0x2c>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037b8:	e7f0      	b.n	800379c <prvIdleTask+0x8>
 80037ba:	bf00      	nop
 80037bc:	20000034 	.word	0x20000034
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e00c      	b.n	80037ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <prvInitialiseTaskLists+0x60>)
 80037dc:	4413      	add	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fc96 	bl	8002110 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d9ef      	bls.n	80037d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <prvInitialiseTaskLists+0x64>)
 80037f2:	f7fe fc8d 	bl	8002110 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037f6:	480d      	ldr	r0, [pc, #52]	; (800382c <prvInitialiseTaskLists+0x68>)
 80037f8:	f7fe fc8a 	bl	8002110 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <prvInitialiseTaskLists+0x6c>)
 80037fe:	f7fe fc87 	bl	8002110 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003802:	480c      	ldr	r0, [pc, #48]	; (8003834 <prvInitialiseTaskLists+0x70>)
 8003804:	f7fe fc84 	bl	8002110 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <prvInitialiseTaskLists+0x74>)
 800380a:	f7fe fc81 	bl	8002110 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvInitialiseTaskLists+0x78>)
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <prvInitialiseTaskLists+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvInitialiseTaskLists+0x7c>)
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <prvInitialiseTaskLists+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000034 	.word	0x20000034
 8003828:	20000098 	.word	0x20000098
 800382c:	200000ac 	.word	0x200000ac
 8003830:	200000c8 	.word	0x200000c8
 8003834:	200000dc 	.word	0x200000dc
 8003838:	200000f4 	.word	0x200000f4
 800383c:	200000c0 	.word	0x200000c0
 8003840:	200000c4 	.word	0x200000c4

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e019      	b.n	8003880 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800384c:	f000 fe2a 	bl	80044a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fce1 	bl	8002224 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 800386a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003874:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003876:	f000 fe45 	bl	8004504 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f810 	bl	80038a0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e1      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200000dc 	.word	0x200000dc
 8003898:	20000108 	.word	0x20000108
 800389c:	200000f0 	.word	0x200000f0

080038a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f805 	bl	80048bc <vPortFree>
                vPortFree( pxTCB );
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f001 f802 	bl	80048bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <prvResetNextTaskUnblockTime+0x30>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <prvResetNextTaskUnblockTime+0x34>)
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038d6:	e005      	b.n	80038e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <prvResetNextTaskUnblockTime+0x30>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <prvResetNextTaskUnblockTime+0x34>)
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	200000c0 	.word	0x200000c0
 80038f4:	20000128 	.word	0x20000128

080038f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <xTaskGetSchedulerState+0x34>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003906:	2301      	movs	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	e008      	b.n	800391e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <xTaskGetSchedulerState+0x38>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003914:	2302      	movs	r3, #2
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e001      	b.n	800391e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800391e:	687b      	ldr	r3, [r7, #4]
    }
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	20000114 	.word	0x20000114
 8003930:	20000130 	.word	0x20000130

08003934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d068      	beq.n	8003a1c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <xTaskPriorityDisinherit+0xf4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	429a      	cmp	r2, r3
 8003952:	d00a      	beq.n	800396a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	60fb      	str	r3, [r7, #12]
    }
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60bb      	str	r3, [r7, #8]
    }
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	429a      	cmp	r2, r3
 800399c:	d03e      	beq.n	8003a1c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d13a      	bne.n	8003a1c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fc3a 	bl	8002224 <uxListRemove>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2201      	movs	r2, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43da      	mvns	r2, r3
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <xTaskPriorityDisinherit+0xf8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4013      	ands	r3, r2
 80039c8:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <xTaskPriorityDisinherit+0xf8>)
 80039ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4619      	mov	r1, r3
 80039d0:	204a      	movs	r0, #74	; 0x4a
 80039d2:	f002 f9c5 	bl	8005d60 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f1c3 0205 	rsb	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <xTaskPriorityDisinherit+0xf8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <xTaskPriorityDisinherit+0xf8>)
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <xTaskPriorityDisinherit+0xfc>)
 8003a0a:	441a      	add	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f7fe fba9 	bl	800216a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a1c:	697b      	ldr	r3, [r7, #20]
    }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000030 	.word	0x20000030
 8003a2c:	20000110 	.word	0x20000110
 8003a30:	20000034 	.word	0x20000034

08003a34 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fbea 	bl	8002224 <uxListRemove>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a6c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a74:	d110      	bne.n	8003a98 <prvAddCurrentTaskToDelayedList+0x64>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	211b      	movs	r1, #27
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 ff2e 	bl	80068e4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4820      	ldr	r0, [pc, #128]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003a92:	f7fe fb6a 	bl	800216a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a96:	e032      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d20f      	bcs.n	8003ad0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f002 ff14 	bl	80068e4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003abc:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fb72 	bl	80021b2 <vListInsert>
}
 8003ace:	e016      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 ff04 	bl	80068e4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe fb62 	bl	80021b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d202      	bcs.n	8003afe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6013      	str	r3, [r2, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2000010c 	.word	0x2000010c
 8003b0c:	20000030 	.word	0x20000030
 8003b10:	20000110 	.word	0x20000110
 8003b14:	200000f4 	.word	0x200000f4
 8003b18:	200000c4 	.word	0x200000c4
 8003b1c:	200000c0 	.word	0x200000c0
 8003b20:	20000128 	.word	0x20000128

08003b24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b2e:	f000 fad5 	bl	80040dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <xTimerCreateTimerTask+0x54>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <xTimerCreateTimerTask+0x58>)
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b48:	490d      	ldr	r1, [pc, #52]	; (8003b80 <xTimerCreateTimerTask+0x5c>)
 8003b4a:	480e      	ldr	r0, [pc, #56]	; (8003b84 <xTimerCreateTimerTask+0x60>)
 8003b4c:	f7ff f8ee 	bl	8002d2c <xTaskCreate>
 8003b50:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	603b      	str	r3, [r7, #0]
    }
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b6e:	687b      	ldr	r3, [r7, #4]
    }
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000164 	.word	0x20000164
 8003b7c:	20000168 	.word	0x20000168
 8003b80:	08006d98 	.word	0x08006d98
 8003b84:	08003cbd 	.word	0x08003cbd

08003b88 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	623b      	str	r3, [r7, #32]
    }
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <xTimerGenericCommand+0x98>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02a      	beq.n	8003c14 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	dc18      	bgt.n	8003c02 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bd0:	f7ff fe92 	bl	80038f8 <xTaskGetSchedulerState>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d109      	bne.n	8003bee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <xTimerGenericCommand+0x98>)
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f107 0114 	add.w	r1, r7, #20
 8003be2:	2300      	movs	r3, #0
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	f7fe fc37 	bl	8002458 <xQueueGenericSend>
 8003bea:	6278      	str	r0, [r7, #36]	; 0x24
 8003bec:	e012      	b.n	8003c14 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <xTimerGenericCommand+0x98>)
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f107 0114 	add.w	r1, r7, #20
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f7fe fc2d 	bl	8002458 <xQueueGenericSend>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24
 8003c00:	e008      	b.n	8003c14 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <xTimerGenericCommand+0x98>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	f107 0114 	add.w	r1, r7, #20
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	f7fe fd49 	bl	80026a4 <xQueueGenericSendFromISR>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000164 	.word	0x20000164

08003c24 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <prvProcessExpiredTimer+0x94>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe faf1 	bl	8002224 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d022      	beq.n	8003c96 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	18d1      	adds	r1, r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	6978      	ldr	r0, [r7, #20]
 8003c5e:	f000 f8d1 	bl	8003e04 <prvInsertTimerInActiveList>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01f      	beq.n	8003ca8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	2100      	movs	r1, #0
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff ff88 	bl	8003b88 <xTimerGenericCommand>
 8003c78:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	4798      	blx	r3
    }
 8003cb0:	bf00      	nop
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000015c 	.word	0x2000015c

08003cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f857 	bl	8003d7c <prvGetNextExpireTime>
 8003cce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f803 	bl	8003ce0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cda:	f000 f8d5 	bl	8003e88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cde:	e7f1      	b.n	8003cc4 <prvTimerTask+0x8>

08003ce0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cea:	f7ff fa1d 	bl	8003128 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cee:	f107 0308 	add.w	r3, r7, #8
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f866 	bl	8003dc4 <prvSampleTimeNow>
 8003cf8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d130      	bne.n	8003d62 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <prvProcessTimerOrBlockTask+0x3c>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d806      	bhi.n	8003d1c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d0e:	f7ff fa19 	bl	8003144 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff85 	bl	8003c24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d1a:	e024      	b.n	8003d66 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <prvProcessTimerOrBlockTask+0x90>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <prvProcessTimerOrBlockTask+0x50>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <prvProcessTimerOrBlockTask+0x52>
 8003d30:	2300      	movs	r3, #0
 8003d32:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <prvProcessTimerOrBlockTask+0x94>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f7fe ffbf 	bl	8002cc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d46:	f7ff f9fd 	bl	8003144 <xTaskResumeAll>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <prvProcessTimerOrBlockTask+0x98>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
    }
 8003d60:	e001      	b.n	8003d66 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d62:	f7ff f9ef 	bl	8003144 <xTaskResumeAll>
    }
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000160 	.word	0x20000160
 8003d74:	20000164 	.word	0x20000164
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <prvGetNextExpireTime+0x44>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <prvGetNextExpireTime+0x16>
 8003d8e:	2201      	movs	r2, #1
 8003d90:	e000      	b.n	8003d94 <prvGetNextExpireTime+0x18>
 8003d92:	2200      	movs	r2, #0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <prvGetNextExpireTime+0x44>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e001      	b.n	8003db0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003db0:	68fb      	ldr	r3, [r7, #12]
    }
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	2000015c 	.word	0x2000015c

08003dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003dcc:	f7ff fa5a 	bl	8003284 <xTaskGetTickCount>
 8003dd0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvSampleTimeNow+0x3c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d205      	bcs.n	8003de8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ddc:	f000 f91a 	bl	8004014 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <prvSampleTimeNow+0x3c>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003df4:	68fb      	ldr	r3, [r7, #12]
    }
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000016c 	.word	0x2000016c

08003e04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d812      	bhi.n	8003e50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e01b      	b.n	8003e76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <prvInsertTimerInActiveList+0x7c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7fe f9b2 	bl	80021b2 <vListInsert>
 8003e4e:	e012      	b.n	8003e76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d206      	bcs.n	8003e66 <prvInsertTimerInActiveList+0x62>
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e007      	b.n	8003e76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <prvInsertTimerInActiveList+0x80>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7fe f99e 	bl	80021b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e76:	697b      	ldr	r3, [r7, #20]
    }
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000160 	.word	0x20000160
 8003e84:	2000015c 	.word	0x2000015c

08003e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e8e:	e0ae      	b.n	8003fee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f2c0 80aa 	blt.w	8003fec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe f9bb 	bl	8002224 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff87 	bl	8003dc4 <prvSampleTimeNow>
 8003eb6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	f200 8097 	bhi.w	8003fee <prvProcessReceivedCommands+0x166>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <prvProcessReceivedCommands+0x40>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef1 	.word	0x08003ef1
 8003ed4:	08003f65 	.word	0x08003f65
 8003ed8:	08003f79 	.word	0x08003f79
 8003edc:	08003fc3 	.word	0x08003fc3
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003ef1 	.word	0x08003ef1
 8003ee8:	08003f65 	.word	0x08003f65
 8003eec:	08003f79 	.word	0x08003f79
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	18d1      	adds	r1, r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f10:	f7ff ff78 	bl	8003e04 <prvInsertTimerInActiveList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d069      	beq.n	8003fee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f20:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05e      	beq.n	8003fee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	441a      	add	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f42:	f7ff fe21 	bl	8003b88 <xTimerGenericCommand>
 8003f46:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d14f      	bne.n	8003fee <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61bb      	str	r3, [r7, #24]
    }
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f76:	e03a      	b.n	8003fee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	617b      	str	r3, [r7, #20]
    }
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	18d1      	adds	r1, r2, r3
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fbc:	f7ff ff22 	bl	8003e04 <prvInsertTimerInActiveList>
                        break;
 8003fc0:	e015      	b.n	8003fee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d103      	bne.n	8003fd8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fd2:	f000 fc73 	bl	80048bc <vPortFree>
 8003fd6:	e00a      	b.n	8003fee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003fea:	e000      	b.n	8003fee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003fec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <prvProcessReceivedCommands+0x188>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f107 0108 	add.w	r1, r7, #8
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fc11 	bl	8002820 <xQueueReceive>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f af45 	bne.w	8003e90 <prvProcessReceivedCommands+0x8>
        }
    }
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000164 	.word	0x20000164

08004014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800401a:	e048      	b.n	80040ae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe f8f5 	bl	8002224 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02e      	beq.n	80040ae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	429a      	cmp	r2, r3
 8004060:	d90e      	bls.n	8004080 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f7fe f89a 	bl	80021b2 <vListInsert>
 800407e:	e016      	b.n	80040ae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	2100      	movs	r1, #0
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fd7c 	bl	8003b88 <xTimerGenericCommand>
 8004090:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	603b      	str	r3, [r7, #0]
    }
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1b1      	bne.n	800401c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvSwitchTimerLists+0xc4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <prvSwitchTimerLists+0xc0>)
 80040c4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <prvSwitchTimerLists+0xc4>)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	6013      	str	r3, [r2, #0]
    }
 80040cc:	bf00      	nop
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	2000015c 	.word	0x2000015c
 80040d8:	20000160 	.word	0x20000160

080040dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80040e0:	f000 f9e0 	bl	80044a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <prvCheckForValidListAndQueue+0x54>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11d      	bne.n	8004128 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040ec:	4811      	ldr	r0, [pc, #68]	; (8004134 <prvCheckForValidListAndQueue+0x58>)
 80040ee:	f7fe f80f 	bl	8002110 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80040f2:	4811      	ldr	r0, [pc, #68]	; (8004138 <prvCheckForValidListAndQueue+0x5c>)
 80040f4:	f7fe f80c 	bl	8002110 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <prvCheckForValidListAndQueue+0x60>)
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <prvCheckForValidListAndQueue+0x58>)
 80040fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <prvCheckForValidListAndQueue+0x64>)
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <prvCheckForValidListAndQueue+0x5c>)
 8004102:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004104:	2200      	movs	r2, #0
 8004106:	210c      	movs	r1, #12
 8004108:	200a      	movs	r0, #10
 800410a:	f7fe f91d 	bl	8002348 <xQueueGenericCreate>
 800410e:	4603      	mov	r3, r0
 8004110:	4a07      	ldr	r2, [pc, #28]	; (8004130 <prvCheckForValidListAndQueue+0x54>)
 8004112:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <prvCheckForValidListAndQueue+0x54>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <prvCheckForValidListAndQueue+0x54>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4908      	ldr	r1, [pc, #32]	; (8004144 <prvCheckForValidListAndQueue+0x68>)
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fd9c 	bl	8002c60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004128:	f000 f9ec 	bl	8004504 <vPortExitCritical>
    }
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000164 	.word	0x20000164
 8004134:	20000134 	.word	0x20000134
 8004138:	20000148 	.word	0x20000148
 800413c:	2000015c 	.word	0x2000015c
 8004140:	20000160 	.word	0x20000160
 8004144:	08006da0 	.word	0x08006da0

08004148 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3b04      	subs	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004160:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3b04      	subs	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3b04      	subs	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004178:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <pxPortInitialiseStack+0x64>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b14      	subs	r3, #20
 8004182:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b04      	subs	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f06f 0202 	mvn.w	r2, #2
 8004196:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b20      	subs	r3, #32
 800419c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	080041b1 	.word	0x080041b1

080041b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <prvTaskExitError+0x54>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c2:	d00a      	beq.n	80041da <prvTaskExitError+0x2a>
        __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60fb      	str	r3, [r7, #12]
    }
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <prvTaskExitError+0x28>
        __asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60bb      	str	r3, [r7, #8]
    }
 80041ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041ee:	bf00      	nop
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0fc      	beq.n	80041f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20000010 	.word	0x20000010
	...

08004210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <pxCurrentTCBConst2>)
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	6808      	ldr	r0, [r1, #0]
 8004216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421a:	f380 8809 	msr	PSP, r0
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8811 	msr	BASEPRI, r0
 800422a:	4770      	bx	lr
 800422c:	f3af 8000 	nop.w

08004230 <pxCurrentTCBConst2>:
 8004230:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop

08004238 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004238:	4808      	ldr	r0, [pc, #32]	; (800425c <prvPortStartFirstTask+0x24>)
 800423a:	6800      	ldr	r0, [r0, #0]
 800423c:	6800      	ldr	r0, [r0, #0]
 800423e:	f380 8808 	msr	MSP, r0
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8814 	msr	CONTROL, r0
 800424a:	b662      	cpsie	i
 800424c:	b661      	cpsie	f
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	df00      	svc	0
 8004258:	bf00      	nop
 800425a:	0000      	.short	0x0000
 800425c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop

08004264 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800426a:	4b46      	ldr	r3, [pc, #280]	; (8004384 <xPortStartScheduler+0x120>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a46      	ldr	r2, [pc, #280]	; (8004388 <xPortStartScheduler+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10a      	bne.n	800428a <xPortStartScheduler+0x26>
        __asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	613b      	str	r3, [r7, #16]
    }
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <xPortStartScheduler+0x120>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3f      	ldr	r2, [pc, #252]	; (800438c <xPortStartScheduler+0x128>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10a      	bne.n	80042aa <xPortStartScheduler+0x46>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <xPortStartScheduler+0x12c>)
 80042ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <xPortStartScheduler+0x130>)
 80042d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <xPortStartScheduler+0x134>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042d8:	e009      	b.n	80042ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042da:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <xPortStartScheduler+0x134>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <xPortStartScheduler+0x134>)
 80042e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d0ef      	beq.n	80042da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <xPortStartScheduler+0x134>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1c3 0307 	rsb	r3, r3, #7
 8004302:	2b04      	cmp	r3, #4
 8004304:	d00a      	beq.n	800431c <xPortStartScheduler+0xb8>
        __asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
    }
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <xPortStartScheduler+0x134>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <xPortStartScheduler+0x134>)
 8004324:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <xPortStartScheduler+0x134>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800432e:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <xPortStartScheduler+0x134>)
 8004330:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800433a:	4b18      	ldr	r3, [pc, #96]	; (800439c <xPortStartScheduler+0x138>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <xPortStartScheduler+0x138>)
 8004340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004344:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <xPortStartScheduler+0x138>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a14      	ldr	r2, [pc, #80]	; (800439c <xPortStartScheduler+0x138>)
 800434c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004350:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004352:	f000 f963 	bl	800461c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <xPortStartScheduler+0x13c>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800435c:	f000 f982 	bl	8004664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <xPortStartScheduler+0x140>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <xPortStartScheduler+0x140>)
 8004366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800436c:	f7ff ff64 	bl	8004238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004370:	f7ff f866 	bl	8003440 <vTaskSwitchContext>
    prvTaskExitError();
 8004374:	f7ff ff1c 	bl	80041b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	e000ed00 	.word	0xe000ed00
 8004388:	410fc271 	.word	0x410fc271
 800438c:	410fc270 	.word	0x410fc270
 8004390:	e000e400 	.word	0xe000e400
 8004394:	20000170 	.word	0x20000170
 8004398:	20000174 	.word	0x20000174
 800439c:	e000ed20 	.word	0xe000ed20
 80043a0:	20000010 	.word	0x20000010
 80043a4:	e000ef34 	.word	0xe000ef34

080043a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <vInitPrioGroupValue+0xe4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a37      	ldr	r2, [pc, #220]	; (8004490 <vInitPrioGroupValue+0xe8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10a      	bne.n	80043ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	613b      	str	r3, [r7, #16]
    }
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ce:	4b2f      	ldr	r3, [pc, #188]	; (800448c <vInitPrioGroupValue+0xe4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a30      	ldr	r2, [pc, #192]	; (8004494 <vInitPrioGroupValue+0xec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10a      	bne.n	80043ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
    }
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ee:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <vInitPrioGroupValue+0xf0>)
 80043f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	22ff      	movs	r2, #255	; 0xff
 80043fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <vInitPrioGroupValue+0xf4>)
 8004414:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004418:	2207      	movs	r2, #7
 800441a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800441c:	e009      	b.n	8004432 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3b01      	subs	r3, #1
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004426:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d0ef      	beq.n	800441e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1c3 0307 	rsb	r3, r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	d00a      	beq.n	8004460 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
    }
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004468:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <vInitPrioGroupValue+0xf8>)
 8004474:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000ed00 	.word	0xe000ed00
 8004490:	410fc271 	.word	0x410fc271
 8004494:	410fc270 	.word	0x410fc270
 8004498:	e000e400 	.word	0xe000e400
 800449c:	20000170 	.word	0x20000170
 80044a0:	20000174 	.word	0x20000174

080044a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	607b      	str	r3, [r7, #4]
    }
 80044bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <vPortEnterCritical+0x58>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <vPortEnterCritical+0x58>)
 80044c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <vPortEnterCritical+0x58>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10f      	bne.n	80044f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortEnterCritical+0x5c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	603b      	str	r3, [r7, #0]
    }
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vPortEnterCritical+0x4a>
    }
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000010 	.word	0x20000010
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <vPortExitCritical+0x50>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <vPortExitCritical+0x24>
        __asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	607b      	str	r3, [r7, #4]
    }
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vPortExitCritical+0x50>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <vPortExitCritical+0x50>)
 8004530:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <vPortExitCritical+0x50>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <vPortExitCritical+0x42>
 800453a:	2300      	movs	r3, #0
 800453c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f383 8811 	msr	BASEPRI, r3
    }
 8004544:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000010 	.word	0x20000010
	...

08004560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004560:	f3ef 8009 	mrs	r0, PSP
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <pxCurrentTCBConst>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f01e 0f10 	tst.w	lr, #16
 8004570:	bf08      	it	eq
 8004572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	6010      	str	r0, [r2, #0]
 800457c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004584:	f380 8811 	msr	BASEPRI, r0
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f7fe ff56 	bl	8003440 <vTaskSwitchContext>
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f380 8811 	msr	BASEPRI, r0
 800459c:	bc09      	pop	{r0, r3}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a6:	f01e 0f10 	tst.w	lr, #16
 80045aa:	bf08      	it	eq
 80045ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045b0:	f380 8809 	msr	PSP, r0
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst>:
 80045c0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
    }
 80045e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045e2:	f002 f823 	bl	800662c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045e6:	f7fe fe6f 	bl	80032c8 <xTaskIncrementTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80045f0:	f002 f87a 	bl	80066e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045f4:	4b08      	ldr	r3, [pc, #32]	; (8004618 <SysTick_Handler+0x50>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e001      	b.n	8004602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80045fe:	f002 f857 	bl	80066b0 <SEGGER_SYSVIEW_RecordExitISR>
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f383 8811 	msr	BASEPRI, r3
    }
 800460c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <vPortSetupTimerInterrupt+0x38>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <vPortSetupTimerInterrupt+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <vPortSetupTimerInterrupt+0x40>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a09      	ldr	r2, [pc, #36]	; (8004660 <vPortSetupTimerInterrupt+0x44>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010
 8004654:	e000e018 	.word	0xe000e018
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3
 8004660:	e000e014 	.word	0xe000e014

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
 8004672:	0000      	.short	0x0000
 8004674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop

0800467c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004682:	f3ef 8305 	mrs	r3, IPSR
 8004686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	d914      	bls.n	80046b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <vPortValidateInterruptPriority+0x70>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <vPortValidateInterruptPriority+0x74>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	7afa      	ldrb	r2, [r7, #11]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20a      	bcs.n	80046b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
    }
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <vPortValidateInterruptPriority+0x78>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <vPortValidateInterruptPriority+0x7c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d90a      	bls.n	80046de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	603b      	str	r3, [r7, #0]
    }
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <vPortValidateInterruptPriority+0x60>
    }
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e3f0 	.word	0xe000e3f0
 80046f0:	20000170 	.word	0x20000170
 80046f4:	e000ed0c 	.word	0xe000ed0c
 80046f8:	20000174 	.word	0x20000174

080046fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004708:	f7fe fd0e 	bl	8003128 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800470c:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <pvPortMalloc+0x1a8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004714:	f000 f934 	bl	8004980 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004718:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <pvPortMalloc+0x1ac>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 80a7 	bne.w	8004874 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d02d      	beq.n	8004788 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800472c:	2208      	movs	r2, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d227      	bcs.n	8004788 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004738:	2208      	movs	r2, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2b00      	cmp	r3, #0
 8004748:	d021      	beq.n	800478e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	3308      	adds	r3, #8
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d214      	bcs.n	8004782 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	3308      	adds	r3, #8
 8004760:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <pvPortMalloc+0x92>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	617b      	str	r3, [r7, #20]
    }
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004786:	e002      	b.n	800478e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	e000      	b.n	8004790 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800478e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d06e      	beq.n	8004874 <pvPortMalloc+0x178>
 8004796:	4b45      	ldr	r3, [pc, #276]	; (80048ac <pvPortMalloc+0x1b0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d869      	bhi.n	8004874 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <pvPortMalloc+0x1b4>)
 80047a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047a4:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <pvPortMalloc+0x1b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047aa:	e004      	b.n	80047b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d903      	bls.n	80047c8 <pvPortMalloc+0xcc>
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f1      	bne.n	80047ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <pvPortMalloc+0x1a8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d050      	beq.n	8004874 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2208      	movs	r2, #8
 80047d8:	4413      	add	r3, r2
 80047da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	2308      	movs	r3, #8
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d91f      	bls.n	8004834 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <pvPortMalloc+0x120>
        __asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	613b      	str	r3, [r7, #16]
    }
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800482e:	69b8      	ldr	r0, [r7, #24]
 8004830:	f000 f908 	bl	8004a44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <pvPortMalloc+0x1b0>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <pvPortMalloc+0x1b0>)
 8004840:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <pvPortMalloc+0x1b0>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <pvPortMalloc+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d203      	bcs.n	8004856 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <pvPortMalloc+0x1b0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <pvPortMalloc+0x1b8>)
 8004854:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <pvPortMalloc+0x1ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	431a      	orrs	r2, r3
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <pvPortMalloc+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <pvPortMalloc+0x1bc>)
 8004872:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004874:	f7fe fc66 	bl	8003144 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <pvPortMalloc+0x19c>
        __asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
    }
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <pvPortMalloc+0x19a>
    return pvReturn;
 8004898:	69fb      	ldr	r3, [r7, #28]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3728      	adds	r7, #40	; 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20012d80 	.word	0x20012d80
 80048a8:	20012d94 	.word	0x20012d94
 80048ac:	20012d84 	.word	0x20012d84
 80048b0:	20012d78 	.word	0x20012d78
 80048b4:	20012d88 	.word	0x20012d88
 80048b8:	20012d8c 	.word	0x20012d8c

080048bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d04d      	beq.n	800496a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048ce:	2308      	movs	r3, #8
 80048d0:	425b      	negs	r3, r3
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <vPortFree+0xb8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <vPortFree+0x44>
        __asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60fb      	str	r3, [r7, #12]
    }
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <vPortFree+0x62>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60bb      	str	r3, [r7, #8]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <vPortFree+0xb8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01e      	beq.n	800496a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11a      	bne.n	800496a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <vPortFree+0xb8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004944:	f7fe fbf0 	bl	8003128 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vPortFree+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4413      	add	r3, r2
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <vPortFree+0xbc>)
 8004954:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004956:	6938      	ldr	r0, [r7, #16]
 8004958:	f000 f874 	bl	8004a44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <vPortFree+0xc0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	4a06      	ldr	r2, [pc, #24]	; (800497c <vPortFree+0xc0>)
 8004964:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004966:	f7fe fbed 	bl	8003144 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20012d94 	.word	0x20012d94
 8004978:	20012d84 	.word	0x20012d84
 800497c:	20012d90 	.word	0x20012d90

08004980 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004986:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800498a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <prvHeapInit+0xac>)
 800498e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3307      	adds	r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0307 	bic.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <prvHeapInit+0xac>)
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <prvHeapInit+0xb0>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049be:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <prvHeapInit+0xb0>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049cc:	2208      	movs	r2, #8
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <prvHeapInit+0xb4>)
 80049e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <prvHeapInit+0xb4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <prvHeapInit+0xb4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <prvHeapInit+0xb4>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <prvHeapInit+0xb8>)
 8004a0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <prvHeapInit+0xbc>)
 8004a16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <prvHeapInit+0xc0>)
 8004a1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a1e:	601a      	str	r2, [r3, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000178 	.word	0x20000178
 8004a30:	20012d78 	.word	0x20012d78
 8004a34:	20012d80 	.word	0x20012d80
 8004a38:	20012d88 	.word	0x20012d88
 8004a3c:	20012d84 	.word	0x20012d84
 8004a40:	20012d94 	.word	0x20012d94

08004a44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a4c:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <prvInsertBlockIntoFreeList+0xac>)
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e002      	b.n	8004a58 <prvInsertBlockIntoFreeList+0x14>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d8f7      	bhi.n	8004a52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d108      	bne.n	8004a86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d118      	bne.n	8004acc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <prvInsertBlockIntoFreeList+0xb0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d00d      	beq.n	8004ac2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e008      	b.n	8004ad4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e003      	b.n	8004ad4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d002      	beq.n	8004ae2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20012d78 	.word	0x20012d78
 8004af4:	20012d80 	.word	0x20012d80

08004af8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004afc:	4803      	ldr	r0, [pc, #12]	; (8004b0c <_cbSendSystemDesc+0x14>)
 8004afe:	f001 fd3f 	bl	8006580 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <_cbSendSystemDesc+0x18>)
 8004b04:	f001 fd3c 	bl	8006580 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	08006da8 	.word	0x08006da8
 8004b10:	08006de8 	.word	0x08006de8

08004b14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b22:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b24:	f001 f8aa 	bl	8005c7c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b2c:	f001 f8ea 	bl	8005d04 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b30:	bf00      	nop
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000000 	.word	0x20000000
 8004b38:	08004af9 	.word	0x08004af9
 8004b3c:	08006e88 	.word	0x08006e88

08004b40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e033      	b.n	8004bb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b4c:	491e      	ldr	r1, [pc, #120]	; (8004bc8 <_cbSendTaskList+0x88>)
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	491a      	ldr	r1, [pc, #104]	; (8004bc8 <_cbSendTaskList+0x88>)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	4c16      	ldr	r4, [pc, #88]	; (8004bc8 <_cbSendTaskList+0x88>)
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4423      	add	r3, r4
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	4d11      	ldr	r5, [pc, #68]	; (8004bc8 <_cbSendTaskList+0x88>)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	442b      	add	r3, r5
 8004b8e:	330c      	adds	r3, #12
 8004b90:	681d      	ldr	r5, [r3, #0]
 8004b92:	4e0d      	ldr	r6, [pc, #52]	; (8004bc8 <_cbSendTaskList+0x88>)
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4433      	add	r3, r6
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	4622      	mov	r2, r4
 8004baa:	f000 f8b5 	bl	8004d18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <_cbSendTaskList+0x8c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3c6      	bcc.n	8004b4c <_cbSendTaskList+0xc>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc8:	20012d98 	.word	0x20012d98
 8004bcc:	20012e38 	.word	0x20012e38

08004bd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bd6:	f7fe fb65 	bl	80032a4 <xTaskGetTickCountFromISR>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	f04f 0500 	mov.w	r5, #0
 8004bf6:	015d      	lsls	r5, r3, #5
 8004bf8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004bfc:	0154      	lsls	r4, r2, #5
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	1a12      	subs	r2, r2, r0
 8004c04:	eb63 0301 	sbc.w	r3, r3, r1
 8004c08:	f04f 0400 	mov.w	r4, #0
 8004c0c:	f04f 0500 	mov.w	r5, #0
 8004c10:	009d      	lsls	r5, r3, #2
 8004c12:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004c16:	0094      	lsls	r4, r2, #2
 8004c18:	4622      	mov	r2, r4
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	1812      	adds	r2, r2, r0
 8004c1e:	eb41 0303 	adc.w	r3, r1, r3
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	00d9      	lsls	r1, r3, #3
 8004c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c30:	00d0      	lsls	r0, r2, #3
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}

08004c48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c56:	2205      	movs	r2, #5
 8004c58:	492b      	ldr	r1, [pc, #172]	; (8004d08 <SYSVIEW_AddTask+0xc0>)
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f002 f822 	bl	8006ca4 <memcmp>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d04b      	beq.n	8004cfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b07      	cmp	r3, #7
 8004c6c:	d903      	bls.n	8004c76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c6e:	4828      	ldr	r0, [pc, #160]	; (8004d10 <SYSVIEW_AddTask+0xc8>)
 8004c70:	f001 ff98 	bl	8006ba4 <SEGGER_SYSVIEW_Warn>
    return;
 8004c74:	e044      	b.n	8004d00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c76:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4926      	ldr	r1, [pc, #152]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4921      	ldr	r1, [pc, #132]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	491b      	ldr	r1, [pc, #108]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4916      	ldr	r1, [pc, #88]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4910      	ldr	r1, [pc, #64]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3310      	adds	r3, #16
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f80e 	bl	8004d18 <SYSVIEW_SendTaskInfo>
 8004cfc:	e000      	b.n	8004d00 <SYSVIEW_AddTask+0xb8>
    return;
 8004cfe:	bf00      	nop

}
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	08006df8 	.word	0x08006df8
 8004d0c:	20012e38 	.word	0x20012e38
 8004d10:	08006e00 	.word	0x08006e00
 8004d14:	20012d98 	.word	0x20012d98

08004d18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	2214      	movs	r2, #20
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 ffd4 	bl	8006cdc <memset>
  TaskInfo.TaskID     = TaskID;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fb1f 	bl	8006390 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d52:	bf00      	nop
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <_DoInit+0x98>)
 8004d64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <_DoInit+0x9c>)
 8004d76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <_DoInit+0xa0>)
 8004d7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <_DoInit+0x9c>)
 8004d9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <_DoInit+0xa4>)
 8004da2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2210      	movs	r2, #16
 8004da8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3307      	adds	r3, #7
 8004dc0:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <_DoInit+0xa8>)
 8004dc2:	6810      	ldr	r0, [r2, #0]
 8004dc4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dc6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <_DoInit+0xac>)
 8004dce:	6810      	ldr	r0, [r2, #0]
 8004dd0:	6018      	str	r0, [r3, #0]
 8004dd2:	8891      	ldrh	r1, [r2, #4]
 8004dd4:	7992      	ldrb	r2, [r2, #6]
 8004dd6:	8099      	strh	r1, [r3, #4]
 8004dd8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004de4:	f3bf 8f5f 	dmb	sy
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	200143f4 	.word	0x200143f4
 8004df8:	08006e50 	.word	0x08006e50
 8004dfc:	20012e3c 	.word	0x20012e3c
 8004e00:	2001323c 	.word	0x2001323c
 8004e04:	08006e5c 	.word	0x08006e5c
 8004e08:	08006e60 	.word	0x08006e60

08004e0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e1a:	623b      	str	r3, [r7, #32]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e26:	f7ff ff99 	bl	8004d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	3360      	adds	r3, #96	; 0x60
 8004e36:	4a37      	ldr	r2, [pc, #220]	; (8004f14 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d92b      	bls.n	8004eb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bf28      	it	cs
 8004e6a:	4613      	movcs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	4413      	add	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7e:	f001 ff1f 	bl	8006cc0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d101      	bne.n	8004eb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bf28      	it	cs
 8004ec0:	4613      	movcs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d019      	beq.n	8004efe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	4413      	add	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	6939      	ldr	r1, [r7, #16]
 8004ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eda:	f001 fef1 	bl	8006cc0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200143f4 	.word	0x200143f4

08004f18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f34:	f7ff ff12 	bl	8004d5c <_DoInit>
  SEGGER_RTT_LOCK();
 8004f38:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3c:	f04f 0120 	mov.w	r1, #32
 8004f40:	f381 8811 	msr	BASEPRI, r1
 8004f44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f46:	4b35      	ldr	r3, [pc, #212]	; (800501c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f4e:	6939      	ldr	r1, [r7, #16]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3304      	adds	r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	dbeb      	blt.n	8004f4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f76:	e000      	b.n	8004f7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	da3f      	bge.n	8005004 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3304      	adds	r3, #4
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	3328      	adds	r3, #40	; 0x28
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	332c      	adds	r3, #44	; 0x2c
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ffe:	f3bf 8f5f 	dmb	sy
 8005002:	e002      	b.n	800500a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005008:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200143f4 	.word	0x200143f4

08005020 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800502e:	4b33      	ldr	r3, [pc, #204]	; (80050fc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800503c:	f7ff fe8e 	bl	8004d5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005040:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005042:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	461a      	mov	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4293      	cmp	r3, r2
 800504e:	d24d      	bcs.n	80050ec <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005050:	f3ef 8311 	mrs	r3, BASEPRI
 8005054:	f04f 0120 	mov.w	r1, #32
 8005058:	f381 8811 	msr	BASEPRI, r1
 800505c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d031      	beq.n	80050c8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005064:	6979      	ldr	r1, [r7, #20]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	440b      	add	r3, r1
 8005072:	3360      	adds	r3, #96	; 0x60
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	3364      	adds	r3, #100	; 0x64
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	3368      	adds	r3, #104	; 0x68
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3370      	adds	r3, #112	; 0x70
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80050b4:	6979      	ldr	r1, [r7, #20]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	440b      	add	r3, r1
 80050c2:	336c      	adds	r3, #108	; 0x6c
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	3374      	adds	r3, #116	; 0x74
 80050d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050da:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e002      	b.n	80050f2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80050f2:	69fb      	ldr	r3, [r7, #28]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200143f4 	.word	0x200143f4

08005100 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005110:	e002      	b.n	8005118 <_EncodeStr+0x18>
    Len++;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f6      	bne.n	8005112 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d901      	bls.n	8005130 <_EncodeStr+0x30>
    Len = Limit;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2bfe      	cmp	r3, #254	; 0xfe
 8005134:	d806      	bhi.n	8005144 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e011      	b.n	8005168 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	60fa      	str	r2, [r7, #12]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	60fa      	str	r2, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	0a19      	lsrs	r1, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	60fa      	str	r2, [r7, #12]
 8005164:	b2ca      	uxtb	r2, r1
 8005166:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800516c:	e00a      	b.n	8005184 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	1c53      	adds	r3, r2, #1
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	60f9      	str	r1, [r7, #12]
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	701a      	strb	r2, [r3, #0]
    n++;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d3f0      	bcc.n	800516e <_EncodeStr+0x6e>
  }
  return pPayload;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051ba:	4b36      	ldr	r3, [pc, #216]	; (8005294 <_HandleIncomingPacket+0xe0>)
 80051bc:	7e1b      	ldrb	r3, [r3, #24]
 80051be:	4618      	mov	r0, r3
 80051c0:	1cfb      	adds	r3, r7, #3
 80051c2:	2201      	movs	r2, #1
 80051c4:	4619      	mov	r1, r3
 80051c6:	f7ff fe21 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
 80051ca:	4603      	mov	r3, r0
 80051cc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	dd54      	ble.n	800527e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d032      	beq.n	8005240 <_HandleIncomingPacket+0x8c>
 80051da:	2b80      	cmp	r3, #128	; 0x80
 80051dc:	dc42      	bgt.n	8005264 <_HandleIncomingPacket+0xb0>
 80051de:	2b07      	cmp	r3, #7
 80051e0:	dc16      	bgt.n	8005210 <_HandleIncomingPacket+0x5c>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dd3e      	ble.n	8005264 <_HandleIncomingPacket+0xb0>
 80051e6:	3b01      	subs	r3, #1
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d83b      	bhi.n	8005264 <_HandleIncomingPacket+0xb0>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <_HandleIncomingPacket+0x40>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005217 	.word	0x08005217
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005223 	.word	0x08005223
 8005200:	08005229 	.word	0x08005229
 8005204:	0800522f 	.word	0x0800522f
 8005208:	08005235 	.word	0x08005235
 800520c:	0800523b 	.word	0x0800523b
 8005210:	2b7f      	cmp	r3, #127	; 0x7f
 8005212:	d036      	beq.n	8005282 <_HandleIncomingPacket+0xce>
 8005214:	e026      	b.n	8005264 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005216:	f000 ff41 	bl	800609c <SEGGER_SYSVIEW_Start>
      break;
 800521a:	e037      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800521c:	f000 fff8 	bl	8006210 <SEGGER_SYSVIEW_Stop>
      break;
 8005220:	e034      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005222:	f001 f9d1 	bl	80065c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005226:	e031      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005228:	f001 f996 	bl	8006558 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800522c:	e02e      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800522e:	f001 f815 	bl	800625c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005232:	e02b      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005234:	f001 fc64 	bl	8006b00 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005238:	e028      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800523a:	f001 fc43 	bl	8006ac4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800523e:	e025      	b.n	800528c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <_HandleIncomingPacket+0xe0>)
 8005242:	7e1b      	ldrb	r3, [r3, #24]
 8005244:	4618      	mov	r0, r3
 8005246:	1cfb      	adds	r3, r7, #3
 8005248:	2201      	movs	r2, #1
 800524a:	4619      	mov	r1, r3
 800524c:	f7ff fdde 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
 8005250:	4603      	mov	r3, r0
 8005252:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	dd15      	ble.n	8005286 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fbb1 	bl	80069c4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005262:	e010      	b.n	8005286 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	b25b      	sxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	da0e      	bge.n	800528a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <_HandleIncomingPacket+0xe0>)
 800526e:	7e1b      	ldrb	r3, [r3, #24]
 8005270:	4618      	mov	r0, r3
 8005272:	1cfb      	adds	r3, r7, #3
 8005274:	2201      	movs	r2, #1
 8005276:	4619      	mov	r1, r3
 8005278:	f7ff fdc8 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800527c:	e005      	b.n	800528a <_HandleIncomingPacket+0xd6>
    }
  }
 800527e:	bf00      	nop
 8005280:	e004      	b.n	800528c <_HandleIncomingPacket+0xd8>
      break;
 8005282:	bf00      	nop
 8005284:	e002      	b.n	800528c <_HandleIncomingPacket+0xd8>
      break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <_HandleIncomingPacket+0xd8>
      break;
 800528a:	bf00      	nop
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20014254 	.word	0x20014254

08005298 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800529e:	2301      	movs	r3, #1
 80052a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b2:	e00b      	b.n	80052cc <_TrySendOverflowPacket+0x34>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	09db      	lsrs	r3, r3, #7
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b7f      	cmp	r3, #127	; 0x7f
 80052d0:	d8f0      	bhi.n	80052b4 <_TrySendOverflowPacket+0x1c>
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052e2:	4b25      	ldr	r3, [pc, #148]	; (8005378 <_TrySendOverflowPacket+0xe0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	623b      	str	r3, [r7, #32]
 80052fa:	e00b      	b.n	8005314 <_TrySendOverflowPacket+0x7c>
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	6279      	str	r1, [r7, #36]	; 0x24
 8005306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	09db      	lsrs	r3, r3, #7
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b7f      	cmp	r3, #127	; 0x7f
 8005318:	d8f0      	bhi.n	80052fc <_TrySendOverflowPacket+0x64>
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	627a      	str	r2, [r7, #36]	; 0x24
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	4618      	mov	r0, r3
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	461a      	mov	r2, r3
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	4619      	mov	r1, r3
 800533c:	f7fa ff48 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005340:	4603      	mov	r3, r0
 8005342:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800534a:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	3b01      	subs	r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e004      	b.n	8005368 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	3301      	adds	r3, #1
 8005364:	4a03      	ldr	r2, [pc, #12]	; (8005374 <_TrySendOverflowPacket+0xdc>)
 8005366:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005368:	693b      	ldr	r3, [r7, #16]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	; 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20014254 	.word	0x20014254
 8005378:	e0001004 	.word	0xe0001004

0800537c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005388:	4b6c      	ldr	r3, [pc, #432]	; (800553c <_SendPacket+0x1c0>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d010      	beq.n	80053b2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <_SendPacket+0x1c0>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a3 	beq.w	80054e0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800539a:	4b68      	ldr	r3, [pc, #416]	; (800553c <_SendPacket+0x1c0>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d109      	bne.n	80053b6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053a2:	f7ff ff79 	bl	8005298 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053a6:	4b65      	ldr	r3, [pc, #404]	; (800553c <_SendPacket+0x1c0>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	f040 809a 	bne.w	80054e4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80053b0:	e001      	b.n	80053b6 <_SendPacket+0x3a>
    goto Send;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <_SendPacket+0x3c>
Send:
 80053b6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b1f      	cmp	r3, #31
 80053bc:	d809      	bhi.n	80053d2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053be:	4b5f      	ldr	r3, [pc, #380]	; (800553c <_SendPacket+0x1c0>)
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f040 808b 	bne.w	80054e8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b17      	cmp	r3, #23
 80053d6:	d807      	bhi.n	80053e8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e03d      	b.n	8005464 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b7f      	cmp	r3, #127	; 0x7f
 80053f4:	d912      	bls.n	800541c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	09da      	lsrs	r2, r3, #7
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	3a01      	subs	r2, #1
 800540e:	60fa      	str	r2, [r7, #12]
 8005410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e006      	b.n	800542a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b7f      	cmp	r3, #127	; 0x7f
 800542e:	d912      	bls.n	8005456 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	09da      	lsrs	r2, r3, #7
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	3a01      	subs	r2, #1
 8005448:	60fa      	str	r2, [r7, #12]
 800544a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e006      	b.n	8005464 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005464:	4b36      	ldr	r3, [pc, #216]	; (8005540 <_SendPacket+0x1c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <_SendPacket+0x1c0>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	e00b      	b.n	8005496 <_SendPacket+0x11a>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	6279      	str	r1, [r7, #36]	; 0x24
 8005488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b7f      	cmp	r3, #127	; 0x7f
 800549a:	d8f0      	bhi.n	800547e <_SendPacket+0x102>
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	627a      	str	r2, [r7, #36]	; 0x24
 80054a2:	6a3a      	ldr	r2, [r7, #32]
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <_SendPacket+0x1c0>)
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	4618      	mov	r0, r3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f7fa fe88 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054c0:	4603      	mov	r3, r0
 80054c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054ca:	4a1c      	ldr	r2, [pc, #112]	; (800553c <_SendPacket+0x1c0>)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	60d3      	str	r3, [r2, #12]
 80054d0:	e00b      	b.n	80054ea <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <_SendPacket+0x1c0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4b18      	ldr	r3, [pc, #96]	; (800553c <_SendPacket+0x1c0>)
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e004      	b.n	80054ea <_SendPacket+0x16e>
    goto SendDone;
 80054e0:	bf00      	nop
 80054e2:	e002      	b.n	80054ea <_SendPacket+0x16e>
      goto SendDone;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <_SendPacket+0x16e>
      goto SendDone;
 80054e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <_SendPacket+0x1c0>)
 80054ec:	7e1b      	ldrb	r3, [r3, #24]
 80054ee:	4619      	mov	r1, r3
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <_SendPacket+0x1c8>)
 80054f2:	460b      	mov	r3, r1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	440b      	add	r3, r1
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	336c      	adds	r3, #108	; 0x6c
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <_SendPacket+0x1c0>)
 8005502:	7e1b      	ldrb	r3, [r3, #24]
 8005504:	4618      	mov	r0, r3
 8005506:	490f      	ldr	r1, [pc, #60]	; (8005544 <_SendPacket+0x1c8>)
 8005508:	4603      	mov	r3, r0
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4403      	add	r3, r0
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	440b      	add	r3, r1
 8005512:	3370      	adds	r3, #112	; 0x70
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d00b      	beq.n	8005532 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <_SendPacket+0x1c0>)
 800551c:	789b      	ldrb	r3, [r3, #2]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <_SendPacket+0x1c0>)
 8005524:	2201      	movs	r2, #1
 8005526:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005528:	f7ff fe44 	bl	80051b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <_SendPacket+0x1c0>)
 800552e:	2200      	movs	r2, #0
 8005530:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005532:	bf00      	nop
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20014254 	.word	0x20014254
 8005540:	e0001004 	.word	0xe0001004
 8005544:	200143f4 	.word	0x200143f4

08005548 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	3301      	adds	r3, #1
 800555e:	2b80      	cmp	r3, #128	; 0x80
 8005560:	d80a      	bhi.n	8005578 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6051      	str	r1, [r2, #4]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b80      	cmp	r3, #128	; 0x80
 800557e:	d15a      	bne.n	8005636 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	e00b      	b.n	80055ba <_StoreChar+0x72>
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	1c59      	adds	r1, r3, #1
 80055aa:	6279      	str	r1, [r7, #36]	; 0x24
 80055ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	09db      	lsrs	r3, r3, #7
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2b7f      	cmp	r3, #127	; 0x7f
 80055be:	d8f0      	bhi.n	80055a2 <_StoreChar+0x5a>
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	627a      	str	r2, [r7, #36]	; 0x24
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e00b      	b.n	80055f2 <_StoreChar+0xaa>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	1c59      	adds	r1, r3, #1
 80055e2:	61f9      	str	r1, [r7, #28]
 80055e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	09db      	lsrs	r3, r3, #7
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b7f      	cmp	r3, #127	; 0x7f
 80055f6:	d8f0      	bhi.n	80055da <_StoreChar+0x92>
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	61fa      	str	r2, [r7, #28]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	221a      	movs	r2, #26
 800560e:	6939      	ldr	r1, [r7, #16]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff feb3 	bl	800537c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fdbd 	bl	800519a <_PreparePacket>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	611a      	str	r2, [r3, #16]
  }
}
 8005636:	bf00      	nop
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005652:	2301      	movs	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005656:	2301      	movs	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800565a:	e007      	b.n	800566c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	623b      	str	r3, [r7, #32]
    Width++;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d2f3      	bcs.n	800565c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	429a      	cmp	r2, r3
 800567a:	d901      	bls.n	8005680 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11f      	bne.n	80056ca <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <_PrintUnsigned+0x66>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <_PrintUnsigned+0x66>
        c = '0';
 80056a0:	2330      	movs	r3, #48	; 0x30
 80056a2:	76fb      	strb	r3, [r7, #27]
 80056a4:	e001      	b.n	80056aa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80056a6:	2320      	movs	r3, #32
 80056a8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056aa:	e007      	b.n	80056bc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	3b01      	subs	r3, #1
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80056b2:	7efb      	ldrb	r3, [r7, #27]
 80056b4:	4619      	mov	r1, r3
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff46 	bl	8005548 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <_PrintUnsigned+0x8a>
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3f0      	bcc.n	80056ac <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d903      	bls.n	80056d8 <_PrintUnsigned+0x98>
      NumDigits--;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	e009      	b.n	80056ec <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d200      	bcs.n	80056ec <_PrintUnsigned+0xac>
        break;
 80056ea:	e005      	b.n	80056f8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056f6:	e7e8      	b.n	80056ca <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005710:	4a15      	ldr	r2, [pc, #84]	; (8005768 <_PrintUnsigned+0x128>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	4619      	mov	r1, r3
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff ff14 	bl	8005548 <_StoreChar>
    Digit /= Base;
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005740:	e006      	b.n	8005750 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	3b01      	subs	r3, #1
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005748:	2120      	movs	r1, #32
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7ff fefc 	bl	8005548 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <_PrintUnsigned+0x11e>
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	429a      	cmp	r2, r3
 800575c:	d3f1      	bcc.n	8005742 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800575e:	bf00      	nop
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	08006e9c 	.word	0x08006e9c

0800576c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	bfb8      	it	lt
 8005780:	425b      	neglt	r3, r3
 8005782:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005788:	e007      	b.n	800579a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005792:	613b      	str	r3, [r7, #16]
    Width++;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3301      	adds	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	daf3      	bge.n	800578a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d901      	bls.n	80057ae <_PrintInt+0x42>
    Width = NumDigits;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <_PrintInt+0x5e>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	db04      	blt.n	80057c4 <_PrintInt+0x58>
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <_PrintInt+0x5e>
    FieldWidth--;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <_PrintInt+0x6e>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <_PrintInt+0x9c>
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d111      	bne.n	8005808 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057ea:	e006      	b.n	80057fa <_PrintInt+0x8e>
        FieldWidth--;
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80057f2:	2120      	movs	r1, #32
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fea7 	bl	8005548 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <_PrintInt+0x9c>
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3f1      	bcc.n	80057ec <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da07      	bge.n	800581e <_PrintInt+0xb2>
    v = -v;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	425b      	negs	r3, r3
 8005812:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005814:	212d      	movs	r1, #45	; 0x2d
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fe96 	bl	8005548 <_StoreChar>
 800581c:	e008      	b.n	8005830 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005828:	212b      	movs	r1, #43	; 0x2b
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fe8c 	bl	8005548 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <_PrintInt+0x102>
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d114      	bne.n	800586e <_PrintInt+0x102>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d111      	bne.n	800586e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005850:	e006      	b.n	8005860 <_PrintInt+0xf4>
        FieldWidth--;
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	3b01      	subs	r3, #1
 8005856:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005858:	2130      	movs	r1, #48	; 0x30
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff fe74 	bl	8005548 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <_PrintInt+0x102>
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3f1      	bcc.n	8005852 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fedf 	bl	8005640 <_PrintUnsigned>
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b098      	sub	sp, #96	; 0x60
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005898:	f3ef 8311 	mrs	r3, BASEPRI
 800589c:	f04f 0120 	mov.w	r1, #32
 80058a0:	f381 8811 	msr	BASEPRI, r1
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	48b7      	ldr	r0, [pc, #732]	; (8005b84 <_VPrintTarget+0x2f8>)
 80058a8:	f7ff fc77 	bl	800519a <_PreparePacket>
 80058ac:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80058ae:	4bb5      	ldr	r3, [pc, #724]	; (8005b84 <_VPrintTarget+0x2f8>)
 80058b0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80058b2:	2300      	movs	r3, #0
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3301      	adds	r3, #1
 80058be:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80058d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8183 	beq.w	8005be2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80058dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e0:	2b25      	cmp	r3, #37	; 0x25
 80058e2:	f040 8170 	bne.w	8005bc6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80058e6:	2300      	movs	r3, #0
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80058ea:	2301      	movs	r3, #1
 80058ec:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80058f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fa:	3b23      	subs	r3, #35	; 0x23
 80058fc:	2b0d      	cmp	r3, #13
 80058fe:	d83f      	bhi.n	8005980 <_VPrintTarget+0xf4>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <_VPrintTarget+0x7c>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005971 	.word	0x08005971
 800590c:	08005981 	.word	0x08005981
 8005910:	08005981 	.word	0x08005981
 8005914:	08005981 	.word	0x08005981
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	08005981 	.word	0x08005981
 8005928:	08005961 	.word	0x08005961
 800592c:	08005981 	.word	0x08005981
 8005930:	08005941 	.word	0x08005941
 8005934:	08005981 	.word	0x08005981
 8005938:	08005981 	.word	0x08005981
 800593c:	08005951 	.word	0x08005951
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e01a      	b.n	8005986 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e012      	b.n	8005986 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005962:	f043 0304 	orr.w	r3, r3, #4
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e00a      	b.n	8005986 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	f043 0308 	orr.w	r3, r3, #8
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e002      	b.n	8005986 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005980:	2300      	movs	r3, #0
 8005982:	653b      	str	r3, [r7, #80]	; 0x50
 8005984:	bf00      	nop
        }
      } while (v);
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1b0      	bne.n	80058ee <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800598c:	2300      	movs	r3, #0
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800599c:	2b2f      	cmp	r3, #47	; 0x2f
 800599e:	d912      	bls.n	80059c6 <_VPrintTarget+0x13a>
 80059a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059a4:	2b39      	cmp	r3, #57	; 0x39
 80059a6:	d80e      	bhi.n	80059c6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80059ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	461a      	mov	r2, r3
 80059ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059be:	4413      	add	r3, r2
 80059c0:	3b30      	subs	r3, #48	; 0x30
 80059c2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80059c4:	e7e4      	b.n	8005990 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80059c6:	2300      	movs	r3, #0
 80059c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80059d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059d6:	2b2e      	cmp	r3, #46	; 0x2e
 80059d8:	d11d      	bne.n	8005a16 <_VPrintTarget+0x18a>
        sFormat++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80059e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ec:	2b2f      	cmp	r3, #47	; 0x2f
 80059ee:	d912      	bls.n	8005a16 <_VPrintTarget+0x18a>
 80059f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059f4:	2b39      	cmp	r3, #57	; 0x39
 80059f6:	d80e      	bhi.n	8005a16 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80059fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a0e:	4413      	add	r3, r2
 8005a10:	3b30      	subs	r3, #48	; 0x30
 8005a12:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005a14:	e7e4      	b.n	80059e0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a22:	2b6c      	cmp	r3, #108	; 0x6c
 8005a24:	d003      	beq.n	8005a2e <_VPrintTarget+0x1a2>
 8005a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a2a:	2b68      	cmp	r3, #104	; 0x68
 8005a2c:	d107      	bne.n	8005a3e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005a3c:	e7ef      	b.n	8005a1e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005a3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a42:	2b25      	cmp	r3, #37	; 0x25
 8005a44:	f000 80b3 	beq.w	8005bae <_VPrintTarget+0x322>
 8005a48:	2b25      	cmp	r3, #37	; 0x25
 8005a4a:	f2c0 80b7 	blt.w	8005bbc <_VPrintTarget+0x330>
 8005a4e:	2b78      	cmp	r3, #120	; 0x78
 8005a50:	f300 80b4 	bgt.w	8005bbc <_VPrintTarget+0x330>
 8005a54:	2b58      	cmp	r3, #88	; 0x58
 8005a56:	f2c0 80b1 	blt.w	8005bbc <_VPrintTarget+0x330>
 8005a5a:	3b58      	subs	r3, #88	; 0x58
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f200 80ad 	bhi.w	8005bbc <_VPrintTarget+0x330>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <_VPrintTarget+0x1dc>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005b5f 	.word	0x08005b5f
 8005a6c:	08005bbd 	.word	0x08005bbd
 8005a70:	08005bbd 	.word	0x08005bbd
 8005a74:	08005bbd 	.word	0x08005bbd
 8005a78:	08005bbd 	.word	0x08005bbd
 8005a7c:	08005bbd 	.word	0x08005bbd
 8005a80:	08005bbd 	.word	0x08005bbd
 8005a84:	08005bbd 	.word	0x08005bbd
 8005a88:	08005bbd 	.word	0x08005bbd
 8005a8c:	08005bbd 	.word	0x08005bbd
 8005a90:	08005bbd 	.word	0x08005bbd
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005b13 	.word	0x08005b13
 8005a9c:	08005bbd 	.word	0x08005bbd
 8005aa0:	08005bbd 	.word	0x08005bbd
 8005aa4:	08005bbd 	.word	0x08005bbd
 8005aa8:	08005bbd 	.word	0x08005bbd
 8005aac:	08005bbd 	.word	0x08005bbd
 8005ab0:	08005bbd 	.word	0x08005bbd
 8005ab4:	08005bbd 	.word	0x08005bbd
 8005ab8:	08005bbd 	.word	0x08005bbd
 8005abc:	08005bbd 	.word	0x08005bbd
 8005ac0:	08005bbd 	.word	0x08005bbd
 8005ac4:	08005bbd 	.word	0x08005bbd
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005bbd 	.word	0x08005bbd
 8005ad0:	08005bbd 	.word	0x08005bbd
 8005ad4:	08005bbd 	.word	0x08005bbd
 8005ad8:	08005bbd 	.word	0x08005bbd
 8005adc:	08005b39 	.word	0x08005b39
 8005ae0:	08005bbd 	.word	0x08005bbd
 8005ae4:	08005bbd 	.word	0x08005bbd
 8005ae8:	08005b5f 	.word	0x08005b5f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1d19      	adds	r1, r3, #4
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005b00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fd1c 	bl	8005548 <_StoreChar>
        break;
 8005b10:	e055      	b.n	8005bbe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1d19      	adds	r1, r3, #4
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6011      	str	r1, [r2, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b20:	f107 0014 	add.w	r0, r7, #20
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	220a      	movs	r2, #10
 8005b30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b32:	f7ff fe1b 	bl	800576c <_PrintInt>
        break;
 8005b36:	e042      	b.n	8005bbe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b48:	f107 0014 	add.w	r0, r7, #20
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	220a      	movs	r2, #10
 8005b58:	f7ff fd72 	bl	8005640 <_PrintUnsigned>
        break;
 8005b5c:	e02f      	b.n	8005bbe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1d19      	adds	r1, r3, #4
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6011      	str	r1, [r2, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005b6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b6e:	f107 0014 	add.w	r0, r7, #20
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	f7ff fd5f 	bl	8005640 <_PrintUnsigned>
        break;
 8005b82:	e01c      	b.n	8005bbe <_VPrintTarget+0x332>
 8005b84:	20014284 	.word	0x20014284
      case 'p':
        v = va_arg(*pParamList, int);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1d19      	adds	r1, r3, #4
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b98:	f107 0014 	add.w	r0, r7, #20
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	f7ff fd4a 	bl	8005640 <_PrintUnsigned>
        break;
 8005bac:	e007      	b.n	8005bbe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	2125      	movs	r1, #37	; 0x25
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fcc7 	bl	8005548 <_StoreChar>
        break;
 8005bba:	e000      	b.n	8005bbe <_VPrintTarget+0x332>
      default:
        break;
 8005bbc:	bf00      	nop
      }
      sFormat++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e007      	b.n	8005bd6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005bc6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005bca:	f107 0314 	add.w	r3, r7, #20
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fcb9 	bl	8005548 <_StoreChar>
    }
  } while (*sFormat);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f47f ae72 	bne.w	80058c4 <_VPrintTarget+0x38>
 8005be0:	e000      	b.n	8005be4 <_VPrintTarget+0x358>
      break;
 8005be2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d041      	beq.n	8005c6e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	e00b      	b.n	8005c14 <_VPrintTarget+0x388>
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	6439      	str	r1, [r7, #64]	; 0x40
 8005c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c16:	2b7f      	cmp	r3, #127	; 0x7f
 8005c18:	d8f0      	bhi.n	8005bfc <_VPrintTarget+0x370>
 8005c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	643a      	str	r2, [r7, #64]	; 0x40
 8005c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c28:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
 8005c32:	e00b      	b.n	8005c4c <_VPrintTarget+0x3c0>
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	09db      	lsrs	r3, r3, #7
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c50:	d8f0      	bhi.n	8005c34 <_VPrintTarget+0x3a8>
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	221a      	movs	r2, #26
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fb87 	bl	800537c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005c74:	bf00      	nop
 8005c76:	3758      	adds	r7, #88	; 0x58
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c90:	4917      	ldr	r1, [pc, #92]	; (8005cf0 <SEGGER_SYSVIEW_Init+0x74>)
 8005c92:	4818      	ldr	r0, [pc, #96]	; (8005cf4 <SEGGER_SYSVIEW_Init+0x78>)
 8005c94:	f7ff f940 	bl	8004f18 <SEGGER_RTT_AllocUpBuffer>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c9e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca2:	785a      	ldrb	r2, [r3, #1]
 8005ca4:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ca8:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005caa:	7e1b      	ldrb	r3, [r3, #24]
 8005cac:	4618      	mov	r0, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <SEGGER_SYSVIEW_Init+0x80>)
 8005cb6:	490f      	ldr	r1, [pc, #60]	; (8005cf4 <SEGGER_SYSVIEW_Init+0x78>)
 8005cb8:	f7ff f9b2 	bl	8005020 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <SEGGER_SYSVIEW_Init+0x84>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cc8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005cd0:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005cd6:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005cdc:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	2001324c 	.word	0x2001324c
 8005cf4:	08006e68 	.word	0x08006e68
 8005cf8:	20014254 	.word	0x20014254
 8005cfc:	2001424c 	.word	0x2001424c
 8005d00:	e0001004 	.word	0xe0001004

08005d04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005d0c:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6113      	str	r3, [r2, #16]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20014254 	.word	0x20014254

08005d24 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d30:	f04f 0120 	mov.w	r1, #32
 8005d34:	f381 8811 	msr	BASEPRI, r1
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	4808      	ldr	r0, [pc, #32]	; (8005d5c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005d3c:	f7ff fa2d 	bl	800519a <_PreparePacket>
 8005d40:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	f7ff fb18 	bl	800537c <_SendPacket>
  RECORD_END();
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f383 8811 	msr	BASEPRI, r3
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20014284 	.word	0x20014284

08005d60 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6e:	f04f 0120 	mov.w	r1, #32
 8005d72:	f381 8811 	msr	BASEPRI, r1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	4816      	ldr	r0, [pc, #88]	; (8005dd4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d7a:	f7ff fa0e 	bl	800519a <_PreparePacket>
 8005d7e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e00b      	b.n	8005da6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	61f9      	str	r1, [r7, #28]
 8005d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b7f      	cmp	r3, #127	; 0x7f
 8005daa:	d8f0      	bhi.n	8005d8e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	61fa      	str	r2, [r7, #28]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	6938      	ldr	r0, [r7, #16]
 8005dc2:	f7ff fadb 	bl	800537c <_SendPacket>
  RECORD_END();
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
}
 8005dcc:	bf00      	nop
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20014284 	.word	0x20014284

08005dd8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	; 0x30
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	f04f 0120 	mov.w	r1, #32
 8005dec:	f381 8811 	msr	BASEPRI, r1
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	4825      	ldr	r0, [pc, #148]	; (8005e88 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005df4:	f7ff f9d1 	bl	800519a <_PreparePacket>
 8005df8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e06:	e00b      	b.n	8005e20 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	1c59      	adds	r1, r3, #1
 8005e10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	09db      	lsrs	r3, r3, #7
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b7f      	cmp	r3, #127	; 0x7f
 8005e24:	d8f0      	bhi.n	8005e08 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	623b      	str	r3, [r7, #32]
 8005e3e:	e00b      	b.n	8005e58 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	6279      	str	r1, [r7, #36]	; 0x24
 8005e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	09db      	lsrs	r3, r3, #7
 8005e56:	623b      	str	r3, [r7, #32]
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5c:	d8f0      	bhi.n	8005e40 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	627a      	str	r2, [r7, #36]	; 0x24
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69b8      	ldr	r0, [r7, #24]
 8005e74:	f7ff fa82 	bl	800537c <_SendPacket>
  RECORD_END();
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
 8005e80:	3730      	adds	r7, #48	; 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20014284 	.word	0x20014284

08005e8c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	; 0x38
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e9e:	f04f 0120 	mov.w	r1, #32
 8005ea2:	f381 8811 	msr	BASEPRI, r1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	4832      	ldr	r0, [pc, #200]	; (8005f74 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005eaa:	f7ff f976 	bl	800519a <_PreparePacket>
 8005eae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	6379      	str	r1, [r7, #52]	; 0x34
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef4:	e00b      	b.n	8005f0e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d8f0      	bhi.n	8005ef6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	6279      	str	r1, [r7, #36]	; 0x24
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	627a      	str	r2, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	69b8      	ldr	r0, [r7, #24]
 8005f62:	f7ff fa0b 	bl	800537c <_SendPacket>
  RECORD_END();
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
 8005f6e:	3738      	adds	r7, #56	; 0x38
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20014284 	.word	0x20014284

08005f78 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b090      	sub	sp, #64	; 0x40
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f86:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8a:	f04f 0120 	mov.w	r1, #32
 8005f8e:	f381 8811 	msr	BASEPRI, r1
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	4840      	ldr	r0, [pc, #256]	; (8006098 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f96:	f7ff f900 	bl	800519a <_PreparePacket>
 8005f9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa8:	e00b      	b.n	8005fc2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	1c59      	adds	r1, r3, #1
 8005fb2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	09db      	lsrs	r3, r3, #7
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc6:	d8f0      	bhi.n	8005faa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	6379      	str	r1, [r7, #52]	; 0x34
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	637a      	str	r2, [r7, #52]	; 0x34
 8006006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	e00b      	b.n	8006032 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	b2da      	uxtb	r2, r3
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	2b7f      	cmp	r3, #127	; 0x7f
 8006036:	d8f0      	bhi.n	800601a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800603e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	e00b      	b.n	800606a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	1c59      	adds	r1, r3, #1
 800605a:	6279      	str	r1, [r7, #36]	; 0x24
 800605c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b7f      	cmp	r3, #127	; 0x7f
 800606e:	d8f0      	bhi.n	8006052 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	627a      	str	r2, [r7, #36]	; 0x24
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69b8      	ldr	r0, [r7, #24]
 8006086:	f7ff f979 	bl	800537c <_SendPacket>
  RECORD_END();
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f383 8811 	msr	BASEPRI, r3
}
 8006090:	bf00      	nop
 8006092:	3740      	adds	r7, #64	; 0x40
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20014284 	.word	0x20014284

0800609c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	; 0x30
 80060a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80060a2:	4b58      	ldr	r3, [pc, #352]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80060a8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ac:	f04f 0120 	mov.w	r1, #32
 80060b0:	f381 8811 	msr	BASEPRI, r1
 80060b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80060b6:	4b53      	ldr	r3, [pc, #332]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	220a      	movs	r2, #10
 80060bc:	4952      	ldr	r1, [pc, #328]	; (8006208 <SEGGER_SYSVIEW_Start+0x16c>)
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa f886 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060ca:	200a      	movs	r0, #10
 80060cc:	f7ff fe2a 	bl	8005d24 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	484b      	ldr	r0, [pc, #300]	; (800620c <SEGGER_SYSVIEW_Start+0x170>)
 80060e0:	f7ff f85b 	bl	800519a <_PreparePacket>
 80060e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ee:	4b45      	ldr	r3, [pc, #276]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f4:	e00b      	b.n	800610e <SEGGER_SYSVIEW_Start+0x72>
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	09db      	lsrs	r3, r3, #7
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	2b7f      	cmp	r3, #127	; 0x7f
 8006112:	d8f0      	bhi.n	80060f6 <SEGGER_SYSVIEW_Start+0x5a>
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800611a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	e00b      	b.n	8006148 <SEGGER_SYSVIEW_Start+0xac>
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	6279      	str	r1, [r7, #36]	; 0x24
 800613a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	09db      	lsrs	r3, r3, #7
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	2b7f      	cmp	r3, #127	; 0x7f
 800614c:	d8f0      	bhi.n	8006130 <SEGGER_SYSVIEW_Start+0x94>
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	627a      	str	r2, [r7, #36]	; 0x24
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	4b28      	ldr	r3, [pc, #160]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e00b      	b.n	8006182 <SEGGER_SYSVIEW_Start+0xe6>
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	61f9      	str	r1, [r7, #28]
 8006174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b7f      	cmp	r3, #127	; 0x7f
 8006186:	d8f0      	bhi.n	800616a <SEGGER_SYSVIEW_Start+0xce>
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_Start+0x11e>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6179      	str	r1, [r7, #20]
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_Start+0x106>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	617a      	str	r2, [r7, #20]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061d0:	2218      	movs	r2, #24
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f8d1 	bl	800537c <_SendPacket>
      RECORD_END();
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061e0:	4b08      	ldr	r3, [pc, #32]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <SEGGER_SYSVIEW_Start+0x168>)
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061ee:	f000 f9eb 	bl	80065c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061f2:	f000 f9b1 	bl	8006558 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061f6:	f000 fc83 	bl	8006b00 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061fa:	bf00      	nop
 80061fc:	3730      	adds	r7, #48	; 0x30
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20014254 	.word	0x20014254
 8006208:	08006e90 	.word	0x08006e90
 800620c:	20014284 	.word	0x20014284

08006210 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006216:	f3ef 8311 	mrs	r3, BASEPRI
 800621a:	f04f 0120 	mov.w	r1, #32
 800621e:	f381 8811 	msr	BASEPRI, r1
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	480b      	ldr	r0, [pc, #44]	; (8006254 <SEGGER_SYSVIEW_Stop+0x44>)
 8006226:	f7fe ffb8 	bl	800519a <_PreparePacket>
 800622a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <SEGGER_SYSVIEW_Stop+0x48>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006234:	220b      	movs	r2, #11
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6838      	ldr	r0, [r7, #0]
 800623a:	f7ff f89f 	bl	800537c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <SEGGER_SYSVIEW_Stop+0x48>)
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f383 8811 	msr	BASEPRI, r3
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20014284 	.word	0x20014284
 8006258:	20014254 	.word	0x20014254

0800625c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	f04f 0120 	mov.w	r1, #32
 800626a:	f381 8811 	msr	BASEPRI, r1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	4845      	ldr	r0, [pc, #276]	; (8006388 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006272:	f7fe ff92 	bl	800519a <_PreparePacket>
 8006276:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	4b42      	ldr	r3, [pc, #264]	; (800638c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
 8006286:	e00b      	b.n	80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	b2da      	uxtb	r2, r3
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	09db      	lsrs	r3, r3, #7
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	2b7f      	cmp	r3, #127	; 0x7f
 80062a4:	d8f0      	bhi.n	8006288 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	4b34      	ldr	r3, [pc, #208]	; (800638c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	6279      	str	r1, [r7, #36]	; 0x24
 80062cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b7f      	cmp	r3, #127	; 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	627a      	str	r2, [r7, #36]	; 0x24
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	4b25      	ldr	r3, [pc, #148]	; (800638c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e00b      	b.n	8006314 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	61f9      	str	r1, [r7, #28]
 8006306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	09db      	lsrs	r3, r3, #7
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b7f      	cmp	r3, #127	; 0x7f
 8006318:	d8f0      	bhi.n	80062fc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	61fa      	str	r2, [r7, #28]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e00b      	b.n	800634c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	6179      	str	r1, [r7, #20]
 800633e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b7f      	cmp	r3, #127	; 0x7f
 8006350:	d8f0      	bhi.n	8006334 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	617a      	str	r2, [r7, #20]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006362:	2218      	movs	r2, #24
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	68b8      	ldr	r0, [r7, #8]
 8006368:	f7ff f808 	bl	800537c <_SendPacket>
  RECORD_END();
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800637a:	4b04      	ldr	r3, [pc, #16]	; (800638c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	4798      	blx	r3
  }
}
 8006380:	bf00      	nop
 8006382:	3730      	adds	r7, #48	; 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20014284 	.word	0x20014284
 800638c:	20014254 	.word	0x20014254

08006390 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b092      	sub	sp, #72	; 0x48
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006398:	f3ef 8311 	mrs	r3, BASEPRI
 800639c:	f04f 0120 	mov.w	r1, #32
 80063a0:	f381 8811 	msr	BASEPRI, r1
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	486a      	ldr	r0, [pc, #424]	; (8006550 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80063a8:	f7fe fef7 	bl	800519a <_PreparePacket>
 80063ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	647b      	str	r3, [r7, #68]	; 0x44
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b66      	ldr	r3, [pc, #408]	; (8006554 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	643b      	str	r3, [r7, #64]	; 0x40
 80063c2:	e00b      	b.n	80063dc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80063c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	6479      	str	r1, [r7, #68]	; 0x44
 80063ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d8:	09db      	lsrs	r3, r3, #7
 80063da:	643b      	str	r3, [r7, #64]	; 0x40
 80063dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063de:	2b7f      	cmp	r3, #127	; 0x7f
 80063e0:	d8f0      	bhi.n	80063c4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	647a      	str	r2, [r7, #68]	; 0x44
 80063e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	b2da      	uxtb	r2, r3
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	63bb      	str	r3, [r7, #56]	; 0x38
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	2b7f      	cmp	r3, #127	; 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7fe fe63 	bl	8005100 <_EncodeStr>
 800643a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800643c:	2209      	movs	r2, #9
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6938      	ldr	r0, [r7, #16]
 8006442:	f7fe ff9b 	bl	800537c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b40      	ldr	r3, [pc, #256]	; (8006554 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
 800645a:	e00b      	b.n	8006474 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	b2da      	uxtb	r2, r3
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	1c59      	adds	r1, r3, #1
 8006464:	6379      	str	r1, [r7, #52]	; 0x34
 8006466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	09db      	lsrs	r3, r3, #7
 8006472:	633b      	str	r3, [r7, #48]	; 0x30
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2b7f      	cmp	r3, #127	; 0x7f
 8006478:	d8f0      	bhi.n	800645c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	637a      	str	r2, [r7, #52]	; 0x34
 8006480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
 8006494:	e00b      	b.n	80064ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	09db      	lsrs	r3, r3, #7
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	2b7f      	cmp	r3, #127	; 0x7f
 80064b2:	d8f0      	bhi.n	8006496 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	e00b      	b.n	80064e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6279      	str	r1, [r7, #36]	; 0x24
 80064da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	09db      	lsrs	r3, r3, #7
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b7f      	cmp	r3, #127	; 0x7f
 80064ec:	d8f0      	bhi.n	80064d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	627a      	str	r2, [r7, #36]	; 0x24
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e00b      	b.n	8006520 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	61f9      	str	r1, [r7, #28]
 8006512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	09db      	lsrs	r3, r3, #7
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b7f      	cmp	r3, #127	; 0x7f
 8006524:	d8f0      	bhi.n	8006508 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	61fa      	str	r2, [r7, #28]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006536:	2215      	movs	r2, #21
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f7fe ff1e 	bl	800537c <_SendPacket>
  RECORD_END();
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f383 8811 	msr	BASEPRI, r3
}
 8006546:	bf00      	nop
 8006548:	3748      	adds	r7, #72	; 0x48
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20014284 	.word	0x20014284
 8006554:	20014254 	.word	0x20014254

08006558 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800655c:	4b07      	ldr	r3, [pc, #28]	; (800657c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800656e:	4b03      	ldr	r3, [pc, #12]	; (800657c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4798      	blx	r3
  }
}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20014254 	.word	0x20014254

08006580 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006588:	f3ef 8311 	mrs	r3, BASEPRI
 800658c:	f04f 0120 	mov.w	r1, #32
 8006590:	f381 8811 	msr	BASEPRI, r1
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	480b      	ldr	r0, [pc, #44]	; (80065c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006598:	f7fe fdff 	bl	800519a <_PreparePacket>
 800659c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800659e:	2280      	movs	r2, #128	; 0x80
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	6938      	ldr	r0, [r7, #16]
 80065a4:	f7fe fdac 	bl	8005100 <_EncodeStr>
 80065a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80065aa:	220e      	movs	r2, #14
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f7fe fee4 	bl	800537c <_SendPacket>
  RECORD_END();
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20014284 	.word	0x20014284

080065c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01a      	beq.n	800660c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d015      	beq.n	800660c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4798      	blx	r3
 80065e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	000a      	movs	r2, r1
 80065fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065fe:	4613      	mov	r3, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4621      	mov	r1, r4
 8006604:	200d      	movs	r0, #13
 8006606:	f7ff fbe7 	bl	8005dd8 <SEGGER_SYSVIEW_RecordU32x2>
 800660a:	e006      	b.n	800661a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	200c      	movs	r0, #12
 8006614:	f7ff fba4 	bl	8005d60 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	bf00      	nop
 8006624:	20014254 	.word	0x20014254
 8006628:	e0001004 	.word	0xe0001004

0800662c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006632:	f3ef 8311 	mrs	r3, BASEPRI
 8006636:	f04f 0120 	mov.w	r1, #32
 800663a:	f381 8811 	msr	BASEPRI, r1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	4819      	ldr	r0, [pc, #100]	; (80066a8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006642:	f7fe fdaa 	bl	800519a <_PreparePacket>
 8006646:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006654:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	6179      	str	r1, [r7, #20]
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	617a      	str	r2, [r7, #20]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800668e:	2202      	movs	r2, #2
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68b8      	ldr	r0, [r7, #8]
 8006694:	f7fe fe72 	bl	800537c <_SendPacket>
  RECORD_END();
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f383 8811 	msr	BASEPRI, r3
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20014284 	.word	0x20014284
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066b6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ba:	f04f 0120 	mov.w	r1, #32
 80066be:	f381 8811 	msr	BASEPRI, r1
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	4807      	ldr	r0, [pc, #28]	; (80066e4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80066c6:	f7fe fd68 	bl	800519a <_PreparePacket>
 80066ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066cc:	2203      	movs	r2, #3
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6838      	ldr	r0, [r7, #0]
 80066d2:	f7fe fe53 	bl	800537c <_SendPacket>
  RECORD_END();
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f383 8811 	msr	BASEPRI, r3
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20014284 	.word	0x20014284

080066e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066ee:	f3ef 8311 	mrs	r3, BASEPRI
 80066f2:	f04f 0120 	mov.w	r1, #32
 80066f6:	f381 8811 	msr	BASEPRI, r1
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	4807      	ldr	r0, [pc, #28]	; (800671c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066fe:	f7fe fd4c 	bl	800519a <_PreparePacket>
 8006702:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006704:	2212      	movs	r2, #18
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	f7fe fe37 	bl	800537c <_SendPacket>
  RECORD_END();
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f383 8811 	msr	BASEPRI, r3
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20014284 	.word	0x20014284

08006720 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006726:	f3ef 8311 	mrs	r3, BASEPRI
 800672a:	f04f 0120 	mov.w	r1, #32
 800672e:	f381 8811 	msr	BASEPRI, r1
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	4807      	ldr	r0, [pc, #28]	; (8006754 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006736:	f7fe fd30 	bl	800519a <_PreparePacket>
 800673a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800673c:	2211      	movs	r2, #17
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6838      	ldr	r0, [r7, #0]
 8006742:	f7fe fe1b 	bl	800537c <_SendPacket>
  RECORD_END();
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f383 8811 	msr	BASEPRI, r3
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20014284 	.word	0x20014284

08006758 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006760:	f3ef 8311 	mrs	r3, BASEPRI
 8006764:	f04f 0120 	mov.w	r1, #32
 8006768:	f381 8811 	msr	BASEPRI, r1
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	4819      	ldr	r0, [pc, #100]	; (80067d4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006770:	f7fe fd13 	bl	800519a <_PreparePacket>
 8006774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800677a:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e00b      	b.n	80067a6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	61f9      	str	r1, [r7, #28]
 8006798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b7f      	cmp	r3, #127	; 0x7f
 80067aa:	d8f0      	bhi.n	800678e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	61fa      	str	r2, [r7, #28]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80067bc:	2208      	movs	r2, #8
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	6938      	ldr	r0, [r7, #16]
 80067c2:	f7fe fddb 	bl	800537c <_SendPacket>
  RECORD_END();
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f383 8811 	msr	BASEPRI, r3
}
 80067cc:	bf00      	nop
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20014284 	.word	0x20014284
 80067d8:	20014254 	.word	0x20014254

080067dc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067e4:	f3ef 8311 	mrs	r3, BASEPRI
 80067e8:	f04f 0120 	mov.w	r1, #32
 80067ec:	f381 8811 	msr	BASEPRI, r1
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	4819      	ldr	r0, [pc, #100]	; (8006858 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80067f4:	f7fe fcd1 	bl	800519a <_PreparePacket>
 80067f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067fe:	4b17      	ldr	r3, [pc, #92]	; (800685c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	e00b      	b.n	800682a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	61f9      	str	r1, [r7, #28]
 800681c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b7f      	cmp	r3, #127	; 0x7f
 800682e:	d8f0      	bhi.n	8006812 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	61fa      	str	r2, [r7, #28]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006840:	2204      	movs	r2, #4
 8006842:	68f9      	ldr	r1, [r7, #12]
 8006844:	6938      	ldr	r0, [r7, #16]
 8006846:	f7fe fd99 	bl	800537c <_SendPacket>
  RECORD_END();
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f383 8811 	msr	BASEPRI, r3
}
 8006850:	bf00      	nop
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20014284 	.word	0x20014284
 800685c:	20014254 	.word	0x20014254

08006860 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006868:	f3ef 8311 	mrs	r3, BASEPRI
 800686c:	f04f 0120 	mov.w	r1, #32
 8006870:	f381 8811 	msr	BASEPRI, r1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	4819      	ldr	r0, [pc, #100]	; (80068dc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006878:	f7fe fc8f 	bl	800519a <_PreparePacket>
 800687c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006882:	4b17      	ldr	r3, [pc, #92]	; (80068e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e00b      	b.n	80068ae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	61f9      	str	r1, [r7, #28]
 80068a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b7f      	cmp	r3, #127	; 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	61fa      	str	r2, [r7, #28]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80068c4:	2206      	movs	r2, #6
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	6938      	ldr	r0, [r7, #16]
 80068ca:	f7fe fd57 	bl	800537c <_SendPacket>
  RECORD_END();
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20014284 	.word	0x20014284
 80068e0:	20014254 	.word	0x20014254

080068e4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	; 0x28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	f04f 0120 	mov.w	r1, #32
 80068f6:	f381 8811 	msr	BASEPRI, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	4827      	ldr	r0, [pc, #156]	; (800699c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80068fe:	f7fe fc4c 	bl	800519a <_PreparePacket>
 8006902:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	e00b      	b.n	8006934 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1c59      	adds	r1, r3, #1
 8006924:	6279      	str	r1, [r7, #36]	; 0x24
 8006926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	09db      	lsrs	r3, r3, #7
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	2b7f      	cmp	r3, #127	; 0x7f
 8006938:	d8f0      	bhi.n	800691c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	627a      	str	r2, [r7, #36]	; 0x24
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e00b      	b.n	800696c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	61f9      	str	r1, [r7, #28]
 800695e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	09db      	lsrs	r3, r3, #7
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b7f      	cmp	r3, #127	; 0x7f
 8006970:	d8f0      	bhi.n	8006954 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	61fa      	str	r2, [r7, #28]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006982:	2207      	movs	r2, #7
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	6938      	ldr	r0, [r7, #16]
 8006988:	f7fe fcf8 	bl	800537c <_SendPacket>
  RECORD_END();
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f383 8811 	msr	BASEPRI, r3
}
 8006992:	bf00      	nop
 8006994:	3728      	adds	r7, #40	; 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20014284 	.word	0x20014284
 80069a0:	20014254 	.word	0x20014254

080069a4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	1ad3      	subs	r3, r2, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20014254 	.word	0x20014254

080069c4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08c      	sub	sp, #48	; 0x30
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069ce:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d06d      	beq.n	8006ab2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069dc:	2300      	movs	r3, #0
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e0:	e008      	b.n	80069f4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	3301      	adds	r3, #1
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3f2      	bcc.n	80069e2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80069fc:	e000      	b.n	8006a00 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069fe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d055      	beq.n	8006ab2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a06:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0a:	f04f 0120 	mov.w	r1, #32
 8006a0e:	f381 8811 	msr	BASEPRI, r1
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	482a      	ldr	r0, [pc, #168]	; (8006ac0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a16:	f7fe fbc0 	bl	800519a <_PreparePacket>
 8006a1a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	e00b      	b.n	8006a42 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	6279      	str	r1, [r7, #36]	; 0x24
 8006a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b7f      	cmp	r3, #127	; 0x7f
 8006a46:	d8f0      	bhi.n	8006a2a <SEGGER_SYSVIEW_SendModule+0x66>
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e00b      	b.n	8006a7c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	61f9      	str	r1, [r7, #28]
 8006a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	09db      	lsrs	r3, r3, #7
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a80:	d8f0      	bhi.n	8006a64 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	61fa      	str	r2, [r7, #28]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7fe fb30 	bl	8005100 <_EncodeStr>
 8006aa0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006aa2:	2216      	movs	r2, #22
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	f7fe fc68 	bl	800537c <_SendPacket>
      RECORD_END();
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	3730      	adds	r7, #48	; 0x30
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	2001427c 	.word	0x2001427c
 8006ac0:	20014284 	.word	0x20014284

08006ac4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00f      	beq.n	8006af2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f2      	bne.n	8006ad8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	2001427c 	.word	0x2001427c

08006b00 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b06:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0a:	f04f 0120 	mov.w	r1, #32
 8006b0e:	f381 8811 	msr	BASEPRI, r1
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	4817      	ldr	r0, [pc, #92]	; (8006b74 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b16:	f7fe fb40 	bl	800519a <_PreparePacket>
 8006b1a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e00b      	b.n	8006b44 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	6179      	str	r1, [r7, #20]
 8006b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	09db      	lsrs	r3, r3, #7
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	d8f0      	bhi.n	8006b2c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	617a      	str	r2, [r7, #20]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b5a:	221b      	movs	r2, #27
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	68b8      	ldr	r0, [r7, #8]
 8006b60:	f7fe fc0c 	bl	800537c <_SendPacket>
  RECORD_END();
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f383 8811 	msr	BASEPRI, r3
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20014284 	.word	0x20014284
 8006b78:	20014280 	.word	0x20014280

08006b7c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006b7c:	b40f      	push	{r0, r1, r2, r3}
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006b84:	f107 0314 	add.w	r3, r7, #20
 8006b88:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6938      	ldr	r0, [r7, #16]
 8006b92:	f7fe fe7b 	bl	800588c <_VPrintTarget>
  va_end(ParamList);
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba0:	b004      	add	sp, #16
 8006ba2:	4770      	bx	lr

08006ba4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bac:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb0:	f04f 0120 	mov.w	r1, #32
 8006bb4:	f381 8811 	msr	BASEPRI, r1
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	4827      	ldr	r0, [pc, #156]	; (8006c58 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006bbc:	f7fe faed 	bl	800519a <_PreparePacket>
 8006bc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bc2:	2280      	movs	r2, #128	; 0x80
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f7fe fa9a 	bl	8005100 <_EncodeStr>
 8006bcc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	e00b      	b.n	8006bf0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	1c59      	adds	r1, r3, #1
 8006be0:	6279      	str	r1, [r7, #36]	; 0x24
 8006be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	09db      	lsrs	r3, r3, #7
 8006bee:	623b      	str	r3, [r7, #32]
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf4:	d8f0      	bhi.n	8006bd8 <SEGGER_SYSVIEW_Warn+0x34>
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e00b      	b.n	8006c28 <SEGGER_SYSVIEW_Warn+0x84>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	61f9      	str	r1, [r7, #28]
 8006c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	09db      	lsrs	r3, r3, #7
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2c:	d8f0      	bhi.n	8006c10 <SEGGER_SYSVIEW_Warn+0x6c>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	61fa      	str	r2, [r7, #28]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c3e:	221a      	movs	r2, #26
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7fe fb9a 	bl	800537c <_SendPacket>
  RECORD_END();
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f383 8811 	msr	BASEPRI, r3
}
 8006c4e:	bf00      	nop
 8006c50:	3728      	adds	r7, #40	; 0x28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20014284 	.word	0x20014284

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 f83c 	bl	8006cec <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	08006eb4 	.word	0x08006eb4
 8006c98:	08006eb4 	.word	0x08006eb4
 8006c9c:	08006eb4 	.word	0x08006eb4
 8006ca0:	08006eb8 	.word	0x08006eb8

08006ca4 <memcmp>:
 8006ca4:	b530      	push	{r4, r5, lr}
 8006ca6:	3901      	subs	r1, #1
 8006ca8:	2400      	movs	r4, #0
 8006caa:	42a2      	cmp	r2, r4
 8006cac:	d101      	bne.n	8006cb2 <memcmp+0xe>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e005      	b.n	8006cbe <memcmp+0x1a>
 8006cb2:	5d03      	ldrb	r3, [r0, r4]
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	5d0d      	ldrb	r5, [r1, r4]
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	d0f6      	beq.n	8006caa <memcmp+0x6>
 8006cbc:	1b58      	subs	r0, r3, r5
 8006cbe:	bd30      	pop	{r4, r5, pc}

08006cc0 <memcpy>:
 8006cc0:	440a      	add	r2, r1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cc8:	d100      	bne.n	8006ccc <memcpy+0xc>
 8006cca:	4770      	bx	lr
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	d1f9      	bne.n	8006cce <memcpy+0xe>
 8006cda:	bd10      	pop	{r4, pc}

08006cdc <memset>:
 8006cdc:	4402      	add	r2, r0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d100      	bne.n	8006ce6 <memset+0xa>
 8006ce4:	4770      	bx	lr
 8006ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cea:	e7f9      	b.n	8006ce0 <memset+0x4>

08006cec <_init>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr

08006cf8 <_fini>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	bf00      	nop
 8006cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfe:	bc08      	pop	{r3}
 8006d00:	469e      	mov	lr, r3
 8006d02:	4770      	bx	lr
