#include "main.h"

static void process_command(command_t *cmd);
int extract_command(command_t *cmd);


const char *msg_invalid = "Invalid input, try again.";

void menu_task(void *parameters) {
	uint32_t cmd_addr;
	uint8_t option;
	command_t *cmd;
	const char *msg_menu = "          Menu          \n"
			"========================\n"
			"Led effect 	--> 0 \n"
			"Date and Time	--> 1 \n"
			"Exit			--> 2 \n"
			"Enter option : 	";
	while (1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
		cmd = (command_t*) cmd_addr;

		if (cmd->len == 1) {
			option = cmd->payload[0] - 48;
			switch (option) {
			case 0:
				cur_state = sLedEffect;
				xTaskNotify(led_task_handle, 0, eNoAction);
				break;
			case 1:
				cur_state = sRtcMenu;
				xTaskNotify(rtc_task_handle, 0, eNoAction);
				break;
			case 2:
				break;
			default:
				xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
				continue;
			}
		} else {
			//invalid entry
			xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
		}
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
	}
}
void cmd_task(void *parameters) {
	BaseType_t ret;
	command_t cmd;
	while (1) {
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		if (ret == pdTRUE) {
			process_command(&cmd);
		}
	}
}
void print_task(void *parameters) {
	while (1) {

	}
}
void led_task(void *parameters) {
	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_led = 	"========================\n"
							"|      LED Effect     |\n"
							"========================\n"
							"(none,e1,e2,e3,e4)\n"
							"Enter your choice here : ";

	while (1) {
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

		/*TODO: Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);

		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
		cmd = (command_t*) cmd;

		if (cmd->len <= 4) {
			if (!strcmp((char*) cmd->payload, "none"))
				led_effect_stop();
			else if (!strcmp((char*) cmd->payload, "e1"))
				led_effect(1);
			else if (!strcmp((char*) cmd->payload, "e2"))
				led_effect(2);
			else if (!strcmp((char*) cmd->payload, "e3"))
				led_effect(3);
			else if (!strcmp((char*) cmd->payload, "e4"))
				led_effect(4);
			else
				/*TODO: print invalid message */
				xQueueSend(q_print, &msg_invalid, portMAX_DELAY);

		} else
			/*TODO: print invalid message */
			xQueueSend(q_print, &msg_invalid, portMAX_DELAY);

		/*TODO : update state variable */
		cur_state = sMainMenu;

		/*TODO : Notify menu task */
		xTaskNotify(menu_task_handle, 0, eNoAction);

	}
}
void rtc_task(void *param)
{
	const char* msg_rtc1 = "========================\n"
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 4\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
	const char *msg_rtc_mm = "Enter minutes(0-59):";
	const char *msg_rtc_ss = "Enter seconds(0-59):";

	const char *msg_rtc_dd  = "Enter date(1-31):";
	const char *msg_rtc_mo  ="Enter month(1-12):";
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
	const char *msg_rtc_yr  = "Enter year(0-99):";

	const char *msg_conf = "Configuration successful\n";
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";


	uint32_t cmd_addr;
	command_t *cmd;


	while(1){
		/*TODO: Notify wait (wait till someone notifies)

		/*TODO : Print the menu and show current date and time information */


		while(cur_state != sMainMenu){

			/*TODO: Wait for command notification (Notify wait) */

			switch(cur_state)
			{
				case sRtcMenu:{

					/*TODO: process RTC menu commands */
					break;}

				case sRtcTimeConfig:{
					/*TODO : get hh, mm, ss infor and configure RTC */

					/*TODO: take care of invalid entries */
					break;}

				case sRtcDateConfig:{

					/*TODO : get date, month, day , year info and configure RTC */

					/*TODO: take care of invalid entries */

					break;}

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}

			}// switch end

		} //while end

		   /*TODO : Notify menu task */


		}//while super loop end
}

static void process_command(command_t *cmd) {
	extract_command(cmd);
	switch (cur_state) {
	case sMainMenu:
		xTaskNotify(menu_task_handle, (uint32_t )cmd, eNoAction);
		break;
	case sLedEffect:
		xTaskNotify(led_task_handle, (uint32_t )cmd, eNoAction);
		break;
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle, (uint32_t )cmd, eNoAction);
		break;
	default:
		break;
	}
}

int extract_command(command_t *cmd) {
	uint8_t item;
	BaseType_t status;
	status = uxQueueMessagesWaiting(q_data);
	if (!status)
		return -1;
	uint8_t i = 0;
	do {
		status = xQueueReceive(q_data, &item, 0);
		if (status == pdTRUE)
			cmd->payload[i++] = item;
	} while (item != '\n');

	cmd->payload[i - 1] = '\0';
	cmd->len = i - 1;

	return 0;
}



//
//void led_green_handler(void* parameters)
//{
//	TickType_t last_wakwup_time=xTaskGetTickCount();
//	while(1)
//	{
//		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
//		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(1000) );
////		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");

