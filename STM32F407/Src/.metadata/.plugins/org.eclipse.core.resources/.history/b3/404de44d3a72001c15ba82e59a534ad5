#include "main.h"

static void process_command(command_t *cmd);
int extract_command(command_t *cmd);


void menu_task(void *parameters) {
	while (1) {

	}
}
void cmd_task(void *parameters) {
	BaseType_t ret;
	command_t cmd;
	while (1) {
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		if (ret == pdTRUE) {
			process_command(&cmd);
		}
	}
}
void print_task(void *parameters) {
	while (1) {

	}
}
void led_task(void *parameters) {
	while (1) {

	}
}
void rtc_task(void *parameters) {
	while (1) {

	}
}

static void process_command(command_t *cmd) {
	extract_command(cmd);
	switch(cur_state)
	{
	case sMainMenu:
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eNoAction);
		break;
	case sLedEffect:
		xTaskNotify(led_task_handle,(uint32_t)cmd,eNoAction);
		break;
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(led_task_handle,(uint32_t)cmd,eNoAction);
		break;
	default:
		break;
	}
}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;
	status = uxQueueMessagesWaiting(q_data);
	if(! status) return -1;
	uint8_t i=0;
	do
	{
		status =xQueueReceive(q_data, &item, 0);
		if(status==pdTRUE) cmd->payload[i++] = item;
	}while(item != '\n');

	cmd->payload[i-1] = '\0';
	cmd->len = i-1;

	return 0;
}

//
//void led_green_handler(void* parameters)
//{
//	TickType_t last_wakwup_time=xTaskGetTickCount();
//	while(1)
//	{
//		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
//		vTaskDelayUntil(&last_wakwup_time,pdMS_TO_TICKS(1000) );
////		SEGGER_SYSVIEW_PrintfTarget("Green Led toggled");

