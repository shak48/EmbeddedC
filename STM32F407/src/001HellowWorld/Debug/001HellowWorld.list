
001HellowWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c40  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000236f  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000607  00000000  00000000  000223fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00022a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00022b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c2a  00000000  00000000  00022c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001341  00000000  00000000  0002582a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000970a  00000000  00000000  00026b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00030275  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  000302c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000dd0 	.word	0x08000dd0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000dd0 	.word	0x08000dd0

080001e8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    printf("Hellow World \n");
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <main+0x14>)
 80001ee:	f000 f999 	bl	8000524 <puts>
    printf ("######### BD COR IS AWESOME! ##############\n");
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x18>)
 80001f4:	f000 f996 	bl	8000524 <puts>
    for(;;);
 80001f8:	e7fe      	b.n	80001f8 <main+0x10>
 80001fa:	bf00      	nop
 80001fc:	08000de8 	.word	0x08000de8
 8000200:	08000df8 	.word	0x08000df8

08000204 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <ITM_SendChar+0x44>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <ITM_SendChar+0x44>)
 8000214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000218:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <ITM_SendChar+0x48>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a0b      	ldr	r2, [pc, #44]	; (800024c <ITM_SendChar+0x48>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000226:	bf00      	nop
 8000228:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f8      	beq.n	8000228 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000236:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	6013      	str	r3, [r2, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	e000edfc 	.word	0xe000edfc
 800024c:	e0000e00 	.word	0xe0000e00

08000250 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
 8000260:	e00a      	b.n	8000278 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000262:	f3af 8000 	nop.w
 8000266:	4601      	mov	r1, r0
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	60ba      	str	r2, [r7, #8]
 800026e:	b2ca      	uxtb	r2, r1
 8000270:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	3301      	adds	r3, #1
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	dbf0      	blt.n	8000262 <_read+0x12>
	}

return len;
 8000280:	687b      	ldr	r3, [r7, #4]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b086      	sub	sp, #24
 800028e:	af00      	add	r7, sp, #0
 8000290:	60f8      	str	r0, [r7, #12]
 8000292:	60b9      	str	r1, [r7, #8]
 8000294:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffad 	bl	8000204 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x12>

	}
	return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_close>:

int _close(int file)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
	return -1;
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002e8:	605a      	str	r2, [r3, #4]
	return 0;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <_isatty>:

int _isatty(int file)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
	return 1;
 80002fe:	2301      	movs	r3, #1
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800030a:	b480      	push	{r7}
 800030c:	b085      	sub	sp, #20
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
	return 0;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
	...

08000324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800032c:	4a14      	ldr	r2, [pc, #80]	; (8000380 <_sbrk+0x5c>)
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <_sbrk+0x60>)
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <_sbrk+0x64>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d102      	bne.n	8000346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <_sbrk+0x64>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <_sbrk+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <_sbrk+0x64>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	429a      	cmp	r2, r3
 8000352:	d207      	bcs.n	8000364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000354:	f000 f846 	bl	80003e4 <__errno>
 8000358:	4603      	mov	r3, r0
 800035a:	220c      	movs	r2, #12
 800035c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	e009      	b.n	8000378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <_sbrk+0x64>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	4a05      	ldr	r2, [pc, #20]	; (8000388 <_sbrk+0x64>)
 8000374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000376:	68fb      	ldr	r3, [r7, #12]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20020000 	.word	0x20020000
 8000384:	00000400 	.word	0x00000400
 8000388:	20000080 	.word	0x20000080
 800038c:	200000a0 	.word	0x200000a0

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	; (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	; (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f817 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff11 	bl	80001e8 <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80003d4:	08000e90 	.word	0x08000e90
  ldr r2, =_sbss
 80003d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80003dc:	2000009c 	.word	0x2000009c

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__errno>:
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <__errno+0x8>)
 80003e6:	6818      	ldr	r0, [r3, #0]
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	; (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	; (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	; (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	; (8000434 <__libc_init_array+0x44>)
 8000404:	f000 fce4 	bl	8000dd0 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000e88 	.word	0x08000e88
 800042c:	08000e88 	.word	0x08000e88
 8000430:	08000e88 	.word	0x08000e88
 8000434:	08000e8c 	.word	0x08000e8c

08000438 <memset>:
 8000438:	4402      	add	r2, r0
 800043a:	4603      	mov	r3, r0
 800043c:	4293      	cmp	r3, r2
 800043e:	d100      	bne.n	8000442 <memset+0xa>
 8000440:	4770      	bx	lr
 8000442:	f803 1b01 	strb.w	r1, [r3], #1
 8000446:	e7f9      	b.n	800043c <memset+0x4>

08000448 <_puts_r>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	460e      	mov	r6, r1
 800044c:	4605      	mov	r5, r0
 800044e:	b118      	cbz	r0, 8000458 <_puts_r+0x10>
 8000450:	6983      	ldr	r3, [r0, #24]
 8000452:	b90b      	cbnz	r3, 8000458 <_puts_r+0x10>
 8000454:	f000 fa48 	bl	80008e8 <__sinit>
 8000458:	69ab      	ldr	r3, [r5, #24]
 800045a:	68ac      	ldr	r4, [r5, #8]
 800045c:	b913      	cbnz	r3, 8000464 <_puts_r+0x1c>
 800045e:	4628      	mov	r0, r5
 8000460:	f000 fa42 	bl	80008e8 <__sinit>
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <_puts_r+0xd0>)
 8000466:	429c      	cmp	r4, r3
 8000468:	d120      	bne.n	80004ac <_puts_r+0x64>
 800046a:	686c      	ldr	r4, [r5, #4]
 800046c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800046e:	07db      	lsls	r3, r3, #31
 8000470:	d405      	bmi.n	800047e <_puts_r+0x36>
 8000472:	89a3      	ldrh	r3, [r4, #12]
 8000474:	0598      	lsls	r0, r3, #22
 8000476:	d402      	bmi.n	800047e <_puts_r+0x36>
 8000478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800047a:	f000 fad3 	bl	8000a24 <__retarget_lock_acquire_recursive>
 800047e:	89a3      	ldrh	r3, [r4, #12]
 8000480:	0719      	lsls	r1, r3, #28
 8000482:	d51d      	bpl.n	80004c0 <_puts_r+0x78>
 8000484:	6923      	ldr	r3, [r4, #16]
 8000486:	b1db      	cbz	r3, 80004c0 <_puts_r+0x78>
 8000488:	3e01      	subs	r6, #1
 800048a:	68a3      	ldr	r3, [r4, #8]
 800048c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000490:	3b01      	subs	r3, #1
 8000492:	60a3      	str	r3, [r4, #8]
 8000494:	bb39      	cbnz	r1, 80004e6 <_puts_r+0x9e>
 8000496:	2b00      	cmp	r3, #0
 8000498:	da38      	bge.n	800050c <_puts_r+0xc4>
 800049a:	4622      	mov	r2, r4
 800049c:	210a      	movs	r1, #10
 800049e:	4628      	mov	r0, r5
 80004a0:	f000 f848 	bl	8000534 <__swbuf_r>
 80004a4:	3001      	adds	r0, #1
 80004a6:	d011      	beq.n	80004cc <_puts_r+0x84>
 80004a8:	250a      	movs	r5, #10
 80004aa:	e011      	b.n	80004d0 <_puts_r+0x88>
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <_puts_r+0xd4>)
 80004ae:	429c      	cmp	r4, r3
 80004b0:	d101      	bne.n	80004b6 <_puts_r+0x6e>
 80004b2:	68ac      	ldr	r4, [r5, #8]
 80004b4:	e7da      	b.n	800046c <_puts_r+0x24>
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <_puts_r+0xd8>)
 80004b8:	429c      	cmp	r4, r3
 80004ba:	bf08      	it	eq
 80004bc:	68ec      	ldreq	r4, [r5, #12]
 80004be:	e7d5      	b.n	800046c <_puts_r+0x24>
 80004c0:	4621      	mov	r1, r4
 80004c2:	4628      	mov	r0, r5
 80004c4:	f000 f888 	bl	80005d8 <__swsetup_r>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d0dd      	beq.n	8000488 <_puts_r+0x40>
 80004cc:	f04f 35ff 	mov.w	r5, #4294967295
 80004d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80004d2:	07da      	lsls	r2, r3, #31
 80004d4:	d405      	bmi.n	80004e2 <_puts_r+0x9a>
 80004d6:	89a3      	ldrh	r3, [r4, #12]
 80004d8:	059b      	lsls	r3, r3, #22
 80004da:	d402      	bmi.n	80004e2 <_puts_r+0x9a>
 80004dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80004de:	f000 faa2 	bl	8000a26 <__retarget_lock_release_recursive>
 80004e2:	4628      	mov	r0, r5
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	da04      	bge.n	80004f4 <_puts_r+0xac>
 80004ea:	69a2      	ldr	r2, [r4, #24]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dc06      	bgt.n	80004fe <_puts_r+0xb6>
 80004f0:	290a      	cmp	r1, #10
 80004f2:	d004      	beq.n	80004fe <_puts_r+0xb6>
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	6022      	str	r2, [r4, #0]
 80004fa:	7019      	strb	r1, [r3, #0]
 80004fc:	e7c5      	b.n	800048a <_puts_r+0x42>
 80004fe:	4622      	mov	r2, r4
 8000500:	4628      	mov	r0, r5
 8000502:	f000 f817 	bl	8000534 <__swbuf_r>
 8000506:	3001      	adds	r0, #1
 8000508:	d1bf      	bne.n	800048a <_puts_r+0x42>
 800050a:	e7df      	b.n	80004cc <_puts_r+0x84>
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	250a      	movs	r5, #10
 8000510:	1c5a      	adds	r2, r3, #1
 8000512:	6022      	str	r2, [r4, #0]
 8000514:	701d      	strb	r5, [r3, #0]
 8000516:	e7db      	b.n	80004d0 <_puts_r+0x88>
 8000518:	08000e48 	.word	0x08000e48
 800051c:	08000e68 	.word	0x08000e68
 8000520:	08000e28 	.word	0x08000e28

08000524 <puts>:
 8000524:	4b02      	ldr	r3, [pc, #8]	; (8000530 <puts+0xc>)
 8000526:	4601      	mov	r1, r0
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	f7ff bf8d 	b.w	8000448 <_puts_r>
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000

08000534 <__swbuf_r>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	460e      	mov	r6, r1
 8000538:	4614      	mov	r4, r2
 800053a:	4605      	mov	r5, r0
 800053c:	b118      	cbz	r0, 8000546 <__swbuf_r+0x12>
 800053e:	6983      	ldr	r3, [r0, #24]
 8000540:	b90b      	cbnz	r3, 8000546 <__swbuf_r+0x12>
 8000542:	f000 f9d1 	bl	80008e8 <__sinit>
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <__swbuf_r+0x98>)
 8000548:	429c      	cmp	r4, r3
 800054a:	d12b      	bne.n	80005a4 <__swbuf_r+0x70>
 800054c:	686c      	ldr	r4, [r5, #4]
 800054e:	69a3      	ldr	r3, [r4, #24]
 8000550:	60a3      	str	r3, [r4, #8]
 8000552:	89a3      	ldrh	r3, [r4, #12]
 8000554:	071a      	lsls	r2, r3, #28
 8000556:	d52f      	bpl.n	80005b8 <__swbuf_r+0x84>
 8000558:	6923      	ldr	r3, [r4, #16]
 800055a:	b36b      	cbz	r3, 80005b8 <__swbuf_r+0x84>
 800055c:	6923      	ldr	r3, [r4, #16]
 800055e:	6820      	ldr	r0, [r4, #0]
 8000560:	1ac0      	subs	r0, r0, r3
 8000562:	6963      	ldr	r3, [r4, #20]
 8000564:	b2f6      	uxtb	r6, r6
 8000566:	4283      	cmp	r3, r0
 8000568:	4637      	mov	r7, r6
 800056a:	dc04      	bgt.n	8000576 <__swbuf_r+0x42>
 800056c:	4621      	mov	r1, r4
 800056e:	4628      	mov	r0, r5
 8000570:	f000 f926 	bl	80007c0 <_fflush_r>
 8000574:	bb30      	cbnz	r0, 80005c4 <__swbuf_r+0x90>
 8000576:	68a3      	ldr	r3, [r4, #8]
 8000578:	3b01      	subs	r3, #1
 800057a:	60a3      	str	r3, [r4, #8]
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	6022      	str	r2, [r4, #0]
 8000582:	701e      	strb	r6, [r3, #0]
 8000584:	6963      	ldr	r3, [r4, #20]
 8000586:	3001      	adds	r0, #1
 8000588:	4283      	cmp	r3, r0
 800058a:	d004      	beq.n	8000596 <__swbuf_r+0x62>
 800058c:	89a3      	ldrh	r3, [r4, #12]
 800058e:	07db      	lsls	r3, r3, #31
 8000590:	d506      	bpl.n	80005a0 <__swbuf_r+0x6c>
 8000592:	2e0a      	cmp	r6, #10
 8000594:	d104      	bne.n	80005a0 <__swbuf_r+0x6c>
 8000596:	4621      	mov	r1, r4
 8000598:	4628      	mov	r0, r5
 800059a:	f000 f911 	bl	80007c0 <_fflush_r>
 800059e:	b988      	cbnz	r0, 80005c4 <__swbuf_r+0x90>
 80005a0:	4638      	mov	r0, r7
 80005a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <__swbuf_r+0x9c>)
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d101      	bne.n	80005ae <__swbuf_r+0x7a>
 80005aa:	68ac      	ldr	r4, [r5, #8]
 80005ac:	e7cf      	b.n	800054e <__swbuf_r+0x1a>
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <__swbuf_r+0xa0>)
 80005b0:	429c      	cmp	r4, r3
 80005b2:	bf08      	it	eq
 80005b4:	68ec      	ldreq	r4, [r5, #12]
 80005b6:	e7ca      	b.n	800054e <__swbuf_r+0x1a>
 80005b8:	4621      	mov	r1, r4
 80005ba:	4628      	mov	r0, r5
 80005bc:	f000 f80c 	bl	80005d8 <__swsetup_r>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d0cb      	beq.n	800055c <__swbuf_r+0x28>
 80005c4:	f04f 37ff 	mov.w	r7, #4294967295
 80005c8:	e7ea      	b.n	80005a0 <__swbuf_r+0x6c>
 80005ca:	bf00      	nop
 80005cc:	08000e48 	.word	0x08000e48
 80005d0:	08000e68 	.word	0x08000e68
 80005d4:	08000e28 	.word	0x08000e28

080005d8 <__swsetup_r>:
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <__swsetup_r+0xcc>)
 80005da:	b570      	push	{r4, r5, r6, lr}
 80005dc:	681d      	ldr	r5, [r3, #0]
 80005de:	4606      	mov	r6, r0
 80005e0:	460c      	mov	r4, r1
 80005e2:	b125      	cbz	r5, 80005ee <__swsetup_r+0x16>
 80005e4:	69ab      	ldr	r3, [r5, #24]
 80005e6:	b913      	cbnz	r3, 80005ee <__swsetup_r+0x16>
 80005e8:	4628      	mov	r0, r5
 80005ea:	f000 f97d 	bl	80008e8 <__sinit>
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <__swsetup_r+0xd0>)
 80005f0:	429c      	cmp	r4, r3
 80005f2:	d10f      	bne.n	8000614 <__swsetup_r+0x3c>
 80005f4:	686c      	ldr	r4, [r5, #4]
 80005f6:	89a3      	ldrh	r3, [r4, #12]
 80005f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80005fc:	0719      	lsls	r1, r3, #28
 80005fe:	d42c      	bmi.n	800065a <__swsetup_r+0x82>
 8000600:	06dd      	lsls	r5, r3, #27
 8000602:	d411      	bmi.n	8000628 <__swsetup_r+0x50>
 8000604:	2309      	movs	r3, #9
 8000606:	6033      	str	r3, [r6, #0]
 8000608:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800060c:	81a3      	strh	r3, [r4, #12]
 800060e:	f04f 30ff 	mov.w	r0, #4294967295
 8000612:	e03e      	b.n	8000692 <__swsetup_r+0xba>
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <__swsetup_r+0xd4>)
 8000616:	429c      	cmp	r4, r3
 8000618:	d101      	bne.n	800061e <__swsetup_r+0x46>
 800061a:	68ac      	ldr	r4, [r5, #8]
 800061c:	e7eb      	b.n	80005f6 <__swsetup_r+0x1e>
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <__swsetup_r+0xd8>)
 8000620:	429c      	cmp	r4, r3
 8000622:	bf08      	it	eq
 8000624:	68ec      	ldreq	r4, [r5, #12]
 8000626:	e7e6      	b.n	80005f6 <__swsetup_r+0x1e>
 8000628:	0758      	lsls	r0, r3, #29
 800062a:	d512      	bpl.n	8000652 <__swsetup_r+0x7a>
 800062c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800062e:	b141      	cbz	r1, 8000642 <__swsetup_r+0x6a>
 8000630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000634:	4299      	cmp	r1, r3
 8000636:	d002      	beq.n	800063e <__swsetup_r+0x66>
 8000638:	4630      	mov	r0, r6
 800063a:	f000 fa59 	bl	8000af0 <_free_r>
 800063e:	2300      	movs	r3, #0
 8000640:	6363      	str	r3, [r4, #52]	; 0x34
 8000642:	89a3      	ldrh	r3, [r4, #12]
 8000644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000648:	81a3      	strh	r3, [r4, #12]
 800064a:	2300      	movs	r3, #0
 800064c:	6063      	str	r3, [r4, #4]
 800064e:	6923      	ldr	r3, [r4, #16]
 8000650:	6023      	str	r3, [r4, #0]
 8000652:	89a3      	ldrh	r3, [r4, #12]
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	81a3      	strh	r3, [r4, #12]
 800065a:	6923      	ldr	r3, [r4, #16]
 800065c:	b94b      	cbnz	r3, 8000672 <__swsetup_r+0x9a>
 800065e:	89a3      	ldrh	r3, [r4, #12]
 8000660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000668:	d003      	beq.n	8000672 <__swsetup_r+0x9a>
 800066a:	4621      	mov	r1, r4
 800066c:	4630      	mov	r0, r6
 800066e:	f000 f9ff 	bl	8000a70 <__smakebuf_r>
 8000672:	89a0      	ldrh	r0, [r4, #12]
 8000674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000678:	f010 0301 	ands.w	r3, r0, #1
 800067c:	d00a      	beq.n	8000694 <__swsetup_r+0xbc>
 800067e:	2300      	movs	r3, #0
 8000680:	60a3      	str	r3, [r4, #8]
 8000682:	6963      	ldr	r3, [r4, #20]
 8000684:	425b      	negs	r3, r3
 8000686:	61a3      	str	r3, [r4, #24]
 8000688:	6923      	ldr	r3, [r4, #16]
 800068a:	b943      	cbnz	r3, 800069e <__swsetup_r+0xc6>
 800068c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000690:	d1ba      	bne.n	8000608 <__swsetup_r+0x30>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	0781      	lsls	r1, r0, #30
 8000696:	bf58      	it	pl
 8000698:	6963      	ldrpl	r3, [r4, #20]
 800069a:	60a3      	str	r3, [r4, #8]
 800069c:	e7f4      	b.n	8000688 <__swsetup_r+0xb0>
 800069e:	2000      	movs	r0, #0
 80006a0:	e7f7      	b.n	8000692 <__swsetup_r+0xba>
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	08000e48 	.word	0x08000e48
 80006ac:	08000e68 	.word	0x08000e68
 80006b0:	08000e28 	.word	0x08000e28

080006b4 <__sflush_r>:
 80006b4:	898a      	ldrh	r2, [r1, #12]
 80006b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ba:	4605      	mov	r5, r0
 80006bc:	0710      	lsls	r0, r2, #28
 80006be:	460c      	mov	r4, r1
 80006c0:	d458      	bmi.n	8000774 <__sflush_r+0xc0>
 80006c2:	684b      	ldr	r3, [r1, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dc05      	bgt.n	80006d4 <__sflush_r+0x20>
 80006c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dc02      	bgt.n	80006d4 <__sflush_r+0x20>
 80006ce:	2000      	movs	r0, #0
 80006d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d0f9      	beq.n	80006ce <__sflush_r+0x1a>
 80006da:	2300      	movs	r3, #0
 80006dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80006e0:	682f      	ldr	r7, [r5, #0]
 80006e2:	602b      	str	r3, [r5, #0]
 80006e4:	d032      	beq.n	800074c <__sflush_r+0x98>
 80006e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80006e8:	89a3      	ldrh	r3, [r4, #12]
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	d505      	bpl.n	80006fa <__sflush_r+0x46>
 80006ee:	6863      	ldr	r3, [r4, #4]
 80006f0:	1ac0      	subs	r0, r0, r3
 80006f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80006f4:	b10b      	cbz	r3, 80006fa <__sflush_r+0x46>
 80006f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006f8:	1ac0      	subs	r0, r0, r3
 80006fa:	2300      	movs	r3, #0
 80006fc:	4602      	mov	r2, r0
 80006fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000700:	6a21      	ldr	r1, [r4, #32]
 8000702:	4628      	mov	r0, r5
 8000704:	47b0      	blx	r6
 8000706:	1c43      	adds	r3, r0, #1
 8000708:	89a3      	ldrh	r3, [r4, #12]
 800070a:	d106      	bne.n	800071a <__sflush_r+0x66>
 800070c:	6829      	ldr	r1, [r5, #0]
 800070e:	291d      	cmp	r1, #29
 8000710:	d82c      	bhi.n	800076c <__sflush_r+0xb8>
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <__sflush_r+0x108>)
 8000714:	40ca      	lsrs	r2, r1
 8000716:	07d6      	lsls	r6, r2, #31
 8000718:	d528      	bpl.n	800076c <__sflush_r+0xb8>
 800071a:	2200      	movs	r2, #0
 800071c:	6062      	str	r2, [r4, #4]
 800071e:	04d9      	lsls	r1, r3, #19
 8000720:	6922      	ldr	r2, [r4, #16]
 8000722:	6022      	str	r2, [r4, #0]
 8000724:	d504      	bpl.n	8000730 <__sflush_r+0x7c>
 8000726:	1c42      	adds	r2, r0, #1
 8000728:	d101      	bne.n	800072e <__sflush_r+0x7a>
 800072a:	682b      	ldr	r3, [r5, #0]
 800072c:	b903      	cbnz	r3, 8000730 <__sflush_r+0x7c>
 800072e:	6560      	str	r0, [r4, #84]	; 0x54
 8000730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000732:	602f      	str	r7, [r5, #0]
 8000734:	2900      	cmp	r1, #0
 8000736:	d0ca      	beq.n	80006ce <__sflush_r+0x1a>
 8000738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800073c:	4299      	cmp	r1, r3
 800073e:	d002      	beq.n	8000746 <__sflush_r+0x92>
 8000740:	4628      	mov	r0, r5
 8000742:	f000 f9d5 	bl	8000af0 <_free_r>
 8000746:	2000      	movs	r0, #0
 8000748:	6360      	str	r0, [r4, #52]	; 0x34
 800074a:	e7c1      	b.n	80006d0 <__sflush_r+0x1c>
 800074c:	6a21      	ldr	r1, [r4, #32]
 800074e:	2301      	movs	r3, #1
 8000750:	4628      	mov	r0, r5
 8000752:	47b0      	blx	r6
 8000754:	1c41      	adds	r1, r0, #1
 8000756:	d1c7      	bne.n	80006e8 <__sflush_r+0x34>
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0c4      	beq.n	80006e8 <__sflush_r+0x34>
 800075e:	2b1d      	cmp	r3, #29
 8000760:	d001      	beq.n	8000766 <__sflush_r+0xb2>
 8000762:	2b16      	cmp	r3, #22
 8000764:	d101      	bne.n	800076a <__sflush_r+0xb6>
 8000766:	602f      	str	r7, [r5, #0]
 8000768:	e7b1      	b.n	80006ce <__sflush_r+0x1a>
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	81a3      	strh	r3, [r4, #12]
 8000772:	e7ad      	b.n	80006d0 <__sflush_r+0x1c>
 8000774:	690f      	ldr	r7, [r1, #16]
 8000776:	2f00      	cmp	r7, #0
 8000778:	d0a9      	beq.n	80006ce <__sflush_r+0x1a>
 800077a:	0793      	lsls	r3, r2, #30
 800077c:	680e      	ldr	r6, [r1, #0]
 800077e:	bf08      	it	eq
 8000780:	694b      	ldreq	r3, [r1, #20]
 8000782:	600f      	str	r7, [r1, #0]
 8000784:	bf18      	it	ne
 8000786:	2300      	movne	r3, #0
 8000788:	eba6 0807 	sub.w	r8, r6, r7
 800078c:	608b      	str	r3, [r1, #8]
 800078e:	f1b8 0f00 	cmp.w	r8, #0
 8000792:	dd9c      	ble.n	80006ce <__sflush_r+0x1a>
 8000794:	6a21      	ldr	r1, [r4, #32]
 8000796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000798:	4643      	mov	r3, r8
 800079a:	463a      	mov	r2, r7
 800079c:	4628      	mov	r0, r5
 800079e:	47b0      	blx	r6
 80007a0:	2800      	cmp	r0, #0
 80007a2:	dc06      	bgt.n	80007b2 <__sflush_r+0xfe>
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007aa:	81a3      	strh	r3, [r4, #12]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	e78e      	b.n	80006d0 <__sflush_r+0x1c>
 80007b2:	4407      	add	r7, r0
 80007b4:	eba8 0800 	sub.w	r8, r8, r0
 80007b8:	e7e9      	b.n	800078e <__sflush_r+0xda>
 80007ba:	bf00      	nop
 80007bc:	20400001 	.word	0x20400001

080007c0 <_fflush_r>:
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	690b      	ldr	r3, [r1, #16]
 80007c4:	4605      	mov	r5, r0
 80007c6:	460c      	mov	r4, r1
 80007c8:	b913      	cbnz	r3, 80007d0 <_fflush_r+0x10>
 80007ca:	2500      	movs	r5, #0
 80007cc:	4628      	mov	r0, r5
 80007ce:	bd38      	pop	{r3, r4, r5, pc}
 80007d0:	b118      	cbz	r0, 80007da <_fflush_r+0x1a>
 80007d2:	6983      	ldr	r3, [r0, #24]
 80007d4:	b90b      	cbnz	r3, 80007da <_fflush_r+0x1a>
 80007d6:	f000 f887 	bl	80008e8 <__sinit>
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <_fflush_r+0x6c>)
 80007dc:	429c      	cmp	r4, r3
 80007de:	d11b      	bne.n	8000818 <_fflush_r+0x58>
 80007e0:	686c      	ldr	r4, [r5, #4]
 80007e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0ef      	beq.n	80007ca <_fflush_r+0xa>
 80007ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80007ec:	07d0      	lsls	r0, r2, #31
 80007ee:	d404      	bmi.n	80007fa <_fflush_r+0x3a>
 80007f0:	0599      	lsls	r1, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_fflush_r+0x3a>
 80007f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f6:	f000 f915 	bl	8000a24 <__retarget_lock_acquire_recursive>
 80007fa:	4628      	mov	r0, r5
 80007fc:	4621      	mov	r1, r4
 80007fe:	f7ff ff59 	bl	80006b4 <__sflush_r>
 8000802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000804:	07da      	lsls	r2, r3, #31
 8000806:	4605      	mov	r5, r0
 8000808:	d4e0      	bmi.n	80007cc <_fflush_r+0xc>
 800080a:	89a3      	ldrh	r3, [r4, #12]
 800080c:	059b      	lsls	r3, r3, #22
 800080e:	d4dd      	bmi.n	80007cc <_fflush_r+0xc>
 8000810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000812:	f000 f908 	bl	8000a26 <__retarget_lock_release_recursive>
 8000816:	e7d9      	b.n	80007cc <_fflush_r+0xc>
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <_fflush_r+0x70>)
 800081a:	429c      	cmp	r4, r3
 800081c:	d101      	bne.n	8000822 <_fflush_r+0x62>
 800081e:	68ac      	ldr	r4, [r5, #8]
 8000820:	e7df      	b.n	80007e2 <_fflush_r+0x22>
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <_fflush_r+0x74>)
 8000824:	429c      	cmp	r4, r3
 8000826:	bf08      	it	eq
 8000828:	68ec      	ldreq	r4, [r5, #12]
 800082a:	e7da      	b.n	80007e2 <_fflush_r+0x22>
 800082c:	08000e48 	.word	0x08000e48
 8000830:	08000e68 	.word	0x08000e68
 8000834:	08000e28 	.word	0x08000e28

08000838 <std>:
 8000838:	2300      	movs	r3, #0
 800083a:	b510      	push	{r4, lr}
 800083c:	4604      	mov	r4, r0
 800083e:	e9c0 3300 	strd	r3, r3, [r0]
 8000842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000846:	6083      	str	r3, [r0, #8]
 8000848:	8181      	strh	r1, [r0, #12]
 800084a:	6643      	str	r3, [r0, #100]	; 0x64
 800084c:	81c2      	strh	r2, [r0, #14]
 800084e:	6183      	str	r3, [r0, #24]
 8000850:	4619      	mov	r1, r3
 8000852:	2208      	movs	r2, #8
 8000854:	305c      	adds	r0, #92	; 0x5c
 8000856:	f7ff fdef 	bl	8000438 <memset>
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <std+0x38>)
 800085c:	6263      	str	r3, [r4, #36]	; 0x24
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <std+0x3c>)
 8000860:	62a3      	str	r3, [r4, #40]	; 0x28
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <std+0x40>)
 8000864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <std+0x44>)
 8000868:	6224      	str	r4, [r4, #32]
 800086a:	6323      	str	r3, [r4, #48]	; 0x30
 800086c:	bd10      	pop	{r4, pc}
 800086e:	bf00      	nop
 8000870:	08000c61 	.word	0x08000c61
 8000874:	08000c83 	.word	0x08000c83
 8000878:	08000cbb 	.word	0x08000cbb
 800087c:	08000cdf 	.word	0x08000cdf

08000880 <_cleanup_r>:
 8000880:	4901      	ldr	r1, [pc, #4]	; (8000888 <_cleanup_r+0x8>)
 8000882:	f000 b8af 	b.w	80009e4 <_fwalk_reent>
 8000886:	bf00      	nop
 8000888:	080007c1 	.word	0x080007c1

0800088c <__sfmoreglue>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	1e4a      	subs	r2, r1, #1
 8000890:	2568      	movs	r5, #104	; 0x68
 8000892:	4355      	muls	r5, r2
 8000894:	460e      	mov	r6, r1
 8000896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800089a:	f000 f977 	bl	8000b8c <_malloc_r>
 800089e:	4604      	mov	r4, r0
 80008a0:	b140      	cbz	r0, 80008b4 <__sfmoreglue+0x28>
 80008a2:	2100      	movs	r1, #0
 80008a4:	e9c0 1600 	strd	r1, r6, [r0]
 80008a8:	300c      	adds	r0, #12
 80008aa:	60a0      	str	r0, [r4, #8]
 80008ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008b0:	f7ff fdc2 	bl	8000438 <memset>
 80008b4:	4620      	mov	r0, r4
 80008b6:	bd70      	pop	{r4, r5, r6, pc}

080008b8 <__sfp_lock_acquire>:
 80008b8:	4801      	ldr	r0, [pc, #4]	; (80008c0 <__sfp_lock_acquire+0x8>)
 80008ba:	f000 b8b3 	b.w	8000a24 <__retarget_lock_acquire_recursive>
 80008be:	bf00      	nop
 80008c0:	20000094 	.word	0x20000094

080008c4 <__sfp_lock_release>:
 80008c4:	4801      	ldr	r0, [pc, #4]	; (80008cc <__sfp_lock_release+0x8>)
 80008c6:	f000 b8ae 	b.w	8000a26 <__retarget_lock_release_recursive>
 80008ca:	bf00      	nop
 80008cc:	20000094 	.word	0x20000094

080008d0 <__sinit_lock_acquire>:
 80008d0:	4801      	ldr	r0, [pc, #4]	; (80008d8 <__sinit_lock_acquire+0x8>)
 80008d2:	f000 b8a7 	b.w	8000a24 <__retarget_lock_acquire_recursive>
 80008d6:	bf00      	nop
 80008d8:	2000008f 	.word	0x2000008f

080008dc <__sinit_lock_release>:
 80008dc:	4801      	ldr	r0, [pc, #4]	; (80008e4 <__sinit_lock_release+0x8>)
 80008de:	f000 b8a2 	b.w	8000a26 <__retarget_lock_release_recursive>
 80008e2:	bf00      	nop
 80008e4:	2000008f 	.word	0x2000008f

080008e8 <__sinit>:
 80008e8:	b510      	push	{r4, lr}
 80008ea:	4604      	mov	r4, r0
 80008ec:	f7ff fff0 	bl	80008d0 <__sinit_lock_acquire>
 80008f0:	69a3      	ldr	r3, [r4, #24]
 80008f2:	b11b      	cbz	r3, 80008fc <__sinit+0x14>
 80008f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f8:	f7ff bff0 	b.w	80008dc <__sinit_lock_release>
 80008fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000900:	6523      	str	r3, [r4, #80]	; 0x50
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <__sinit+0x68>)
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <__sinit+0x6c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	62a2      	str	r2, [r4, #40]	; 0x28
 800090a:	42a3      	cmp	r3, r4
 800090c:	bf04      	itt	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	61a3      	streq	r3, [r4, #24]
 8000912:	4620      	mov	r0, r4
 8000914:	f000 f820 	bl	8000958 <__sfp>
 8000918:	6060      	str	r0, [r4, #4]
 800091a:	4620      	mov	r0, r4
 800091c:	f000 f81c 	bl	8000958 <__sfp>
 8000920:	60a0      	str	r0, [r4, #8]
 8000922:	4620      	mov	r0, r4
 8000924:	f000 f818 	bl	8000958 <__sfp>
 8000928:	2200      	movs	r2, #0
 800092a:	60e0      	str	r0, [r4, #12]
 800092c:	2104      	movs	r1, #4
 800092e:	6860      	ldr	r0, [r4, #4]
 8000930:	f7ff ff82 	bl	8000838 <std>
 8000934:	68a0      	ldr	r0, [r4, #8]
 8000936:	2201      	movs	r2, #1
 8000938:	2109      	movs	r1, #9
 800093a:	f7ff ff7d 	bl	8000838 <std>
 800093e:	68e0      	ldr	r0, [r4, #12]
 8000940:	2202      	movs	r2, #2
 8000942:	2112      	movs	r1, #18
 8000944:	f7ff ff78 	bl	8000838 <std>
 8000948:	2301      	movs	r3, #1
 800094a:	61a3      	str	r3, [r4, #24]
 800094c:	e7d2      	b.n	80008f4 <__sinit+0xc>
 800094e:	bf00      	nop
 8000950:	08000e24 	.word	0x08000e24
 8000954:	08000881 	.word	0x08000881

08000958 <__sfp>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	4607      	mov	r7, r0
 800095c:	f7ff ffac 	bl	80008b8 <__sfp_lock_acquire>
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <__sfp+0x84>)
 8000962:	681e      	ldr	r6, [r3, #0]
 8000964:	69b3      	ldr	r3, [r6, #24]
 8000966:	b913      	cbnz	r3, 800096e <__sfp+0x16>
 8000968:	4630      	mov	r0, r6
 800096a:	f7ff ffbd 	bl	80008e8 <__sinit>
 800096e:	3648      	adds	r6, #72	; 0x48
 8000970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	d503      	bpl.n	8000980 <__sfp+0x28>
 8000978:	6833      	ldr	r3, [r6, #0]
 800097a:	b30b      	cbz	r3, 80009c0 <__sfp+0x68>
 800097c:	6836      	ldr	r6, [r6, #0]
 800097e:	e7f7      	b.n	8000970 <__sfp+0x18>
 8000980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000984:	b9d5      	cbnz	r5, 80009bc <__sfp+0x64>
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <__sfp+0x88>)
 8000988:	60e3      	str	r3, [r4, #12]
 800098a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800098e:	6665      	str	r5, [r4, #100]	; 0x64
 8000990:	f000 f847 	bl	8000a22 <__retarget_lock_init_recursive>
 8000994:	f7ff ff96 	bl	80008c4 <__sfp_lock_release>
 8000998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800099c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009a0:	6025      	str	r5, [r4, #0]
 80009a2:	61a5      	str	r5, [r4, #24]
 80009a4:	2208      	movs	r2, #8
 80009a6:	4629      	mov	r1, r5
 80009a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009ac:	f7ff fd44 	bl	8000438 <memset>
 80009b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009b8:	4620      	mov	r0, r4
 80009ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009bc:	3468      	adds	r4, #104	; 0x68
 80009be:	e7d9      	b.n	8000974 <__sfp+0x1c>
 80009c0:	2104      	movs	r1, #4
 80009c2:	4638      	mov	r0, r7
 80009c4:	f7ff ff62 	bl	800088c <__sfmoreglue>
 80009c8:	4604      	mov	r4, r0
 80009ca:	6030      	str	r0, [r6, #0]
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d1d5      	bne.n	800097c <__sfp+0x24>
 80009d0:	f7ff ff78 	bl	80008c4 <__sfp_lock_release>
 80009d4:	230c      	movs	r3, #12
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	e7ee      	b.n	80009b8 <__sfp+0x60>
 80009da:	bf00      	nop
 80009dc:	08000e24 	.word	0x08000e24
 80009e0:	ffff0001 	.word	0xffff0001

080009e4 <_fwalk_reent>:
 80009e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e8:	4606      	mov	r6, r0
 80009ea:	4688      	mov	r8, r1
 80009ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009f0:	2700      	movs	r7, #0
 80009f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009f6:	f1b9 0901 	subs.w	r9, r9, #1
 80009fa:	d505      	bpl.n	8000a08 <_fwalk_reent+0x24>
 80009fc:	6824      	ldr	r4, [r4, #0]
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d1f7      	bne.n	80009f2 <_fwalk_reent+0xe>
 8000a02:	4638      	mov	r0, r7
 8000a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a08:	89ab      	ldrh	r3, [r5, #12]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d907      	bls.n	8000a1e <_fwalk_reent+0x3a>
 8000a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a12:	3301      	adds	r3, #1
 8000a14:	d003      	beq.n	8000a1e <_fwalk_reent+0x3a>
 8000a16:	4629      	mov	r1, r5
 8000a18:	4630      	mov	r0, r6
 8000a1a:	47c0      	blx	r8
 8000a1c:	4307      	orrs	r7, r0
 8000a1e:	3568      	adds	r5, #104	; 0x68
 8000a20:	e7e9      	b.n	80009f6 <_fwalk_reent+0x12>

08000a22 <__retarget_lock_init_recursive>:
 8000a22:	4770      	bx	lr

08000a24 <__retarget_lock_acquire_recursive>:
 8000a24:	4770      	bx	lr

08000a26 <__retarget_lock_release_recursive>:
 8000a26:	4770      	bx	lr

08000a28 <__swhatbuf_r>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	460e      	mov	r6, r1
 8000a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a30:	2900      	cmp	r1, #0
 8000a32:	b096      	sub	sp, #88	; 0x58
 8000a34:	4614      	mov	r4, r2
 8000a36:	461d      	mov	r5, r3
 8000a38:	da07      	bge.n	8000a4a <__swhatbuf_r+0x22>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	602b      	str	r3, [r5, #0]
 8000a3e:	89b3      	ldrh	r3, [r6, #12]
 8000a40:	061a      	lsls	r2, r3, #24
 8000a42:	d410      	bmi.n	8000a66 <__swhatbuf_r+0x3e>
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	e00e      	b.n	8000a68 <__swhatbuf_r+0x40>
 8000a4a:	466a      	mov	r2, sp
 8000a4c:	f000 f96e 	bl	8000d2c <_fstat_r>
 8000a50:	2800      	cmp	r0, #0
 8000a52:	dbf2      	blt.n	8000a3a <__swhatbuf_r+0x12>
 8000a54:	9a01      	ldr	r2, [sp, #4]
 8000a56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000a5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000a5e:	425a      	negs	r2, r3
 8000a60:	415a      	adcs	r2, r3
 8000a62:	602a      	str	r2, [r5, #0]
 8000a64:	e7ee      	b.n	8000a44 <__swhatbuf_r+0x1c>
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	2000      	movs	r0, #0
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	b016      	add	sp, #88	; 0x58
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}

08000a70 <__smakebuf_r>:
 8000a70:	898b      	ldrh	r3, [r1, #12]
 8000a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a74:	079d      	lsls	r5, r3, #30
 8000a76:	4606      	mov	r6, r0
 8000a78:	460c      	mov	r4, r1
 8000a7a:	d507      	bpl.n	8000a8c <__smakebuf_r+0x1c>
 8000a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	6123      	str	r3, [r4, #16]
 8000a84:	2301      	movs	r3, #1
 8000a86:	6163      	str	r3, [r4, #20]
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	ab01      	add	r3, sp, #4
 8000a8e:	466a      	mov	r2, sp
 8000a90:	f7ff ffca 	bl	8000a28 <__swhatbuf_r>
 8000a94:	9900      	ldr	r1, [sp, #0]
 8000a96:	4605      	mov	r5, r0
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f000 f877 	bl	8000b8c <_malloc_r>
 8000a9e:	b948      	cbnz	r0, 8000ab4 <__smakebuf_r+0x44>
 8000aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aa4:	059a      	lsls	r2, r3, #22
 8000aa6:	d4ef      	bmi.n	8000a88 <__smakebuf_r+0x18>
 8000aa8:	f023 0303 	bic.w	r3, r3, #3
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	81a3      	strh	r3, [r4, #12]
 8000ab2:	e7e3      	b.n	8000a7c <__smakebuf_r+0xc>
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <__smakebuf_r+0x7c>)
 8000ab6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	6020      	str	r0, [r4, #0]
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	81a3      	strh	r3, [r4, #12]
 8000ac2:	9b00      	ldr	r3, [sp, #0]
 8000ac4:	6163      	str	r3, [r4, #20]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	6120      	str	r0, [r4, #16]
 8000aca:	b15b      	cbz	r3, 8000ae4 <__smakebuf_r+0x74>
 8000acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ad0:	4630      	mov	r0, r6
 8000ad2:	f000 f93d 	bl	8000d50 <_isatty_r>
 8000ad6:	b128      	cbz	r0, 8000ae4 <__smakebuf_r+0x74>
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	f023 0303 	bic.w	r3, r3, #3
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	81a3      	strh	r3, [r4, #12]
 8000ae4:	89a0      	ldrh	r0, [r4, #12]
 8000ae6:	4305      	orrs	r5, r0
 8000ae8:	81a5      	strh	r5, [r4, #12]
 8000aea:	e7cd      	b.n	8000a88 <__smakebuf_r+0x18>
 8000aec:	08000881 	.word	0x08000881

08000af0 <_free_r>:
 8000af0:	b538      	push	{r3, r4, r5, lr}
 8000af2:	4605      	mov	r5, r0
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d045      	beq.n	8000b84 <_free_r+0x94>
 8000af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000afc:	1f0c      	subs	r4, r1, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfb8      	it	lt
 8000b02:	18e4      	addlt	r4, r4, r3
 8000b04:	f000 f946 	bl	8000d94 <__malloc_lock>
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <_free_r+0x98>)
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	b933      	cbnz	r3, 8000b1e <_free_r+0x2e>
 8000b10:	6063      	str	r3, [r4, #4]
 8000b12:	6014      	str	r4, [r2, #0]
 8000b14:	4628      	mov	r0, r5
 8000b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1a:	f000 b941 	b.w	8000da0 <__malloc_unlock>
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	d90b      	bls.n	8000b3a <_free_r+0x4a>
 8000b22:	6821      	ldr	r1, [r4, #0]
 8000b24:	1862      	adds	r2, r4, r1
 8000b26:	4293      	cmp	r3, r2
 8000b28:	bf04      	itt	eq
 8000b2a:	681a      	ldreq	r2, [r3, #0]
 8000b2c:	685b      	ldreq	r3, [r3, #4]
 8000b2e:	6063      	str	r3, [r4, #4]
 8000b30:	bf04      	itt	eq
 8000b32:	1852      	addeq	r2, r2, r1
 8000b34:	6022      	streq	r2, [r4, #0]
 8000b36:	6004      	str	r4, [r0, #0]
 8000b38:	e7ec      	b.n	8000b14 <_free_r+0x24>
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	b10b      	cbz	r3, 8000b44 <_free_r+0x54>
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	d9fa      	bls.n	8000b3a <_free_r+0x4a>
 8000b44:	6811      	ldr	r1, [r2, #0]
 8000b46:	1850      	adds	r0, r2, r1
 8000b48:	42a0      	cmp	r0, r4
 8000b4a:	d10b      	bne.n	8000b64 <_free_r+0x74>
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	4401      	add	r1, r0
 8000b50:	1850      	adds	r0, r2, r1
 8000b52:	4283      	cmp	r3, r0
 8000b54:	6011      	str	r1, [r2, #0]
 8000b56:	d1dd      	bne.n	8000b14 <_free_r+0x24>
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	6053      	str	r3, [r2, #4]
 8000b5e:	4401      	add	r1, r0
 8000b60:	6011      	str	r1, [r2, #0]
 8000b62:	e7d7      	b.n	8000b14 <_free_r+0x24>
 8000b64:	d902      	bls.n	8000b6c <_free_r+0x7c>
 8000b66:	230c      	movs	r3, #12
 8000b68:	602b      	str	r3, [r5, #0]
 8000b6a:	e7d3      	b.n	8000b14 <_free_r+0x24>
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	1821      	adds	r1, r4, r0
 8000b70:	428b      	cmp	r3, r1
 8000b72:	bf04      	itt	eq
 8000b74:	6819      	ldreq	r1, [r3, #0]
 8000b76:	685b      	ldreq	r3, [r3, #4]
 8000b78:	6063      	str	r3, [r4, #4]
 8000b7a:	bf04      	itt	eq
 8000b7c:	1809      	addeq	r1, r1, r0
 8000b7e:	6021      	streq	r1, [r4, #0]
 8000b80:	6054      	str	r4, [r2, #4]
 8000b82:	e7c7      	b.n	8000b14 <_free_r+0x24>
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	20000084 	.word	0x20000084

08000b8c <_malloc_r>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	1ccd      	adds	r5, r1, #3
 8000b90:	f025 0503 	bic.w	r5, r5, #3
 8000b94:	3508      	adds	r5, #8
 8000b96:	2d0c      	cmp	r5, #12
 8000b98:	bf38      	it	cc
 8000b9a:	250c      	movcc	r5, #12
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	db01      	blt.n	8000ba6 <_malloc_r+0x1a>
 8000ba2:	42a9      	cmp	r1, r5
 8000ba4:	d903      	bls.n	8000bae <_malloc_r+0x22>
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	6033      	str	r3, [r6, #0]
 8000baa:	2000      	movs	r0, #0
 8000bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bae:	f000 f8f1 	bl	8000d94 <__malloc_lock>
 8000bb2:	4921      	ldr	r1, [pc, #132]	; (8000c38 <_malloc_r+0xac>)
 8000bb4:	680a      	ldr	r2, [r1, #0]
 8000bb6:	4614      	mov	r4, r2
 8000bb8:	b99c      	cbnz	r4, 8000be2 <_malloc_r+0x56>
 8000bba:	4f20      	ldr	r7, [pc, #128]	; (8000c3c <_malloc_r+0xb0>)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b923      	cbnz	r3, 8000bca <_malloc_r+0x3e>
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 f83c 	bl	8000c40 <_sbrk_r>
 8000bc8:	6038      	str	r0, [r7, #0]
 8000bca:	4629      	mov	r1, r5
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f000 f837 	bl	8000c40 <_sbrk_r>
 8000bd2:	1c43      	adds	r3, r0, #1
 8000bd4:	d123      	bne.n	8000c1e <_malloc_r+0x92>
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	6033      	str	r3, [r6, #0]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	f000 f8e0 	bl	8000da0 <__malloc_unlock>
 8000be0:	e7e3      	b.n	8000baa <_malloc_r+0x1e>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	1b5b      	subs	r3, r3, r5
 8000be6:	d417      	bmi.n	8000c18 <_malloc_r+0x8c>
 8000be8:	2b0b      	cmp	r3, #11
 8000bea:	d903      	bls.n	8000bf4 <_malloc_r+0x68>
 8000bec:	6023      	str	r3, [r4, #0]
 8000bee:	441c      	add	r4, r3
 8000bf0:	6025      	str	r5, [r4, #0]
 8000bf2:	e004      	b.n	8000bfe <_malloc_r+0x72>
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	42a2      	cmp	r2, r4
 8000bf8:	bf0c      	ite	eq
 8000bfa:	600b      	streq	r3, [r1, #0]
 8000bfc:	6053      	strne	r3, [r2, #4]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f000 f8ce 	bl	8000da0 <__malloc_unlock>
 8000c04:	f104 000b 	add.w	r0, r4, #11
 8000c08:	1d23      	adds	r3, r4, #4
 8000c0a:	f020 0007 	bic.w	r0, r0, #7
 8000c0e:	1ac2      	subs	r2, r0, r3
 8000c10:	d0cc      	beq.n	8000bac <_malloc_r+0x20>
 8000c12:	1a1b      	subs	r3, r3, r0
 8000c14:	50a3      	str	r3, [r4, r2]
 8000c16:	e7c9      	b.n	8000bac <_malloc_r+0x20>
 8000c18:	4622      	mov	r2, r4
 8000c1a:	6864      	ldr	r4, [r4, #4]
 8000c1c:	e7cc      	b.n	8000bb8 <_malloc_r+0x2c>
 8000c1e:	1cc4      	adds	r4, r0, #3
 8000c20:	f024 0403 	bic.w	r4, r4, #3
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d0e3      	beq.n	8000bf0 <_malloc_r+0x64>
 8000c28:	1a21      	subs	r1, r4, r0
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f000 f808 	bl	8000c40 <_sbrk_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d1dd      	bne.n	8000bf0 <_malloc_r+0x64>
 8000c34:	e7cf      	b.n	8000bd6 <_malloc_r+0x4a>
 8000c36:	bf00      	nop
 8000c38:	20000084 	.word	0x20000084
 8000c3c:	20000088 	.word	0x20000088

08000c40 <_sbrk_r>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4d06      	ldr	r5, [pc, #24]	; (8000c5c <_sbrk_r+0x1c>)
 8000c44:	2300      	movs	r3, #0
 8000c46:	4604      	mov	r4, r0
 8000c48:	4608      	mov	r0, r1
 8000c4a:	602b      	str	r3, [r5, #0]
 8000c4c:	f7ff fb6a 	bl	8000324 <_sbrk>
 8000c50:	1c43      	adds	r3, r0, #1
 8000c52:	d102      	bne.n	8000c5a <_sbrk_r+0x1a>
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	b103      	cbz	r3, 8000c5a <_sbrk_r+0x1a>
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}
 8000c5c:	20000098 	.word	0x20000098

08000c60 <__sread>:
 8000c60:	b510      	push	{r4, lr}
 8000c62:	460c      	mov	r4, r1
 8000c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c68:	f000 f8a0 	bl	8000dac <_read_r>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	bfab      	itete	ge
 8000c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c72:	89a3      	ldrhlt	r3, [r4, #12]
 8000c74:	181b      	addge	r3, r3, r0
 8000c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c7a:	bfac      	ite	ge
 8000c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c7e:	81a3      	strhlt	r3, [r4, #12]
 8000c80:	bd10      	pop	{r4, pc}

08000c82 <__swrite>:
 8000c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c86:	461f      	mov	r7, r3
 8000c88:	898b      	ldrh	r3, [r1, #12]
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	460c      	mov	r4, r1
 8000c90:	4616      	mov	r6, r2
 8000c92:	d505      	bpl.n	8000ca0 <__swrite+0x1e>
 8000c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c98:	2302      	movs	r3, #2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f000 f868 	bl	8000d70 <_lseek_r>
 8000ca0:	89a3      	ldrh	r3, [r4, #12]
 8000ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000caa:	81a3      	strh	r3, [r4, #12]
 8000cac:	4632      	mov	r2, r6
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb6:	f000 b817 	b.w	8000ce8 <_write_r>

08000cba <__sseek>:
 8000cba:	b510      	push	{r4, lr}
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cc2:	f000 f855 	bl	8000d70 <_lseek_r>
 8000cc6:	1c43      	adds	r3, r0, #1
 8000cc8:	89a3      	ldrh	r3, [r4, #12]
 8000cca:	bf15      	itete	ne
 8000ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000cd6:	81a3      	strheq	r3, [r4, #12]
 8000cd8:	bf18      	it	ne
 8000cda:	81a3      	strhne	r3, [r4, #12]
 8000cdc:	bd10      	pop	{r4, pc}

08000cde <__sclose>:
 8000cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ce2:	f000 b813 	b.w	8000d0c <_close_r>
	...

08000ce8 <_write_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4d07      	ldr	r5, [pc, #28]	; (8000d08 <_write_r+0x20>)
 8000cec:	4604      	mov	r4, r0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	602a      	str	r2, [r5, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f7ff fac7 	bl	800028a <_write>
 8000cfc:	1c43      	adds	r3, r0, #1
 8000cfe:	d102      	bne.n	8000d06 <_write_r+0x1e>
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	b103      	cbz	r3, 8000d06 <_write_r+0x1e>
 8000d04:	6023      	str	r3, [r4, #0]
 8000d06:	bd38      	pop	{r3, r4, r5, pc}
 8000d08:	20000098 	.word	0x20000098

08000d0c <_close_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4d06      	ldr	r5, [pc, #24]	; (8000d28 <_close_r+0x1c>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	602b      	str	r3, [r5, #0]
 8000d18:	f7ff fad3 	bl	80002c2 <_close>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d102      	bne.n	8000d26 <_close_r+0x1a>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	b103      	cbz	r3, 8000d26 <_close_r+0x1a>
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	20000098 	.word	0x20000098

08000d2c <_fstat_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4d07      	ldr	r5, [pc, #28]	; (8000d4c <_fstat_r+0x20>)
 8000d30:	2300      	movs	r3, #0
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	602b      	str	r3, [r5, #0]
 8000d3a:	f7ff facd 	bl	80002d8 <_fstat>
 8000d3e:	1c43      	adds	r3, r0, #1
 8000d40:	d102      	bne.n	8000d48 <_fstat_r+0x1c>
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	b103      	cbz	r3, 8000d48 <_fstat_r+0x1c>
 8000d46:	6023      	str	r3, [r4, #0]
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000098 	.word	0x20000098

08000d50 <_isatty_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	4d06      	ldr	r5, [pc, #24]	; (8000d6c <_isatty_r+0x1c>)
 8000d54:	2300      	movs	r3, #0
 8000d56:	4604      	mov	r4, r0
 8000d58:	4608      	mov	r0, r1
 8000d5a:	602b      	str	r3, [r5, #0]
 8000d5c:	f7ff facb 	bl	80002f6 <_isatty>
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	d102      	bne.n	8000d6a <_isatty_r+0x1a>
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	b103      	cbz	r3, 8000d6a <_isatty_r+0x1a>
 8000d68:	6023      	str	r3, [r4, #0]
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	20000098 	.word	0x20000098

08000d70 <_lseek_r>:
 8000d70:	b538      	push	{r3, r4, r5, lr}
 8000d72:	4d07      	ldr	r5, [pc, #28]	; (8000d90 <_lseek_r+0x20>)
 8000d74:	4604      	mov	r4, r0
 8000d76:	4608      	mov	r0, r1
 8000d78:	4611      	mov	r1, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	602a      	str	r2, [r5, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f7ff fac3 	bl	800030a <_lseek>
 8000d84:	1c43      	adds	r3, r0, #1
 8000d86:	d102      	bne.n	8000d8e <_lseek_r+0x1e>
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	b103      	cbz	r3, 8000d8e <_lseek_r+0x1e>
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
 8000d90:	20000098 	.word	0x20000098

08000d94 <__malloc_lock>:
 8000d94:	4801      	ldr	r0, [pc, #4]	; (8000d9c <__malloc_lock+0x8>)
 8000d96:	f7ff be45 	b.w	8000a24 <__retarget_lock_acquire_recursive>
 8000d9a:	bf00      	nop
 8000d9c:	20000090 	.word	0x20000090

08000da0 <__malloc_unlock>:
 8000da0:	4801      	ldr	r0, [pc, #4]	; (8000da8 <__malloc_unlock+0x8>)
 8000da2:	f7ff be40 	b.w	8000a26 <__retarget_lock_release_recursive>
 8000da6:	bf00      	nop
 8000da8:	20000090 	.word	0x20000090

08000dac <_read_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4d07      	ldr	r5, [pc, #28]	; (8000dcc <_read_r+0x20>)
 8000db0:	4604      	mov	r4, r0
 8000db2:	4608      	mov	r0, r1
 8000db4:	4611      	mov	r1, r2
 8000db6:	2200      	movs	r2, #0
 8000db8:	602a      	str	r2, [r5, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f7ff fa48 	bl	8000250 <_read>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_read_r+0x1e>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_read_r+0x1e>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
