
008Input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a6e  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000223  00000000  00000000  00010e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00011098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000040  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000019ce  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000064e  00000000  00000000  00012afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000764c  00000000  00000000  0001314c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001a798  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a8  00000000  00000000  0001a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003b4 	.word	0x080003b4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003b4 	.word	0x080003b4

080001e8 <delay>:

void delay(unsigned long int);
void flash4Leds(unsigned long int);

void delay(unsigned long int number_of_cycles)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for(int i=0;i<=number_of_cycles;i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d2f8      	bcs.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <flash4Leds>:
					*const pGPIODMODE 	= (uint32_t*)GPIODADDR,
					*const pGPIODOUT 	= (uint32_t*)GPIOOUT;
uint32_t const volatile	*const pGPIOAIDR= (uint32_t*)(0x40020010);

// Driver code to test above function
void flash4Leds(unsigned long int cycles){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	*pGPIODOUT	&= ~(0b0001<<12);
 800021c:	4b1f      	ldr	r3, [pc, #124]	; (800029c <flash4Leds+0x88>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1e      	ldr	r2, [pc, #120]	; (800029c <flash4Leds+0x88>)
 8000222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000226:	6013      	str	r3, [r2, #0]
	*pGPIODOUT	|= (0b1000<<12);
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <flash4Leds+0x88>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <flash4Leds+0x88>)
 800022e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000232:	6013      	str	r3, [r2, #0]
	delay(cycles);
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	f7ff ffd7 	bl	80001e8 <delay>
	*pGPIODOUT	&= ~(0b1000<<12);
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <flash4Leds+0x88>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a17      	ldr	r2, [pc, #92]	; (800029c <flash4Leds+0x88>)
 8000240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000244:	6013      	str	r3, [r2, #0]
	*pGPIODOUT	|= (0b0100 <<12);
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <flash4Leds+0x88>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a14      	ldr	r2, [pc, #80]	; (800029c <flash4Leds+0x88>)
 800024c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000250:	6013      	str	r3, [r2, #0]
	delay(cycles);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ffc8 	bl	80001e8 <delay>
	*pGPIODOUT	&= ~(0b0100<<12);
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <flash4Leds+0x88>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <flash4Leds+0x88>)
 800025e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000262:	6013      	str	r3, [r2, #0]
	*pGPIODOUT	|= (0b0010 <<12);
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <flash4Leds+0x88>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0c      	ldr	r2, [pc, #48]	; (800029c <flash4Leds+0x88>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	6013      	str	r3, [r2, #0]
	delay(cycles);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ffb9 	bl	80001e8 <delay>
	*pGPIODOUT	&= ~(0b0010<<12);
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <flash4Leds+0x88>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <flash4Leds+0x88>)
 800027c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000280:	6013      	str	r3, [r2, #0]
	*pGPIODOUT	|= (0b0001 <<12);
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <flash4Leds+0x88>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <flash4Leds+0x88>)
 8000288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800028c:	6013      	str	r3, [r2, #0]
	delay(cycles);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ffaa 	bl	80001e8 <delay>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40020c14 	.word	0x40020c14

080002a0 <main>:

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	*pRCC 		|= (0b1001 << 0); //Enable clock GPIOD &A
 80002a6:	4b16      	ldr	r3, [pc, #88]	; (8000300 <main+0x60>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a15      	ldr	r2, [pc, #84]	; (8000300 <main+0x60>)
 80002ac:	f043 0309 	orr.w	r3, r3, #9
 80002b0:	6013      	str	r3, [r2, #0]
	*pGPIODMODE	&= ~(0b01010101 << 24);
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <main+0x64>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <main+0x64>)
 80002b8:	f023 43aa 	bic.w	r3, r3, #1426063360	; 0x55000000
 80002bc:	6013      	str	r3, [r2, #0]
	*pGPIODMODE	|= (0b01010101 << 24);
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <main+0x64>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <main+0x64>)
 80002c4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002c8:	6013      	str	r3, [r2, #0]
	*pGPIOAMODE	&= ~(3 << 0);
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <main+0x68>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <main+0x68>)
 80002d0:	f023 0303 	bic.w	r3, r3, #3
 80002d4:	6013      	str	r3, [r2, #0]
	uint8_t pinStat = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	71fb      	strb	r3, [r7, #7]
    /* Loop forever */
	while(1){
		if(pinStat==1){
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d102      	bne.n	80002e6 <main+0x46>
			flash4Leds(100000);
 80002e0:	480a      	ldr	r0, [pc, #40]	; (800030c <main+0x6c>)
 80002e2:	f7ff ff97 	bl	8000214 <flash4Leds>
		}
		if(pinStat==0){
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <main+0x52>
			flash4Leds(900000);
 80002ec:	4808      	ldr	r0, [pc, #32]	; (8000310 <main+0x70>)
 80002ee:	f7ff ff91 	bl	8000214 <flash4Leds>
		}
	pinStat = (uint8_t)(*pGPIOAIDR & 0x1);
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0x74>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	71fb      	strb	r3, [r7, #7]
		if(pinStat==1){
 80002fe:	e7ec      	b.n	80002da <main+0x3a>
 8000300:	40023830 	.word	0x40023830
 8000304:	40020c00 	.word	0x40020c00
 8000308:	40020000 	.word	0x40020000
 800030c:	000186a0 	.word	0x000186a0
 8000310:	000dbba0 	.word	0x000dbba0
 8000314:	40020010 	.word	0x40020010

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffa9 	bl	80002a0 <main>

0800034e <LoopForever>:

LoopForever:
    b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	; (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	; (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	; (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	; (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
